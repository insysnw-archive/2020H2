Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,115 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,106 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,100 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_LinearGradient_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_LinearGradient_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_LinearGradient_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,31 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+uniform sampler2D colors;
+uniform vec4 content;
+lowp vec4 paint(vec2 texCoord) {
+vec2 fractvals = vec2(fract(texCoord.x), clamp(texCoord.x, 0.0, 1.0));
+vec2 clrCoord = vec2(content.x + dot(fractvals, content.zw), content.y);
+return texture2D(colors, clrCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_Color_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_Color_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_Color_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,24 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,121 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,107 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_Color_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_Color_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_Color_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,25 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+lowp float mask(vec2 tco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abs(tco), 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_RadialGradient_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_RadialGradient_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_RadialGradient_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,35 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+uniform vec2 innerOffset;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a - texture2D(maskInput, texCoord - innerOffset).a;
+}
+uniform sampler2D colors;
+uniform vec4 content;
+uniform vec3 precalc;
+lowp vec4 paint(vec2 texCoord) {
+float xfx = texCoord.x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + texCoord.y * texCoord.y * precalc.y)) * precalc.z;
+vec2 fractvals = vec2(fract(dist), clamp(dist, 0.0, 1.0));
+vec2 clrCoord = vec2(content.x + dot(fractvals, content.zw), content.y);
+return texture2D(colors, clrCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/diffuse_none.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/diffuse_none.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/diffuse_none.frag	(date 1547619874000)
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+// diffuse fragment shader
+
+#ifdef GL_ES
+
+#extension GL_OES_standard_derivatives : enable
+
+// Define default float precision for fragment shaders
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+
+#else
+
+// Ignore GL_ES precision specifiers:
+#define lowp
+#define mediump
+#define highp
+
+#endif
+
+uniform vec4 diffuseColor;
+uniform sampler2D diffuseTexture;
+
+varying vec2 oTexCoords;
+
+vec4 apply_diffuse() {
+    return vec4(0);
+}
+
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,107 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abs(tco), 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_ImagePattern_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_ImagePattern_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_ImagePattern_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,35 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_Color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_Color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_Color.frag	(date 1547619874000)
@@ -0,0 +1,24 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,110 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,107 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abs(tco), 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/main.vert
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/main.vert	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/main.vert	(date 1547619874000)
@@ -0,0 +1,103 @@
+/*
+ * Copyright (c) 2013, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+uniform mat4 viewProjectionMatrix;
+uniform mat4 worldMatrix;
+uniform vec3 camPos;
+uniform vec3 ambientColor;
+
+attribute vec3 pos;
+attribute vec2 texCoords;
+attribute vec4 tangent;
+
+struct Light {
+    vec4 pos;
+    vec3 color;
+};
+
+//3 lights used
+uniform Light lights[3];
+
+varying vec4 lightTangentSpacePositions[3];
+varying vec2 oTexCoords;
+varying vec3 eyePos;
+
+vec3 getLocalVector(vec3 global, vec3 tangentFrame[3]) {
+    return vec3( dot(global,tangentFrame[1]), dot(global,tangentFrame[2]), dot(global,tangentFrame[0]) );
+}
+
+void main()
+{
+    vec3 tangentFrame[3];    
+
+    vec4 worldPos = worldMatrix * vec4(pos, 1.0);
+
+    // Note: The breaking of a vector and scale computation statement into
+    //       2 separate statements is intentional to workaround a shader
+    //       compiler bug on the Freescale iMX6 platform. See RT-37789 for details. 
+    vec3 t1 = tangent.xyz * tangent.yzx;
+         t1 *= 2.0;
+    vec3 t2 = tangent.zxy * tangent.www;
+         t2 *= 2.0;
+    vec3 t3 = tangent.xyz * tangent.xyz;
+         t3 *= 2.0;
+    vec3 t4 = 1.0-(t3+t3.yzx);
+
+    vec3 r1 = t1 + t2;
+    vec3 r2 = t1 - t2;
+
+    tangentFrame[0] = vec3(t4.y, r1.x, r2.z);
+    tangentFrame[1] = vec3(r2.x, t4.z, r1.y);
+    tangentFrame[2] = vec3(r1.z, r2.y, t4.x);
+    tangentFrame[2] *= (tangent.w>=0.0) ? 1.0 : -1.0;
+    
+    mat3 sWorldMatrix = mat3(worldMatrix[0].xyz, 
+                             worldMatrix[1].xyz, 
+                             worldMatrix[2].xyz);
+
+    //Translate the tangent frame to world space.
+    tangentFrame[0] = sWorldMatrix * tangentFrame[0];
+    tangentFrame[1] = sWorldMatrix * tangentFrame[1];
+    tangentFrame[2] = sWorldMatrix * tangentFrame[2];
+   
+    vec3 Eye = camPos - worldPos.xyz;
+    
+    eyePos = getLocalVector(Eye, tangentFrame);
+   
+    vec3 L = lights[0].pos.xyz - worldPos.xyz;
+    lightTangentSpacePositions[0] = vec4( getLocalVector(L,tangentFrame)*lights[0].pos.w, 1.0);
+
+    L = lights[1].pos.xyz - worldPos.xyz;
+    lightTangentSpacePositions[1] = vec4( getLocalVector(L,tangentFrame)*lights[1].pos.w, 1.0);
+
+    L = lights[2].pos.xyz - worldPos.xyz;
+    lightTangentSpacePositions[2] = vec4( getLocalVector(L,tangentFrame)*lights[2].pos.w, 1.0);
+
+     mat4 mvpMatrix = viewProjectionMatrix * worldMatrix;
+
+    //Send texcoords to Pixel Shader and calculate vertex position.
+    oTexCoords = texCoords;
+    gl_Position = mvpMatrix * vec4(pos,1.0);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Mask_TextureRGB.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Mask_TextureRGB.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Mask_TextureRGB.frag	(date 1547619874000)
@@ -0,0 +1,25 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D imageTex;
+uniform sampler2D maskTex;
+lowp vec4 paint(vec2 imgCoord, vec2 maskCoord) {
+return texture2D(imageTex, imgCoord) * texture2D(maskTex, maskCoord).a;
+}
+void main() {
+gl_FragColor = paint(texCoord0, texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,111 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_LinearGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_LinearGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_LinearGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,102 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abs(tco), 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_ImagePattern.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_ImagePattern.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_ImagePattern.frag	(date 1547619874000)
@@ -0,0 +1,31 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+uniform sampler2D inputTex;
+uniform vec4 content;
+lowp vec4 paint(vec2 texCoord) {
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_Color_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_Color_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_Color_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,18 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+void main() {
+gl_FragColor = perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,101 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,115 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,109 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: .idea/codeStyles/Project.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/codeStyles/Project.xml	(date 1606431637028)
+++ .idea/codeStyles/Project.xml	(date 1606431637028)
@@ -0,0 +1,26 @@
+<component name="ProjectCodeStyleConfiguration">
+  <code_scheme name="Project" version="173">
+    <JetCodeStyleSettings>
+      <option name="PACKAGES_TO_USE_STAR_IMPORTS">
+        <value>
+          <package name="java.util" alias="false" withSubpackages="false" />
+          <package name="kotlinx.android.synthetic" alias="false" withSubpackages="true" />
+          <package name="io.ktor" alias="false" withSubpackages="true" />
+        </value>
+      </option>
+      <option name="PACKAGES_IMPORT_LAYOUT">
+        <value>
+          <package name="" alias="false" withSubpackages="true" />
+          <package name="java" alias="false" withSubpackages="true" />
+          <package name="javax" alias="false" withSubpackages="true" />
+          <package name="kotlin" alias="false" withSubpackages="true" />
+          <package name="" alias="true" withSubpackages="true" />
+        </value>
+      </option>
+      <option name="CODE_STYLE_DEFAULTS" value="KOTLIN_OFFICIAL" />
+    </JetCodeStyleSettings>
+    <codeStyleSettings language="kotlin">
+      <option name="CODE_STYLE_DEFAULTS" value="KOTLIN_OFFICIAL" />
+    </codeStyleSettings>
+  </code_scheme>
+</component>
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,106 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_Color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_Color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_Color.frag	(date 1547619874000)
@@ -0,0 +1,27 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,116 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: .idea/codeStyles/codeStyleConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/codeStyles/codeStyleConfig.xml	(date 1606431637037)
+++ .idea/codeStyles/codeStyleConfig.xml	(date 1606431637037)
@@ -0,0 +1,5 @@
+<component name="ProjectCodeStyleConfiguration">
+  <state>
+    <option name="USE_PER_PROJECT_SETTINGS" value="true" />
+  </state>
+</component>
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_Color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_Color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_Color.frag	(date 1547619874000)
@@ -0,0 +1,18 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+void main() {
+gl_FragColor = perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,100 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,111 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_LinearGradient_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_LinearGradient_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_LinearGradient_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,27 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D colors;
+uniform vec4 content;
+lowp vec4 paint(vec2 texCoord) {
+vec2 fractvals = vec2(fract(texCoord.x), clamp(texCoord.x, 0.0, 1.0));
+vec2 clrCoord = vec2(content.x + dot(fractvals, content.zw), content.y);
+return texture2D(colors, clrCoord);
+}
+void main() {
+gl_FragColor = paint(texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,107 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abs(tco), 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,95 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_Color_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_Color_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_Color_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,39 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,102 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/selfIllum_texture.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/selfIllum_texture.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/selfIllum_texture.frag	(date 1547619874000)
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+// texture selfIllum fragment shader
+
+#ifdef GL_ES
+
+#extension GL_OES_standard_derivatives : enable
+
+// Define default float precision for fragment shaders
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+
+#else
+
+// Ignore GL_ES precision specifiers:
+#define lowp
+#define mediump
+#define highp
+
+#endif
+
+uniform sampler2D selfIllumTexture;
+
+vec4 apply_selfIllum() {
+    return texture2D(selfIllumTexture, oTexCoords);
+}
+
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,107 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abs(tco), 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,101 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,100 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,95 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_ImagePattern_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_ImagePattern_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_ImagePattern_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,51 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_LinearGradient.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_LinearGradient.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_LinearGradient.frag	(date 1547619874000)
@@ -0,0 +1,32 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+uniform vec2 innerOffset;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a - texture2D(maskInput, texCoord - innerOffset).a;
+}
+uniform sampler2D colors;
+uniform vec4 content;
+lowp vec4 paint(vec2 texCoord) {
+vec2 fractvals = vec2(fract(texCoord.x), clamp(texCoord.x, 0.0, 1.0));
+vec2 clrCoord = vec2(content.x + dot(fractvals, content.zw), content.y);
+return texture2D(colors, clrCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_Color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_Color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_Color.frag	(date 1547619874000)
@@ -0,0 +1,23 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+void main() {
+gl_FragColor = mask(texCoord0) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,101 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/rowexpanderpane.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/rowexpanderpane.css	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/rowexpanderpane.css	(date 1580448308000)
@@ -0,0 +1,3 @@
+.table-view .column-header .label, .tree-table-view .column-header .label {
+    -fx-text-fill: -fx-dark-text-color;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/main2Lights.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/main2Lights.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/main2Lights.frag	(date 1547619874000)
@@ -0,0 +1,94 @@
+/*
+ * Copyright (c) 2013, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+// main fragment shader
+
+#ifdef GL_ES
+
+#extension GL_OES_standard_derivatives : enable
+
+// Define default float precision for fragment shaders
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+
+#else
+
+// Ignore GL_ES precision specifiers:
+#define lowp
+#define mediump
+#define highp
+
+#endif
+
+vec4 apply_diffuse();
+vec4 apply_specular();
+vec3 apply_normal();
+vec4 apply_selfIllum();
+
+struct Light {
+    vec4 pos;
+    vec3 color;
+};
+
+uniform vec3 ambientColor;
+uniform Light lights[3];
+
+varying vec3 eyePos;
+varying vec4 lightTangentSpacePositions[3];
+
+void main()
+{
+    gl_FragColor = vec4(0.0,0.0,0.0,1.0);
+    vec4 diffuse = apply_diffuse();
+
+    if (diffuse.a == 0.0) discard;
+
+    vec3 n = apply_normal();
+
+    vec3 d = vec3(0.0);
+    vec3 s = vec3(0.0);
+
+    vec3 refl = reflect(normalize(eyePos), n);
+    vec4 specular = apply_specular();
+    float power = specular.a;
+
+    vec3 l = normalize(lightTangentSpacePositions[0].xyz);
+    d = clamp(dot(n,l), 0.0, 1.0)*(lights[0].color).rgb;
+    s = pow(clamp(dot(-refl, l), 0.0, 1.0), power)*lights[0].color.rgb;
+
+    l = normalize(lightTangentSpacePositions[1].xyz);
+    d += clamp(dot(n,l), 0.0, 1.0)*(lights[1].color).rgb;
+    s += pow(clamp(dot(-refl, l), 0.0, 1.0), power) * lights[1].color.rgb;
+
+    vec3 rez = (ambientColor+d) * diffuse.xyz + s*specular.rgb;
+    rez += apply_selfIllum().xyz;
+
+    gl_FragColor = vec4(clamp(rez, 0.0, 1.0) , diffuse.a);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_ImagePattern_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_ImagePattern_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_ImagePattern_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,42 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abs(tco), 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,105 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,102 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/main1Light.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/main1Light.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/main1Light.frag	(date 1547619874000)
@@ -0,0 +1,90 @@
+/*
+ * Copyright (c) 2013, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+// main fragment shader
+
+#ifdef GL_ES
+
+#extension GL_OES_standard_derivatives : enable
+
+// Define default float precision for fragment shaders
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+
+#else
+
+// Ignore GL_ES precision specifiers:
+#define lowp
+#define mediump
+#define highp
+
+#endif
+
+vec4 apply_diffuse();
+vec4 apply_specular();
+vec3 apply_normal();
+vec4 apply_selfIllum();
+
+struct Light {
+    vec4 pos;
+    vec3 color;
+};
+
+uniform vec3 ambientColor;
+uniform Light lights[3];
+
+varying vec3 eyePos;
+varying vec4 lightTangentSpacePositions[3];
+
+void main()
+{
+    gl_FragColor = vec4(0.0,0.0,0.0,1.0);
+    vec4 diffuse = apply_diffuse();
+
+    if (diffuse.a == 0.0) discard;
+
+    vec3 n = apply_normal();
+
+    vec3 d = vec3(0.0);
+    vec3 s = vec3(0.0);
+
+    vec3 refl = reflect(normalize(eyePos), n);
+    vec4 specular = apply_specular();
+    float power = specular.a;
+
+    vec3 l = normalize(lightTangentSpacePositions[0].xyz);
+    d = clamp(dot(n,l), 0.0, 1.0)*(lights[0].color).rgb;
+    s = pow(clamp(dot(-refl, l), 0.0, 1.0), power)*lights[0].color.rgb;
+
+    vec3 rez = (ambientColor+d) * diffuse.xyz + s*specular.rgb;
+    rez += apply_selfIllum().xyz;
+
+    gl_FragColor = vec4(clamp(rez, 0.0, 1.0) , diffuse.a);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,105 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/selfIllum_none.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/selfIllum_none.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/selfIllum_none.frag	(date 1547619874000)
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+// no-op selfIllum fragment shader
+
+#ifdef GL_ES
+
+#extension GL_OES_standard_derivatives : enable
+
+// Define default float precision for fragment shaders
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+
+#else
+
+// Ignore GL_ES precision specifiers:
+#define lowp
+#define mediump
+#define highp
+
+#endif
+
+uniform sampler2D selfIllumTexture;
+
+vec4 apply_selfIllum() {
+    return vec4(0.0);
+}
+
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.gitignore	(date 1606511674329)
+++ .idea/.gitignore	(date 1606511674329)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
+# Editor-based HTTP Client requests
+/httpRequests/
Index: build/tmp/shadowJar/MANIFEST.MF
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/tmp/shadowJar/MANIFEST.MF	(date 1606510520825)
+++ build/tmp/shadowJar/MANIFEST.MF	(date 1606510520825)
@@ -0,0 +1,3 @@
+Manifest-Version: 1.0
+Main-Class: MainKt
+
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1606429712082)
+++ .idea/misc.xml	(date 1606429712082)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="FrameworkDetectionExcludesConfiguration">
+    <file type="web" url="file://$PROJECT_DIR$" />
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(date 1606429667163)
+++ .idea/gradle.xml	(date 1606429667163)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/javafx.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/javafx.properties	(date 1547618804000)
+++ build/libs/network1-1.0-SNAPSHOT-all/javafx.properties	(date 1547618804000)
@@ -0,0 +1,3 @@
+javafx.version=11.0.2
+javafx.runtime.version=11.0.2+1
+javafx.runtime.build=1
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/modena-embedded-performance.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/modena-embedded-performance.css	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/modena-embedded-performance.css	(date 1547619866000)
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/* This is a extra stylesheet for Modena theme that is enabled on Embedded
+ * to tune performance for lower powered devices */
+
+/* ====   REMOVE ALL EFFECTS   ================================================= */
+.slider .thumb,
+.scroll-bar:horizontal > .decrement-button > .decrement-arrow,
+.scroll-bar:horizontal > .increment-button > .increment-arrow,
+.scroll-bar:vertical > .decrement-button > .decrement-arrow,
+.scroll-bar:vertical > .increment-button > .increment-arrow,
+.context-menu,
+.menu-up-arrow,
+.menu-down-arrow,
+.tab-pane > .tab-header-area > .headers-region > .tab > .tab-container > .tab-close-button,
+.combo-box-popup > .list-view,
+.titled-pane:focused > .title > .arrow-button > .arrow,
+.color-palette,
+.custom-color-dialog > .color-rect-pane #color-rect-indicator,
+.custom-color-dialog > .color-rect-pane > .color-bar > #color-bar-indicator,
+.tooltip {
+    -fx-effect: null;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/whiteOnBlack.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/whiteOnBlack.css	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/whiteOnBlack.css	(date 1547619866000)
@@ -0,0 +1,549 @@
+/*
+ * Copyright (c) 2013, 2016, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*******************************************************************************
+ *                                                                             *
+ * "White on Black" contrast theme.                                            *
+ *                                                                             *
+ ******************************************************************************/
+
+.root {
+    -fx-base: black;
+    -fx-background: -fx-base;
+    -fx-control-inner-background: -fx-base;
+    -fx-control-inner-background-alt: -fx-base;
+    -fx-faint-focus-color: -fx-accent;
+    -fx-hover-base: white;
+    -fx-pressed-base: derive(-fx-hover-base, -15%);
+    -fx-box-border: -fx-hover-base;
+    -fx-text-box-border: -fx-hover-base;
+    -fx-shadow-highlight-color: -fx-base;
+    -fx-outer-border: -fx-hover-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Font Weight                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+.text,
+.text-input {
+    -fx-font-weight: bold;
+}
+.axis {
+    -fx-tick-label-font-weight: bold;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ToggleButton                                                                *
+ *                                                                             *
+ ******************************************************************************/
+.toggle-button:selected,
+.toggle-button:selected:focused {
+    -fx-light-text-color: -fx-base;
+}
+.toggle-button:selected {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-hover-base, -fx-hover-base;
+}
+.toggle-button:selected:focused {
+    -fx-background-color: -fx-focus-color, -fx-hover-base, -fx-faint-focus-color, -fx-hover-base;
+}
+.toggle-button:selected:armed {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-hover-base, -fx-faint-focus-color, -fx-pressed-base;
+}
+.toggle-button:selected:focused:armed {
+    -fx-background-color: -fx-focus-color, -fx-hover-base, -fx-faint-focus-color, -fx-pressed-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Slider                                                                      *
+ *                                                                             *
+ ******************************************************************************/
+.slider .thumb {
+    -fx-background-color: -fx-hover-base, -fx-hover-base, -fx-body-color;
+}
+.slider:focused .thumb {
+    -fx-background-color: -fx-focus-color, -fx-hover-base, -fx-body-color, -fx-faint-focus-color, -fx-body-color;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ScrollBar                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.scroll-bar > .increment-button,
+.scroll-bar > .decrement-button {
+    -fx-background-color: -fx-outer-border, -fx-base, -fx-base;
+}
+.scroll-bar > .increment-button:hover,
+.scroll-bar > .decrement-button:hover {
+    -fx-background-color: -fx-outer-border, -fx-hover-base, -fx-hover-base;
+}
+.scroll-bar > .increment-button:hover > .increment-arrow,
+.scroll-bar > .decrement-button:hover > .decrement-arrow,
+.scroll-bar > .increment-button:hover:pressed > .increment-arrow,
+.scroll-bar > .decrement-button:hover:pressed > .decrement-arrow {
+    -fx-background-color: -fx-base, -fx-base;
+}
+.scroll-bar > .increment-button > .increment-arrow,
+.scroll-bar > .decrement-button > .decrement-arrow {
+    -fx-background-color: -fx-hover-base, -fx-hover-base;
+}
+.scroll-bar > .increment-button:hover:pressed,
+.scroll-bar > .decrement-button:hover:pressed {
+    -fx-background-color: -fx-outer-border, -fx-pressed-base, -fx-pressed-base;
+}
+.scroll-bar:horizontal > .decrement-button > .decrement-arrow,
+.scroll-bar:horizontal > .increment-button > .increment-arrow,
+.scroll-bar:vertical > .decrement-button > .decrement-arrow,
+.scroll-bar:vertical > .increment-button > .increment-arrow {
+    -fx-effect: null;
+}
+.scroll-bar > .thumb:pressed {
+    -fx-background-color: -fx-outer-border, -fx-pressed-base, -fx-pressed-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * HTML Editor                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+.html-editor-foreground{
+    -fx-graphic: url("HTMLEditor-Text-Color-White.png");
+}
+.html-editor-background {
+    -fx-graphic: url("HTMLEditor-Background-Color-White.png");
+}
+.html-editor-cut {
+    -fx-graphic: url("HTMLEditor-Cut-White.png");
+}
+.html-editor-copy {
+    -fx-graphic: url("HTMLEditor-Copy-White.png");
+}
+.html-editor-paste {
+    -fx-graphic: url("HTMLEditor-Paste-White.png");
+}
+.html-editor-align-left {
+    -fx-graphic: url("HTMLEditor-Left-White.png");
+}
+.html-editor-align-center {
+    -fx-graphic: url("HTMLEditor-Center-White.png");
+}
+.html-editor-align-right {
+    -fx-graphic: url("HTMLEditor-Right-White.png");
+}
+.html-editor-align-justify {
+    -fx-graphic: url("HTMLEditor-Justify-White.png");
+}
+.html-editor-outdent {
+    -fx-graphic: url("HTMLEditor-Outdent-White.png");
+}
+.html-editor-outdent:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Outdent-White-rtl.png");
+}
+.html-editor-indent {
+    -fx-graphic: url("HTMLEditor-Indent-White.png");
+}
+.html-editor-indent:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Indent-White-rtl.png");
+}
+.html-editor-bullets {
+    -fx-graphic: url("HTMLEditor-Bullets-White.png");
+}
+.html-editor-bullets:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Bullets-White-rtl.png");
+}
+.html-editor-numbers {
+    -fx-graphic: url("HTMLEditor-Numbered-White.png");
+}
+.html-editor-numbers:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Numbered-White-rtl.png");
+}
+.html-editor-bold {
+    -fx-graphic: url("HTMLEditor-Bold-White.png");
+}
+.html-editor-italic {
+    -fx-graphic: url("HTMLEditor-Italic-White.png");
+}
+.html-editor-underline {
+    -fx-graphic: url("HTMLEditor-Underline-White.png");
+}
+.html-editor-strike {
+    -fx-graphic: url("HTMLEditor-Strikethrough-White.png");
+}
+.html-editor-hr {
+    -fx-graphic: url("HTMLEditor-Break-White.png");
+}
+.html-editor-foreground:hover,
+.html-editor-foreground:showing {
+    -fx-graphic: url("HTMLEditor-Text-Color-Black.png");
+}
+.html-editor-background:hover,
+.html-editor-background:showing {
+    -fx-graphic: url("HTMLEditor-Background-Color-Black.png");
+}
+.html-editor-cut:hover,
+.html-editor-cut:selected {
+    -fx-graphic: url("HTMLEditor-Cut-Black.png");
+}
+.html-editor-copy:hover,
+.html-editor-copy:selected {
+    -fx-graphic: url("HTMLEditor-Copy-Black.png");
+}
+.html-editor-paste:hover,
+.html-editor-paste:selected {
+    -fx-graphic: url("HTMLEditor-Paste-Black.png");
+}
+.html-editor-align-left:hover,
+.html-editor-align-left:selected {
+    -fx-graphic: url("HTMLEditor-Left-Black.png");
+}
+.html-editor-align-center:hover,
+.html-editor-align-center:selected {
+    -fx-graphic: url("HTMLEditor-Center-Black.png");
+}
+.html-editor-align-right:hover,
+.html-editor-align-right:selected {
+    -fx-graphic: url("HTMLEditor-Right-Black.png");
+}
+.html-editor-align-justify:hover,
+.html-editor-align-justify:selected {
+    -fx-graphic: url("HTMLEditor-Justify-Black.png");
+}
+.html-editor-outdent:hover,
+.html-editor-outdent:armed {
+    -fx-graphic: url("HTMLEditor-Outdent-Black.png");
+}
+.html-editor-indent:hover,
+.html-editor-indent:armed {
+    -fx-graphic: url("HTMLEditor-Indent-Black.png");
+}
+.html-editor-bullets:hover,
+.html-editor-bullets:selected {
+    -fx-graphic: url("HTMLEditor-Bullets-Black.png");
+}
+.html-editor-numbers:hover,
+.html-editor-numbers:selected {
+    -fx-graphic: url("HTMLEditor-Numbered-Black.png");
+}
+.html-editor-bold:hover,
+.html-editor-bold:selected {
+    -fx-graphic: url("HTMLEditor-Bold-Black.png");
+}
+.html-editor-italic:hover,
+.html-editor-italic:selected {
+    -fx-graphic: url("HTMLEditor-Italic-Black.png");
+}
+.html-editor-underline:hover,
+.html-editor-underline:selected {
+    -fx-graphic: url("HTMLEditor-Underline-Black.png");
+}
+.html-editor-strike:hover,
+.html-editor-strike:selected {
+    -fx-graphic: url("HTMLEditor-Strikethrough-Black.png");
+}
+.html-editor-hr:hover,
+.html-editor-hr:armed {
+    -fx-graphic: url("HTMLEditor-Break-Black.png");
+}
+/*******************************************************************************
+ *                                                                             *
+ * PopupMenu                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.context-menu {
+    -fx-background-color: -fx-hover-base, -fx-control-inner-background;
+}
+.context-menu > .scroll-arrow > .menu-up-arrow,
+.context-menu > .scroll-arrow > .menu-down-arrow {
+    -fx-background-color: -fx-hover-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * MenuBar                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+.menu-bar {
+    -fx-background-color: -fx-hover-base, -fx-base;
+    -fx-background-insets: 1 1 0 1, 1;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Menu                                                                        *
+ *                                                                             *
+ ******************************************************************************/
+.menu-up-arrow, .menu-down-arrow {
+    -fx-effect: null;
+}
+.menu > .right-container > .arrow {
+    -fx-background-color: -fx-hover-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * MenuItem                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+.menu-item >.label {
+    -fx-text-fill: -fx-hover-base;
+}
+.radio-menu-item:checked > .left-container > .radio,
+.check-menu-item:checked > .left-container > .check {
+    -fx-background-color: -fx-hover-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * TabPane                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+.tab-header-area {
+    -fx-text-box-border: -fx-base;
+}
+.tab-pane > .tab-header-area > .headers-region > .tab:selected:hover {
+    -fx-background-color: -fx-hover-base;
+}
+.tab-pane:focused > .tab-header-area > .headers-region > .tab:selected .focus-indicator {
+    -fx-border-width: 4;
+    -fx-border-color: -fx-focus-color;
+    -fx-border-insets: -4 -4 -7 -5;
+    -fx-border-radius: 1;
+}
+.tab-pane:focused > .tab-header-area > .headers-region > .tab:bottom:selected .focus-indicator {
+    -fx-border-insets: -7 -5 -4 -4;
+}
+.tab-pane:bottom > .tab-header-area > .tab-header-background,
+.tab-pane:left > .tab-header-area > .tab-header-background,
+.tab-pane:right > .tab-header-area > .tab-header-background {
+    -fx-background-insets: 0, 0 0 1 0, 1;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ComboBox                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+.combo-box-popup > .list-view {
+    -fx-background-color: -fx-outer-border, -fx-control-inner-background;
+}
+/*******************************************************************************
+ *                                                                             *
+ * TitledPane                                                                  *
+ *                                                                             *
+ ******************************************************************************/
+.titled-pane > .title {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+.titled-pane:focused > .title {
+    -fx-background-color: -fx-faint-focus-color, -fx-focus-color, -fx-body-color;
+    -fx-background-insets: 0, 1, 4;
+}
+.titled-pane > .title:hover {
+    -fx-color: -fx-base;
+}
+.titled-pane > .title > .arrow-button > .arrow,
+.titled-pane:focused > .title > .arrow-button > .arrow {
+    -fx-background-color: -fx-mark-color;
+    -fx-background-insets: 0;
+    -fx-effect: null;
+}
+.titled-pane > .title:hover > .arrow-button > .arrow {
+    -fx-background-color: -fx-mark-highlight-color;
+    -fx-background-insets: 0;
+}
+/*******************************************************************************
+ *                                                                             *
+ * SplitPane                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.split-pane:horizontal > .split-pane-divider:hover {
+    -fx-background-color: -fx-box-border, -fx-hover-base;
+    -fx-background-insets: 0, 0 1 0 1;
+}
+.split-pane:vertical > .split-pane-divider:hover {
+    -fx-background-color: -fx-box-border, -fx-hover-base;
+    -fx-background-insets: 0, 1 0 1 0;
+}
+.split-pane:horizontal > .split-pane-divider:pressed {
+    -fx-background-color: -fx-box-border, -fx-pressed-base;
+    -fx-background-insets: 0, 0 1 0 1;
+}
+.split-pane:vertical > .split-pane-divider:pressed {
+    -fx-background-color: -fx-box-border, -fx-pressed-base;
+    -fx-background-insets: 0, 1 0 1 0;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ColorPicker                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+.color-palette {
+    -fx-background-color: -fx-hover-base, -fx-base;
+}
+.color-palette > .color-picker-grid > .color-square:selected {
+    -fx-background-color: -fx-hover-base;
+}
+.custom-color-dialog .color-rect-pane .color-rect-border,
+.custom-color-dialog > .color-rect-pane > .color-bar,
+.custom-color-dialog .controls-pane .current-new-color-grid #current-new-color-border {
+    -fx-border-color: derive(-fx-hover-base, -20%);
+}
+.custom-color-dialog > .color-rect-pane #color-rect-indicator,
+.custom-color-dialog > .color-rect-pane > .color-bar > #color-bar-indicator {
+    -fx-border-color: -fx-hover-base;
+    -fx-border-width: 2;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Pagination                                                                  *
+ *                                                                             *
+ ******************************************************************************/
+.pagination > .pagination-control > .control-box > .number-button:selected {
+    -fx-background-color: transparent, -fx-hover-base, -fx-inner-border, -fx-body-color;
+    -fx-text-fill: -fx-hover-base;
+}
+.pagination > .pagination-control > .control-box > .number-button:selected:hover:armed {
+    -fx-background-color: transparent, -fx-hover-base, -fx-inner-border, -fx-body-color;
+}
+.pagination > .pagination-control > .control-box > .number-button:selected:hover {
+    -fx-background-color: transparent, -fx-hover-base, -fx-hover-base, -fx-hover-base;
+    -fx-text-fill: -fx-dark-text-color;
+}
+.pagination > .pagination-control > .control-box > .bullet-button:selected,
+.pagination > .pagination-control > .control-box > .bullet-button:selected:hover:armed {
+    -fx-background-color: transparent, -fx-hover-base, -fx-inner-border, -fx-body-color;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Table Cells                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled > .check-box-table-cell:selected > .check-box > .box,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled > .check-box-table-cell:selected > .check-box > .box,
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:selected > .check-box-table-cell > .check-box > .box,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:selected > .check-box-table-cell > .check-box > .box {
+    -fx-background-color: -fx-hover-base, -fx-background;
+}
+.table-view > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled > .check-box-table-cell:selected > .check-box > .box,
+.tree-table-view > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled > .check-box-table-cell:selected > .check-box > .box,
+.table-view > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:selected > .check-box-table-cell > .check-box > .box,
+.tree-table-view > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:selected > .check-box-table-cell > .check-box > .box {
+    -fx-background-color: -fx-base, -fx-background;
+}
+/*******************************************************************************
+ *                                                                             *
+ * TableView                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.table-view,
+.tree-table-view {
+    -fx-table-cell-border-color: derive(-fx-hover-base,-30%);
+}
+/*******************************************************************************
+*                                                                              *
+* TextField                                                                    *
+*                                                                              *
+*******************************************************************************/
+.text-field {
+    -fx-prompt-text-fill: derive(-fx-hover-base,-30%);
+}
+/*******************************************************************************
+ *                                                                             *
+ * Tooltip                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+.tooltip {
+    -fx-background-color: -fx-hover-base, rgba(30, 30, 30, 0.8);
+    -fx-background-radius: 6px, 5px;
+    -fx-background-insets: 0, 1;
+    -fx-font-size: 1em;
+    -fx-font-weight: bold;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Charts                                                                      *
+ *                                                                             *
+ ******************************************************************************/
+.chart-legend {
+    -fx-background-color: -fx-hover-base, -fx-base;
+    -fx-background-insets: 0, 1;
+    -fx-background-radius: 4, 3;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Axis                                                                        *
+ *                                                                             *
+ ******************************************************************************/
+.axis {
+    AXIS_COLOR: -fx-light-text-color;
+    -fx-tick-label-fill: -fx-hover-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ChartPlot                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.chart-vertical-grid-lines,
+.chart-horizontal-grid-lines {
+    -fx-stroke: derive(-fx-hover-base, -30%);
+}
+/*******************************************************************************
+ *                                                                             *
+ * ScatterChart, LineChart, AreaChart, PieChart                                *
+ *                                                                             *
+ ******************************************************************************/
+.default-color5.chart-symbol, /* hollow circle */
+.chart-line-symbol,
+.chart-area-symbol {
+    -fx-background-radius: 6px;
+    -fx-padding: 6px;
+}
+.chart-area-symbol {
+    -fx-background-color: #f9d900, black;
+    -fx-background-insets: 0, 2;
+}
+.default-color0.chart-area-symbol { -fx-background-color: CHART_COLOR_1, white; }
+.default-color1.chart-area-symbol { -fx-background-color: CHART_COLOR_2, white; }
+.default-color2.chart-area-symbol { -fx-background-color: CHART_COLOR_3, white; }
+.default-color3.chart-area-symbol { -fx-background-color: CHART_COLOR_4, white; }
+.default-color4.chart-area-symbol { -fx-background-color: CHART_COLOR_5, white; }
+.default-color5.chart-area-symbol { -fx-background-color: CHART_COLOR_6, white; }
+.default-color6.chart-area-symbol { -fx-background-color: CHART_COLOR_7, white; }
+.default-color7.chart-area-symbol { -fx-background-color: CHART_COLOR_8, white; }
+.chart-series-area-line {
+    -fx-stroke-width: 3px;
+}
+.default-color0.chart-series-area-fill { -fx-fill: CHART_COLOR_1_TRANS_20; }
+.default-color1.chart-series-area-fill { -fx-fill: CHART_COLOR_2_TRANS_20; }
+.default-color2.chart-series-area-fill { -fx-fill: CHART_COLOR_3_TRANS_20; }
+.default-color3.chart-series-area-fill { -fx-fill: CHART_COLOR_4_TRANS_20; }
+.default-color4.chart-series-area-fill { -fx-fill: CHART_COLOR_5_TRANS_20; }
+.default-color5.chart-series-area-fill { -fx-fill: CHART_COLOR_6_TRANS_20; }
+.default-color6.chart-series-area-fill { -fx-fill: CHART_COLOR_7_TRANS_20; }
+.default-color7.chart-series-area-fill { -fx-fill: CHART_COLOR_8_TRANS_20; }
+.area-legend-symbol {
+    -fx-background-insets: 0, 2;
+}
+.chart-pie-label-line {
+    -fx-stroke: -fx-hover-base;
+}
+.chart-pie-label {
+    -fx-fill: -fx-hover-base;
+}
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(date 1606429712103)
+++ .idea/compiler.xml	(date 1606429712103)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="11" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/jarRepositories.xml	(date 1606470448167)
+++ .idea/jarRepositories.xml	(date 1606470448167)
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="MavenRepo" />
+      <option name="name" value="MavenRepo" />
+      <option name="url" value="https://repo.maven.apache.org/maven2/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="BintrayJCenter" />
+      <option name="name" value="BintrayJCenter" />
+      <option name="url" value="https://jcenter.bintray.com/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/modena-no-transparency.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/modena-no-transparency.css	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/modena-no-transparency.css	(date 1547619866000)
@@ -0,0 +1,77 @@
+/*
+ * Copyright (c) 2009, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*******************************************************************************
+ *                                                                             *
+ * PopupMenu                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.context-menu {
+    -fx-effect: null;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ComboBox                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+
+.combo-box-popup > .list-view {
+    -fx-effect: null;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ColorPicker                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+
+.color-palette {
+    -fx-background-radius: 0;
+    -fx-effect: null;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Tooltip                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+
+.tooltip {
+    -fx-background-color: rgb(30, 30, 30);
+    -fx-background-radius: 0;
+    -fx-effect: null;
+}
+
+/*******************************************************************************
+*                                                                              *
+* DatePicker                                                                   *
+*                                                                              *
+*******************************************************************************/
+.date-picker-popup {
+    -fx-background-radius: 0;
+    -fx-effect: null;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard_ru_RU.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard_ru_RU.properties	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard_ru_RU.properties	(date 1580448308000)
@@ -0,0 +1,5 @@
+back=< _\u041D\u0430\u0437\u0430\u0434
+cancel=_\u041E\u0442\u043C\u0435\u043D\u0430
+finish=_\u0413\u043E\u0442\u043E\u0432\u043E
+next=_\u0414\u0430\u043B\u0435\u0435 >
+steps=\u0428\u0430\u0433\u0438
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard_es.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard_es.properties	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard_es.properties	(date 1580448308000)
@@ -0,0 +1,5 @@
+back=< _Atr\u00e1s
+cancel=_Cancelar
+finish=_Finalizar
+next=_Siguiente >
+steps=Pasos
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard.properties	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard.properties	(date 1580448308000)
@@ -0,0 +1,5 @@
+back=< _Back
+cancel=_Cancel
+finish=_Finish
+next=_Next >
+steps=Steps
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel_nb_NO.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel_nb_NO.properties	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel_nb_NO.properties	(date 1580448308000)
@@ -0,0 +1,1 @@
+required=Dette feltet er p�krevet
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/META-INF/services/kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/META-INF/services/kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader	(date 1574783086000)
+++ build/libs/network1-1.0-SNAPSHOT-all/META-INF/services/kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader	(date 1574783086000)
@@ -0,0 +1,1 @@
+kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsLoaderImpl
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/META-INF/proguard/coroutines.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/META-INF/proguard/coroutines.pro	(date 1606396438000)
+++ build/libs/network1-1.0-SNAPSHOT-all/META-INF/proguard/coroutines.pro	(date 1606396438000)
@@ -0,0 +1,20 @@
+# ServiceLoader support
+-keepnames class kotlinx.coroutines.internal.MainDispatcherFactory {}
+-keepnames class kotlinx.coroutines.CoroutineExceptionHandler {}
+
+# Most of volatile fields are updated with AFU and should not be mangled
+-keepclassmembernames class kotlinx.** {
+    volatile <fields>;
+}
+
+# Same story for the standard library's SafeContinuation that also uses AtomicReferenceFieldUpdater
+-keepclassmembernames class kotlin.coroutines.SafeContinuation {
+    volatile <fields>;
+}
+
+# These classes are only required by kotlinx.coroutines.debug.AgentPremain, which is only loaded when
+# kotlinx-coroutines-core is used as a Java agent, so these are not needed in contexts where ProGuard is used.
+-dontwarn java.lang.instrument.ClassFileTransformer
+-dontwarn sun.misc.SignalHandler
+-dontwarn java.lang.instrument.Instrumentation
+-dontwarn sun.misc.Signal
Index: build/libs/network1-1.0-SNAPSHOT-all/META-INF/services/kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/META-INF/services/kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition	(date 1574783086000)
+++ build/libs/network1-1.0-SNAPSHOT-all/META-INF/services/kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition	(date 1574783086000)
@@ -0,0 +1,3 @@
+kotlin.reflect.jvm.internal.impl.load.java.FieldOverridabilityCondition
+kotlin.reflect.jvm.internal.impl.load.java.ErasedOverridabilityCondition
+kotlin.reflect.jvm.internal.impl.load.java.JavaIncompatibilityRulesOverridabilityCondition
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel.properties	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel.properties	(date 1580448308000)
@@ -0,0 +1,1 @@
+required=This field is required
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel_nl_NL.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel_nl_NL.properties	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel_nl_NL.properties	(date 1580448308000)
@@ -0,0 +1,1 @@
+required=Dit veld is verplicht
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel_ru_RU.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel_ru_RU.properties	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel_ru_RU.properties	(date 1580448308000)
@@ -0,0 +1,1 @@
+required=\u042D\u0442\u043E \u043F\u043E\u043B\u0435 \u043E\u0431\u044F\u0437\u0430\u0442\u0435\u043B\u044C\u043D\u043E
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard_nb_NO.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard_nb_NO.properties	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard_nb_NO.properties	(date 1580448308000)
@@ -0,0 +1,5 @@
+back=< _Tilbake
+cancel=_Avbryt
+finish=_Fullf�r
+next=_Neste >
+steps=Steg
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel_de_DE.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel_de_DE.properties	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel_de_DE.properties	(date 1580448308000)
@@ -0,0 +1,1 @@
+required=Dieses Feld ist erforderlich
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard_nl_NL.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard_nl_NL.properties	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard_nl_NL.properties	(date 1580448308000)
@@ -0,0 +1,5 @@
+back=< _Terug
+cancel=_Annuleren
+finish=_Voltooien
+next=_Volgende >
+steps=Stappen
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard_de_DE.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard_de_DE.properties	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/Wizard_de_DE.properties	(date 1580448308000)
@@ -0,0 +1,5 @@
+back=< _Zur�ck
+cancel=_Abbrechen
+finish=_Beenden
+next=_Weiter >
+steps=Schritte
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel_es.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel_es.properties	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/i18n/ViewModel_es.properties	(date 1580448308000)
@@ -0,0 +1,1 @@
+required=Este campo es obligatorio
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/two-level-focus.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/two-level-focus.css	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/two-level-focus.css	(date 1547619866000)
@@ -0,0 +1,149 @@
+/*
+ * Copyright (c) 2009, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*******************************************************************************
+ *                                                                             *
+ * 2-level focus setting for Modena                                            *
+ *                                                                             *
+ ******************************************************************************/
+
+/*******************************************************************************
+ *                                                                             *
+ * ChoiceBox                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.choice-box:showing:external-focus {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0 0 -1 0, 0, 1, 2;
+    -fx-background-radius: 3px, 3px, 2px, 1px;
+}
+/*******************************************************************************
+ *                                                                             *
+ * TextField                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.text-input:focused:internal-focus {
+    -fx-highlight-fill: -fx-accent;
+    -fx-highlight-text-fill: white;
+    -fx-prompt-text-fill: transparent;
+    -fx-background-color: linear-gradient(to bottom, derive(-fx-text-box-border, -10%), -fx-text-box-border),
+    linear-gradient(from 0px 0px to 0px 5px, derive(-fx-control-inner-background, -9%), -fx-control-inner-background);
+}
+.text-input:focused:external-focus {
+    /*-fx-text-fill: -fx-text-inner-color;*/
+    -fx-highlight-fill: -fx-control-inner-background;
+    -fx-highlight-text-fill: -fx-text-inner-color;
+    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);
+    -fx-background-color:
+        -fx-focus-color,
+        -fx-control-inner-background,
+        -fx-faint-focus-color,
+        linear-gradient(from 0px 0px to 0px 5px, derive(-fx-control-inner-background, -9%), -fx-control-inner-background);
+}
+/*******************************************************************************
+ *                                                                             *
+ * TextArea                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+.text-area:focused:internal-focus .content {
+    -fx-background-color:
+        linear-gradient(from 0px 0px to 0px 4px, derive(-fx-control-inner-background, -8%), -fx-control-inner-background);
+}
+/*******************************************************************************
+ *                                                                             *
+ * Slider                                                                      *
+ *                                                                             *
+ ******************************************************************************/
+.slider {
+    -fx-padding: 5;
+}
+.slider:focused:external-focus {
+    -fx-background-color: -fx-focus-color, -fx-control-inner-background, -fx-faint-focus-color, -fx-control-inner-background;
+    -fx-background-insets: -0.2, 1, -1.4, 2;
+    -fx-background-radius: 3, 2, 4, 2;
+}
+.slider:focused:internal-focus {
+    -fx-background-color: transparent;
+}
+.slider:focused:external-focus .thumb {
+    -fx-background-color:
+        linear-gradient(to bottom, derive(-fx-text-box-border, -20%), derive(-fx-text-box-border, -30%)),
+        -fx-inner-border,
+        -fx-body-color;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ListView, TableView                                                         *
+ *                                                                             *
+ ******************************************************************************/
+.list-view:focused:external-focus > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:selected,
+.table-view:focused:external-focus > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:selected,
+.table-view:focused:external-focus > .virtual-flow > .clipped-container > .sheet > .table-row-cell > .table-cell:selected {
+    -fx-background: -fx-selection-bar-non-focused;
+    -fx-table-cell-border-color: derive(-fx-selection-bar-non-focused, 20%);
+    -fx-cell-focus-inner-border: derive(-fx-selection-bar-non-focused, 20%);
+}
+
+.list-view:focused:internal-focus,
+.table-view:focused:internal-focus {
+    -fx-background-color: -fx-box-border, -fx-control-inner-background;
+    -fx-background-insets: 0, 1;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ComboBox                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+.combo-box-base:focused:showing:external-focus,
+.combo-box-base:editable:focused:showing:external-focus > .arrow-button {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0 0 -1 0, 0, 1, 2;
+    -fx-background-radius: 3px, 3px, 2px, 1px;
+}
+.combo-box-base:editable:focused:internal-focus > .text-field,
+.combo-box-base:editable:focused:showing:external-focus > .text-field:focused {
+    -fx-background-color: -fx-control-inner-background;
+    -fx-background-insets: 1 0 1 1;
+    -fx-background-radius: 2 0 0 2;
+    -fx-prompt-text-fill: transparent;
+}
+.combo-box-base:editable:focused:showing:external-focus > .arrow-button {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 1 1 1 0, 1, 2;
+    -fx-background-radius: 0 3 3 0, 0 2 2 0, 0 1 1 0;
+}
+.combo-box-popup > .list-view > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:selected {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-selection-bar !important;
+}
+.combo-box-base:editable:focused:external-focus > .text-field,
+.combo-box-base:editable:external-focus > .text-field:focused {
+    -fx-background-color:
+        -fx-control-inner-background,
+        -fx-faint-focus-color,
+        linear-gradient(from 0px 0px to 0px 5px, derive(-fx-control-inner-background, -9%), -fx-control-inner-background);
+    -fx-background-insets: 1 0 1 1, 1 0 1 1, 3 2 3 3;
+    -fx-background-radius: 2 0 0 2, 1 0 0 1, 0;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/touch.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/touch.css	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/touch.css	(date 1547619866000)
@@ -0,0 +1,271 @@
+/*
+ * Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*******************************************************************************
+ *                                                                             *
+ * CSS Styles for embedded devices. These styles either override or            *
+ * supplement those in caspian.css                                             *
+ *                                                                             *
+ ******************************************************************************/
+
+/*******************************************************************************
+ *                                                                             *
+ * PopupMenu                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.context-menu .text-input-context-menu {
+    -fx-background-color: transparent;
+    -fx-background-radius: 0;
+    -fx-padding: 0;
+}
+
+.context-menu .text-input-context-menu .button {
+    -fx-background-radius: 0;
+    -fx-background-color: derive(-fx-color,-40%);
+    -fx-text-fill: white;
+}
+
+.context-menu .text-input-context-menu .pointer {
+    -fx-background-color: derive(-fx-color,-40%);
+    -fx-padding: 6px;
+    -fx-shape: "M 6 0 L 12 12 L 0 12 z";
+    -fx-scale-shape: true;
+}
+
+
+/*******************************************************************************
+ *                                                                             *
+ * ScrollBar                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.scroll-bar:horizontal,
+.scroll-bar:horizontal:focused,
+.scroll-bar:vertical,
+.scroll-bar:vertical:focused {
+    -fx-background-color: transparent;
+}
+.scroll-bar:horizontal > .track {
+   -fx-opacity: 50%;
+   -fx-background-color: linear-gradient(to bottom, derive(-fx-base,-3%), derive(-fx-base,5%) 50%, derive(-fx-base,-3%));
+   -fx-background-insets: 0;
+}
+.scroll-bar:vertical > .track {
+   -fx-opacity: 50%;
+   -fx-background-color: linear-gradient(to right, derive(-fx-base,-3%), derive(-fx-base,5%) 50%, derive(-fx-base,-3%));
+   -fx-background-insets: 0;
+}
+.scroll-bar > .thumb {
+   -fx-background-color: derive(-fx-outer-border,-30%), -fx-body-color;
+   -fx-background-radius: 2, 1;
+}
+.scroll-bar:vertical > .thumb {
+   -fx-background-color: derive(-fx-outer-border,-30%), -fx-body-color-to-right;
+}
+
+
+/*******************************************************************************
+ *                                                                             *
+ * ListView, TreeView, TableView, TreeTableView, ScrollPane, TextArea          *
+ *                                                                             *
+ ******************************************************************************/
+.list-view > .virtual-flow > .corner,
+.tree-view > .virtual-flow > .corner,
+.table-view > .virtual-flow > .corner,
+.tree-table-view > .virtual-flow > .corner,
+.scroll-pane > .corner {
+    -fx-opacity: 50%;
+    -fx-background-color: derive(-fx-base,5%);
+}
+.list-view > .virtual-flow > .corner,
+.tree-view > .virtual-flow > .corner,
+.table-view > .virtual-flow > .corner,
+.tree-table-view > .virtual-flow > .corner{
+    -fx-background-insets: 0;
+}
+.text-area > .scroll-pane > .corner {
+    -fx-background-radius: 0;
+}
+.scroll-pane > .scroll-bar:vertical {
+    -fx-padding: 1 1 1 0;
+}
+.scroll-pane > .scroll-bar:horizontal {
+    -fx-padding: 0 1 1 1;
+}
+.list-view > .virtual-flow > .scroll-bar:vertical,
+.tree-view > .virtual-flow > .scroll-bar:vertical,
+.table-view > .virtual-flow > .scroll-bar:vertical,
+.tree-table-view > .virtual-flow > .scroll-bar:vertical,
+.list-view > .virtual-flow > .scroll-bar:horizontal,
+.tree-view > .virtual-flow > .scroll-bar:horizontal,
+.table-view > .virtual-flow > .scroll-bar:horizontal,
+.tree-table-view > .virtual-flow > .scroll-bar:horizontal {
+    -fx-padding: 0;
+}
+
+
+
+/*******************************************************************************
+ *                                                                             *
+ * TextField, PasswordField, TextArea                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.text-field {
+    -fx-padding: 6 5 6 5; /* Adding 3px to top and bottom for handles */
+}
+
+.caret-handle {
+    -fx-background-color: transparent,
+                          black /*#ACACAC*/,
+                          linear-gradient(to bottom, #AFAFAF 0%, #DFDFDF 100%);
+    -fx-background-insets: -4 -18 -8 -18, 0, 1;
+    -fx-shape: "M11.974,2.579L20,12.358V20H4V12.356L11.974,2.579z";
+/*
+    -fx-shape: "M11.972,1L3,12v17h18V12L11.972,1L11.972,1z";
+    -fx-padding: 0.375em 0.291em 0.375em 0.291em;
+*/
+    -fx-padding: 0.32em 0.3em 0.32em 0.3em;
+    -fx-cursor: hand;
+}
+
+
+
+.selection-handle {
+    -fx-background-color: transparent,
+                          #0071bc /*-fx-accent*/,
+                          linear-gradient(to bottom, #0063AA 0%, #008AED 100%);
+    -fx-background-insets: -4 -18 -8 -18, 0, 1;
+    -fx-shape: "M10.974,2.579L19,12.358V20H3V12.356L10.974,2.579z";
+/*
+    -fx-shape: "M10.972,1L2,12v17h18V12L10.972,1L10.972,1z";
+    -fx-padding: 0.375em 0.291em 0.375em 0.291em;
+*/
+    -fx-padding: 0.32em 0.3em 0.32em 0.3em;
+    -fx-cursor: hand;
+}
+
+
+/*******************************************************************************
+ *
+ * 2-level focus setting.
+ * The visuals aren't ready yet, so currently these are just placeholders.
+ *
+ ******************************************************************************/
+
+.choice-box:focused:external-focus {
+    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+.choice-box:focused:showing {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+.choice-box:focused:internal-focus {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+
+
+.slider {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-background-color: transparent;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 3, 2, 2;
+    -fx-padding: 3 5 5 5;
+}
+.slider:focused:external-focus {
+    -fx-background-color: -fx-focus-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-background-insets: -0.4, 1, 2;
+    -fx-background-radius: 3.4, 2, 2;
+    -fx-prompt-text-fill: transparent;
+
+}
+.slider:focused:internal-focus {
+    -fx-background-color: transparent;
+}
+.slider:focused:external-focus > .thumb {
+    -fx-focus-color: transparent;
+}
+
+
+.text-field:focused:external-focus {
+    -fx-background-color: -fx-focus-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);
+}
+.text-field:focused:external-focus .caret-handle {
+    -fx-background-color: transparent;
+}
+.text-field:focused:external-focus .selection-handle {
+    -fx-background-color: transparent;
+}
+.text-field:focused:internal-focus {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-prompt-text-fill: transparent;
+}
+
+
+
+.password-field:focused:external-focus {
+    -fx-background-color: -fx-focus-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);
+}
+.password-field:focused:external-focus .caret-handle {
+    -fx-background-color: transparent;
+}
+.password-field:focused:external-focus .selection-handle {
+    -fx-background-color: transparent;
+}
+.password-field:focused:internal-focus {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-text-box-border, -fx-control-inner-background;
+}
+
+
+.text-area:focused:external-focus {
+    -fx-background-color: -fx-focus-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);
+}
+.text-area:focused:external-focus .caret-handle {
+    -fx-background-color: transparent;
+}
+.text-area:focused:external-focus .selection-handle {
+    -fx-background-color: transparent;
+}
+.text-area:focused:internal-focus {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-prompt-text-fill: transparent;
+}
+
+
+
+
+.combo-box:focused:external-focus {
+    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+.combo-box:focused:showing {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+.combo-box:focused:internal-focus {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/font/android_system_fonts.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/font/android_system_fonts.xml	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/font/android_system_fonts.xml	(date 1547619874000)
@@ -0,0 +1,39 @@
+
+<familyset>
+    <family>
+        <nameset>
+            <name>serif</name>
+            <name>droid-serif</name>
+            <name>times</name>
+            <name>times-new-roman</name>
+        </nameset>
+        <fileset>
+            <file>DroidSerif-Regular.ttf</file>
+            <file>DroidSerif-Bold.ttf</file>
+            <file>DroidSerif-Italic.ttf</file>
+            <file>DroidSerif-BoldItalic.ttf</file>
+        </fileset>
+    </family>
+    <family>
+        <nameset>
+            <name>droid-sans</name>
+            <name>sans-serif</name>
+        </nameset>
+        <fileset>
+            <file>DroidSans.ttf</file>
+            <file>DroidSans-Bold.ttf</file>
+        </fileset>
+    </family>
+    <family>
+        <nameset>
+            <name>monospace</name>
+            <name>courier</name>
+            <name>courier-new</name>
+            <name>monaco</name>
+            <name>droid-sans-mono</name>
+        </nameset>
+        <fileset>
+            <file>DroidSansMono.ttf</file>
+        </fileset>
+    </family>
+</familyset>
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/maskpane.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/maskpane.css	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/maskpane.css	(date 1580448308000)
@@ -0,0 +1,9 @@
+.mask-pane {
+    -fx-background-color: rgba(0,0,0,0.5);
+    -fx-accent: aliceblue;
+}
+
+.mask-pane > .progress-indicator {
+    -fx-max-width: 300;
+    -fx-max-height: 300;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_fr.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_fr.properties	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_fr.properties	(date 1547619874000)
@@ -0,0 +1,2 @@
+OverlayWarningESC = Appuyez sur Echap pour quitter le mode plein \u00E9cran.
+OverlayWarningKey = Appuyez sur %s pour quitter le mode plein \u00E9cran.
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/modena.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/modena.css	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/modena.css	(date 1547619866000)
@@ -0,0 +1,3437 @@
+/*
+ * Copyright (c) 2009, 2017, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ *  Modena
+ *
+ *  This is the second generation theme for JavaFX after Caspian.
+ */
+
+/*******************************************************************************
+ *                                                                             *
+ * THEMING INSTRUCTIONS                                                       *
+ *                                                                             *
+ *******************************************************************************
+
+TODO: Explain here how theming works:
+
+     * -fx-text-base-color for text on top of -fx-base, -fx-color, and -fx-body-color
+     * -fx-text-background-color for text on top of -fx-background
+     * -fx-text-inner-color for text on top of -fx-control-inner-color
+     * -fx-selection-bar-text for text on top of -fx-selection-bar
+
+RESIZING FOR DIFFERENT SCREEN DPI
+-------------------------------
+
+When the screen DPI changes Windows will use a different font size by default.
+The default is 12px and can change to 15px or 18px depending on user
+preference or screen DPI. On Mac the default is 13px and embedded will depend
+on hardware. To make UI controls scale and be the right proportions for each of
+these font sizes we base the padding (which controls size of control) on the
+font size. This is done using the CSS measurement unit of a "em" where
+(1em = font size). The default sizes are based on Windows default of 12px, as
+a quick reference here are common px sizes in em units on windows.
+
+Windows 12px -> em units    -> Mac 13px      |
+----------------------------------------
+     1px     -> 0.083333em  -> 1.08px ~ 2px
+     2px     -> 0.166667em  -> 2.16px ~ 3px
+     3px  = 0.25em
+     4px  = 0.333333em
+     5px  = 0.416667em
+     6px  = 0.5em
+     7px  = 0.583333em
+     8px  = 0.666667em
+     9px  = 0.75em
+    10px  = 0.833333em
+    11px  = 0.916667em
+    12px  = 1em
+
+IMPORTANT: Not all sizes are scaled with em units only padding. All borders and
+background insets are still in pixels. Also any padding where it has to match up
+is being used to size a border should also be in pixels.
+
+ ******************************************************************************/
+
+/*******************************************************************************
+ *                                                                             *
+ * CSS Styles for core infrastructure bits.  The .root section provides the    *
+ * overall default colors used by the rest of the sections.                    *
+ *                                                                             *
+ ******************************************************************************/
+
+.root {
+    /***************************************************************************
+     *                                                                         *
+     * The main color palette from which the rest of the colors are derived.   *
+     *                                                                         *
+     **************************************************************************/
+
+    /* A light grey that is the base color for objects.  Instead of using
+     * -fx-base directly, the sections in this file will typically use -fx-color.
+     */
+    -fx-base: #ececec;
+
+    /* A very light grey used for the background of windows.  See also
+     * -fx-text-background-color, which should be used as the -fx-text-fill
+     * value for text painted on top of backgrounds colored with -fx-background.
+     */
+    -fx-background: derive(-fx-base,26.4%);
+
+    /* Used for the inside of text boxes, password boxes, lists, trees, and
+     * tables.  See also -fx-text-inner-color, which should be used as the
+     * -fx-text-fill value for text painted on top of backgrounds colored
+     * with -fx-control-inner-background.
+     */
+    -fx-control-inner-background: derive(-fx-base,80%);
+    /* Version of -fx-control-inner-background for alternative rows */
+    -fx-control-inner-background-alt: derive(-fx-control-inner-background,-2%);
+
+    /* One of these colors will be chosen based upon a ladder calculation
+     * that uses the brightness of a background color.  Instead of using these
+     * colors directly as -fx-text-fill values, the sections in this file should
+     * use a derived color to match the background in use.  See also:
+     *
+     * -fx-text-base-color for text on top of -fx-base, -fx-color, and -fx-body-color
+     * -fx-text-background-color for text on top of -fx-background
+     * -fx-text-inner-color for text on top of -fx-control-inner-color
+     * -fx-selection-bar-text for text on top of -fx-selection-bar
+     */
+    -fx-dark-text-color: black;
+    -fx-mid-text-color: #333;
+    -fx-light-text-color: white;
+
+    /* A bright blue for highlighting/accenting objects.  For example: selected
+     * text; selected items in menus, lists, trees, and tables; progress bars */
+    -fx-accent: #0096C9;
+
+    /* Default buttons color, this is similar to accent but more subtle */
+    -fx-default-button: #ABD8ED;
+
+    /* A bright blue for the focus indicator of objects. Typically used as the
+     * first color in -fx-background-color for the "focused" pseudo-class. Also
+     * typically used with insets of -1.4 to provide a glowing effect.
+     */
+    -fx-focus-color: #039ED3;
+    -fx-faint-focus-color: #039ED322;
+
+    /* The color that is used in styling controls. The default value is based
+     * on -fx-base, but is changed by pseudoclasses to change the base color.
+     * For example, the "hover" pseudoclass will typically set -fx-color to
+     * -fx-hover-base (see below) and the "armed" pseudoclass will typically
+     * set -fx-color to -fx-pressed-base.
+     */
+    -fx-color: -fx-base;
+
+    /* Chart Color Palette */
+    CHART_COLOR_1: #f3622d;
+    CHART_COLOR_2: #fba71b;
+    CHART_COLOR_3: #57b757;
+    CHART_COLOR_4: #41a9c9;
+    CHART_COLOR_5: #4258c9;
+    CHART_COLOR_6: #9a42c8;
+    CHART_COLOR_7: #c84164;
+    CHART_COLOR_8: #888888;
+    /* Chart Color Palette Semi-Transparent
+     * These are used by charts that need semi transparent versions of the above colors, such as BubbleChart. They
+     * are exactly the same colors as above just with alpha
+     *
+     * 20% opacity
+     */
+    CHART_COLOR_1_TRANS_20: #f3622d33;
+    CHART_COLOR_2_TRANS_20: #fba71b33;
+    CHART_COLOR_3_TRANS_20: #57b75733;
+    CHART_COLOR_4_TRANS_20: #41a9c933;
+    CHART_COLOR_5_TRANS_20: #4258c933;
+    CHART_COLOR_6_TRANS_20: #9a42c833;
+    CHART_COLOR_7_TRANS_20: #c8416433;
+    CHART_COLOR_8_TRANS_20: #88888833;
+    /* 70% opacity */
+    CHART_COLOR_1_TRANS_70: #f3622db3;
+    CHART_COLOR_2_TRANS_70: #fba71bb3;
+    CHART_COLOR_3_TRANS_70: #57b757b3;
+    CHART_COLOR_4_TRANS_70: #41a9c9b3;
+    CHART_COLOR_5_TRANS_70: #4258c9b3;
+    CHART_COLOR_6_TRANS_70: #9a42c8b3;
+    CHART_COLOR_7_TRANS_70: #c84164b3;
+    CHART_COLOR_8_TRANS_70: #888888b3;
+
+    /***************************************************************************
+     *                                                                         *
+     * Colors that are derived from the main color palette.                    *
+     *                                                                         *
+     **************************************************************************/
+
+    /* A little lighter than -fx-base and used as the -fx-color for the
+     * "hovered" pseudoclass state.
+     */
+    -fx-hover-base: ladder(
+        -fx-base,
+        derive(-fx-base,20%) 20%,
+        derive(-fx-base,30%) 35%,
+        derive(-fx-base,40%) 50%
+     );
+
+    /* A little darker than -fx-base and used as the -fx-color for the
+     * "armed" pseudoclass state.
+     *
+     * TODO: should this be renamed to -fx-armed-base?
+     */
+    -fx-pressed-base: derive(-fx-base,-6%);
+
+    /* The color to use for -fx-text-fill when text is to be painted on top of
+     * a background filled with the -fx-background color.
+     */
+    -fx-text-background-color: ladder(
+        -fx-background,
+        -fx-light-text-color 45%,
+        -fx-dark-text-color  46%,
+        -fx-dark-text-color  59%,
+        -fx-mid-text-color   60%
+    );
+
+    /* A little darker than -fx-color and used to draw boxes around objects such
+     * as progress bars, scroll bars, scroll panes, trees, tables, and lists.
+     */
+    -fx-box-border: ladder(
+        -fx-color,
+        black 20%,
+        derive(-fx-color,-15%) 30%
+    );
+
+    /* Darker than -fx-background and used to draw boxes around text boxes and
+     * password boxes.
+     */
+    -fx-text-box-border: ladder(
+        -fx-background,
+        black 10%,
+        derive(-fx-background, -15%) 30%
+    );
+
+    /* Lighter than -fx-background and used to provide a small highlight when
+     * needed on top of -fx-background. This is never a shadow in Modena but
+     * keep -fx-shadow-highlight-color name to be compatible with Caspian.
+     */
+    -fx-shadow-highlight-color: ladder(
+        -fx-background,
+        rgba(255,255,255,0.07) 0%,
+        rgba(255,255,255,0.07) 20%,
+        rgba(255,255,255,0.07) 70%,
+        rgba(255,255,255,0.7) 90%,
+        rgba(255,255,255,0.75) 100%
+      );
+
+    /* A gradient that goes from a little darker than -fx-color on the top to
+     * even more darker than -fx-color on the bottom.  Typically is the second
+     * color in the -fx-background-color list as the small thin border around
+     * a control. It is typically the same size as the control (i.e., insets
+     * are 0).
+     */
+    -fx-outer-border: derive(-fx-color,-23%);
+
+    /* A gradient that goes from a bit lighter than -fx-color on the top to
+     * a little darker at the bottom.  Typically is the third color in the
+     * -fx-background-color list as a thin highlight inside the outer border.
+     * Insets are typically 1.
+     */
+    -fx-inner-border: linear-gradient(to bottom,
+                ladder(
+                    -fx-color,
+                    derive(-fx-color,30%) 0%,
+                    derive(-fx-color,20%) 40%,
+                    derive(-fx-color,25%) 60%,
+                    derive(-fx-color,55%) 80%,
+                    derive(-fx-color,55%) 90%,
+                    derive(-fx-color,75%) 100%
+                ),
+                ladder(
+                    -fx-color,
+                    derive(-fx-color,20%) 0%,
+                    derive(-fx-color,10%) 20%,
+                    derive(-fx-color,5%) 40%,
+                    derive(-fx-color,-2%) 60%,
+                    derive(-fx-color,-5%) 100%
+                ));
+    -fx-inner-border-horizontal: linear-gradient(to right, derive(-fx-color,55%), derive(-fx-color,-5%));
+    -fx-inner-border-bottomup: linear-gradient(to top, derive(-fx-color,55%), derive(-fx-color,-5%));
+
+    /* A gradient that goes from a little lighter than -fx-color at the top to
+     * a little darker than -fx-color at the bottom and is used to fill the
+     * body of many controls such as buttons.
+     */
+    -fx-body-color: linear-gradient(to bottom,
+            ladder(
+                -fx-color,
+                derive(-fx-color,8%) 75%,
+                derive(-fx-color,10%) 80%
+            ),
+            derive(-fx-color,-8%));
+    -fx-body-color-bottomup: linear-gradient(to top, derive(-fx-color,10%) ,derive(-fx-color,-6%));
+    -fx-body-color-to-right: linear-gradient(to right, derive(-fx-color,10%) ,derive(-fx-color,-6%));
+
+    /* The color to use as -fx-text-fill when painting text on top of
+     * backgrounds filled with -fx-base, -fx-color, and -fx-body-color.
+     */
+    -fx-text-base-color: ladder(
+        -fx-color,
+        -fx-light-text-color 45%,
+        -fx-dark-text-color  46%,
+        -fx-dark-text-color  59%,
+        -fx-mid-text-color   60%
+    );
+
+    /* The color to use as -fx-text-fill when painting text on top of
+     * backgrounds filled with -fx-control-inner-background.
+     */
+    -fx-text-inner-color: ladder(
+        -fx-control-inner-background,
+        -fx-light-text-color 45%,
+        -fx-dark-text-color  46%,
+        -fx-dark-text-color  59%,
+        -fx-mid-text-color   60%
+    );
+
+    /* The color to use for small mark-like objects such as checks on check
+     * boxes, filled in circles in radio buttons, arrows on scroll bars, etc.
+     */
+    -fx-mark-color: ladder(
+        -fx-color,
+        white 30%,
+        derive(-fx-color,-63%) 31%
+    );
+
+    /* The small thin light "shadow" for mark-like objects. Typically used in
+     * conjunction with -fx-mark-color with an insets of 1 0 -1 0. */
+    -fx-mark-highlight-color: ladder(
+        -fx-color,
+        derive(-fx-color,80%) 60%,
+        white 70%
+    );
+
+    /* Background for items in list like things such as menus, lists, trees,
+     * and tables. */
+    -fx-selection-bar: -fx-accent;
+
+    /* Background color to use for selection of list cells etc. This is when
+     * the control doesn't have focus or the row of a previously selected item. */
+    -fx-selection-bar-non-focused: lightgrey;
+
+    /* The color to use as -fx-text-fill when painting text on top of
+     * backgrounds filled with -fx-selection-bar.
+     *
+     * TODO: this can be removed
+     */
+    -fx-selection-bar-text: -fx-text-background-color;
+
+    /* These are needed for Popup */
+    -fx-background-color: inherit;
+    -fx-background-radius: inherit;
+    -fx-background-insets: inherit;
+    -fx-padding: inherit;
+
+    /* The color to use in ListView/TreeView/TableView to indicate hover. */
+    -fx-cell-hover-color: #cce3f4;
+
+    /** Focus line for keyboard focus traversal on cell based controls */
+    -fx-cell-focus-inner-border: derive(-fx-selection-bar,30%);
+
+    /* The colors to use in Pagination */
+    -fx-page-bullet-border: #acacac;
+    -fx-page-indicator-hover-border: #accee5;
+
+    -fx-focused-text-base-color : ladder(
+        -fx-selection-bar,
+        -fx-light-text-color 45%,
+        -fx-dark-text-color 46%,
+        -fx-dark-text-color 59%,
+        -fx-mid-text-color 60%
+    );
+    -fx-focused-mark-color : -fx-focused-text-base-color ;
+
+    /***************************************************************************
+     *                                                                         *
+     * Set the default background color for the scene                          *
+     *                                                                         *
+     **************************************************************************/
+
+    -fx-background-color: -fx-background;
+}
+
+/* Make popups transparent */
+.root.popup {
+    -fx-background-color: transparent;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Common Styles                                                               *
+ *                                                                             *
+ * These are styles that give a standard look to a whole range of controls     *
+ *                                                                             *
+ ******************************************************************************/
+
+/* ====   TEXT NODES IN CONTROLS   ========================================== */
+
+.text {
+    /* This adjusts text alignment within the bounds of text nodes so that
+       the text is always vertically centered within the bounds. Based on
+       the cap height of the text. */
+    -fx-bounds-type: logical_vertical_center;
+    /* Enable LCD text rendering */
+    -fx-font-smoothing-type: lcd;
+}
+
+/* ====   BUTTON LIKE THINGS   ============================================== */
+
+.button,
+.toggle-button,
+.radio-button > .radio,
+.check-box > .box,
+.menu-button,
+.choice-box,
+.color-picker.split-button > .color-picker-label,
+.combo-box-base,
+.combo-box-base:editable > .arrow-button {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0 0 -1 0, 0, 1, 2;
+    -fx-background-radius: 3px, 3px, 2px, 1px;
+    -fx-padding: 0.333333em 0.666667em 0.333333em 0.666667em; /* 4 8 4 8 */
+    -fx-text-fill: -fx-text-base-color;
+    -fx-alignment: CENTER;
+    -fx-content-display: LEFT;
+}
+.menu-button > .label {
+    -fx-alignment: CENTER_LEFT;
+}
+.button:hover,
+.toggle-button:hover,
+.radio-button:hover > .radio,
+.check-box:hover > .box,
+.menu-button:hover,
+.split-menu-button > .label:hover,
+.split-menu-button > .arrow-button:hover,
+.slider .thumb:hover,
+.scroll-bar > .thumb:hover,
+.scroll-bar > .increment-button:hover,
+.scroll-bar > .decrement-button:hover,
+.choice-box:hover,
+.color-picker.split-button > .arrow-button:hover,
+.color-picker.split-button > .color-picker-label:hover,
+.combo-box-base:hover,
+.combo-box-base:editable > .arrow-button:hover,
+.spinner .increment-arrow-button:hover,
+.spinner .decrement-arrow-button:hover,
+.tab-pane > .tab-header-area > .control-buttons-tab > .container > .tab-down-button:hover {
+    -fx-color: -fx-hover-base;
+}
+.button:armed,
+.toggle-button:armed,
+.radio-button:armed > .radio,
+.check-box:armed .box,
+.menu-button:armed,
+.split-menu-button:armed > .label,
+.split-menu-button > .arrow-button:pressed,
+.split-menu-button:showing > .arrow-button,
+.slider .thumb:pressed,
+.scroll-bar > .thumb:pressed,
+.scroll-bar > .increment-button:pressed,
+.scroll-bar > .decrement-button:pressed,
+.choice-box:showing,
+.combo-box-base:showing,
+.combo-box-base:editable:showing > .arrow-button,
+.spinner .increment-arrow-button:pressed,
+.spinner .decrement-arrow-button:pressed,
+.tab-pane > .tab-header-area > .control-buttons-tab > .container > .tab-down-button:pressed {
+    -fx-color: -fx-pressed-base;
+}
+.button:focused,
+.toggle-button:focused,
+.radio-button:focused > .radio,
+.check-box:focused > .box,
+.menu-button:focused,
+.choice-box:focused,
+.color-picker.split-button:focused > .color-picker-label,
+.combo-box-base:focused,
+.slider:focused .thumb {
+    -fx-background-color: -fx-focus-color, -fx-inner-border, -fx-body-color, -fx-faint-focus-color, -fx-body-color;
+    -fx-background-insets: -0.2, 1, 2, -1.4, 2.6;
+    -fx-background-radius: 3, 2, 1, 4, 1;
+}
+
+/* ====   DISABLED THINGS   ================================================= */
+
+.label:disabled,
+.button:disabled,
+.toggle-button:disabled,
+.radio-button:disabled,
+.check-box:disabled,
+.hyperlink:disabled,
+.menu-button:disabled,
+.split-menu-button:disabled,
+.slider:disabled,
+.scroll-bar:disabled,
+.scroll-pane:disabled,
+.progress-bar:disabled,
+.progress-indicator:disabled,
+.text-input:disabled,
+.choice-box:disabled,
+.combo-box-base:disabled,
+.date-cell:disabled > *, /* This is set on children so border is not affected. */
+.list-view:disabled,
+.tree-view:disabled,
+.table-view:disabled,
+.tree-table-view:disabled,
+/*.tab-pane:disabled,  / Removed for JDK-8144983 */
+.titled-pane:disabled > .title,
+.accordion:disabled > .titled-pane > .title,
+.tab-pane > .tab-header-area > .headers-region > .tab:disabled,
+.menu:disabled,
+.menu-item:disabled,
+.list-cell:filled:selected:focused:disabled,
+.list-cell:filled:selected:disabled,
+.tree-cell:filled:selected:focused:disabled,
+.tree-cell:filled:selected:disabled,
+.tree-cell > .tree-disclosure-node:disabled,
+.tree-table-row-cell > .tree-disclosure-node:disabled,
+.table-row-cell:selected:disabled,
+.tree-table-row-cell:selected:disabled,
+.table-cell:selected:disabled,
+.tree-table-cell:selected:disabled,
+.spinner:disabled {
+    -fx-opacity: 0.4;
+}
+
+/* Prevent opacity being applied twice for JDK-8152392 */
+.text-input:disabled > .scroll-pane {
+    -fx-opacity: 1.0;
+}
+
+/* ====   MNEMONIC THINGS   ================================================= */
+
+.mnemonic-underline {
+    -fx-stroke: transparent;
+}
+
+.titled-pane:show-mnemonics > .mnemonic-underline,
+.label:show-mnemonics > .mnemonic-underline,
+.context-menu:show-mnemonics > .mnemonic-underline,
+.menu:show-mnemonics > .mnemonic-underline,
+.menu-bar:show-mnemonics > .mnemonic-underline,
+.menu-item:show-mnemonics > .mnemonic-underline,
+.button:show-mnemonics > .mnemonic-underline,
+.toggle-button:show-mnemonics > .mnemonic-underline,
+.radio-button:show-mnemonics > .mnemonic-underline,
+.check-box:show-mnemonics > .mnemonic-underline,
+.split-menu-button:show-mnemonics > .mnemonic-underline,
+.menu-button:show-mnemonics > .mnemonic-underline {
+    -fx-stroke: -fx-text-base-color;
+}
+
+.menu-button:showing > .label:show-mnemonics > .mnemonic-underline,
+.menu-button:hover > .label:show-mnemonics > .mnemonic-underline,
+.menu-button:focused > .label:show-mnemonics > .mnemonic-underline,
+.menu-item:hover .label:show-mnemonics > .mnemonic-underline,
+.menu-item:focused .label:show-mnemonics > .mnemonic-underline {
+    -fx-stroke: -fx-focused-text-base-color;
+}
+
+.hyperlink:show-mnemonics > .mnemonic-underline {
+    -fx-stroke: -fx-text-fill;
+}
+
+/* ====   MARKS   =========================================================== */
+
+.radio-button:selected > .radio > .dot,
+.check-box:selected > .box > .mark,
+.check-box:indeterminate  > .box > .mark {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+}
+
+/* ====   ARROWS   ========================================================== */
+
+.menu-button > .arrow-button > .arrow,
+.split-menu-button > .arrow-button > .arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 0 0 -1 0, 0;
+    -fx-padding: 0.25em;
+    -fx-shape: "M 0 -3.5 v 7 l 4 -3.5 z";
+}
+.choice-box > .open-button > .arrow,
+.menu-button:openvertically > .arrow-button > .arrow,
+.split-menu-button:openvertically > .arrow-button > .arrow,
+.combo-box-base > .arrow-button > .arrow,
+.web-view .form-select-button .arrow,
+.tab-pane > .tab-header-area > .control-buttons-tab > .container > .tab-down-button > .arrow  {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 0 0 -1 0, 0;
+    -fx-padding: 0.166667em 0.333333em 0.166667em 0.333333em; /* 2 4 2 4 */
+    -fx-shape: "M 0 0 h 7 l -3.5 4 z";
+}
+
+/* ====   CHOICE BOX LIKE THINGS   ========================================== */
+
+.choice-box,
+.menu-button,
+.combo-box-base {
+    -fx-padding: 0;
+}
+.choice-box > .label,
+.menu-button > .label,
+.color-picker > .label {
+    -fx-padding: 0.333333em 0.666667em 0.333333em 0.666667em; /* 4 8 4 8 */
+    -fx-text-fill: -fx-text-base-color;
+}
+.choice-box > .open-button,
+.menu-button > .arrow-button {
+    -fx-padding: 0.5em 0.667em 0.5em 0.0em; /* 6 8 6 0 */
+}
+
+/* ====   BOX LIKE THINGS   ================================================= */
+
+.scroll-pane,
+.split-pane,
+.list-view,
+.tree-view,
+.table-view,
+.tree-table-view,
+.html-editor {
+    -fx-background-color: -fx-box-border, -fx-control-inner-background;
+    -fx-background-insets: 0, 1;
+    -fx-padding: 1;
+}
+.scroll-pane:focused,
+.split-pane:focused,
+.list-view:focused,
+.tree-view:focused,
+.table-view:focused,
+.tree-table-view:focused,
+.html-editor:contains-focus {
+    -fx-background-color: -fx-faint-focus-color, -fx-focus-color, -fx-control-inner-background;
+    -fx-background-insets: -1.4, -0.3, 1;
+    -fx-background-radius: 2, 0, 0;
+}
+/* ones with grey -fx-background not lighter -fx-control-inner-background */
+.scroll-pane,
+.split-pane {
+    -fx-background-color: -fx-box-border, -fx-background;
+}
+.scroll-pane:focused,
+.split-pane:focused {
+    -fx-background-color: -fx-faint-focus-color, -fx-focus-color, -fx-background;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Label                                                                       *
+ *                                                                             *
+ ******************************************************************************/
+
+.label {
+    -fx-text-fill: -fx-text-background-color;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Button & ToggleButton                                                       *
+ *                                                                             *
+ ******************************************************************************/
+
+/* ====   DEFAULT   ========================================================= */
+
+.button:default {
+    -fx-base: -fx-default-button;
+}
+
+/* ====   WEB BUTTONS   ===================================================== */
+
+.web-view .form-select-button {
+    -fx-background-radius: 2, 2, 1, 0;
+    -fx-background-insets: 2 2 1 2, 2, 3, 4;
+}
+
+/* ====   PILL BUTTONS   ==================================================== */
+
+.button.left-pill,
+.toggle-button.left-pill {
+    -fx-background-radius: 3 0 0 3, 3 0 0 3, 2 0 0 2, 1 0 0 1;
+    -fx-background-insets: 0 0 -1 0, 0, 1, 2;
+    -fx-padding: 0.333333em 0.666667em 0.333333em 0.75em; /* 4 8 4 9 */
+}
+.button.center-pill,
+.toggle-button.center-pill {
+    -fx-background-radius: 0;
+    -fx-background-insets: 0 0 -1 0, 0 0 0 0, 1 1 1 0, 2 2 2 1 ;
+}
+.button.right-pill,
+.toggle-button.right-pill {
+    -fx-background-radius: 0 3 3 0, 0 3 3 0, 0 2 2 0, 0 1 1 0;
+    -fx-background-insets: 0 0 -1 0, 0, 1 1 1 0, 2 2 2 1 ;
+}
+.button.left-pill:focused,
+.toggle-button.left-pill:focused {
+    -fx-background-insets: -0.2 0 -0.2 -0.2, 1, 2, -1.4 0 -1.4 -1.4, 2.6;
+    -fx-background-radius: 3 0 0 3, 2 0 0 2, 1 0 0 1, 4 0 0 4, 1 0 0 1;
+}
+.button.center-pill:focused,
+.toggle-button.center-pill:focused {
+    -fx-background-insets: -0.2 0 -0.2 -1, 1 1 1 0, 2 2 2 1, -1.4 0 -1.4 -1, 2.6 2.6 2.6 1.6;
+    -fx-background-radius: 0, 0, 0, 0, 0;
+}
+.button.right-pill:focused,
+.toggle-button.right-pill:focused {
+    -fx-background-insets: -0.2 -0.2 -0.2 -1, 1 1 1 0, 2 2 2 1, -1.4 -1.4 -1.4 -1, 2.6 2.6 2.6 1.6;
+    -fx-background-radius: 0 3 3 0, 0 2 2 0, 0 1 1 0, 0 4 4 0, 0 1 1 0;
+}
+.toggle-button:selected.left-pill:focused {
+    -fx-background-insets: -0.2 0 -0.2 -0.2, 1, -1.4 0 -1.4 -1.4, 2.6;
+    -fx-background-radius: 3 0 0 3, 2 0 0 2, 4 0 0 4, 0;
+}
+.toggle-button:selected.center-pill:focused {
+    -fx-background-insets: -0.2 0 -0.2 -1, 1 1 1 0, -1.4 0 -1.4 -1, 2.6 2.6 2.6 1.6;
+    -fx-background-radius: 0, 0, 0, 0;
+}
+.toggle-button:selected.right-pill:focused {
+    -fx-background-insets: -0.2 -0.2 -0.2 -1, 1 1 1 0, -1.4 -1.4 -1.4 -1, 2.6 2.6 2.6 1.6;
+    -fx-background-radius: 0 3 3 0, 0 2 2 0, 0 4 4 0, 0;
+}
+
+/* ====   SELECTED TOGGLE   ================================================= */
+
+.toggle-button:selected {
+        -fx-background-color:
+            -fx-shadow-highlight-color,
+            linear-gradient(to bottom, derive(-fx-outer-border, -20%), -fx-outer-border),
+            linear-gradient(to bottom,
+                    derive(-fx-color, -22%) 0%,
+                    derive(-fx-color, -13%) 20%,
+                    derive(-fx-color, -11%) 50%);
+    -fx-background-insets: 0 0 -1 0, 0, 1;
+}
+.toggle-button:selected:focused {
+    -fx-background-color:
+        -fx-focus-color,
+        linear-gradient(to bottom,
+            derive(-fx-color, -22%) 0%,
+            derive(-fx-color, -13%) 20%,
+            derive(-fx-color, -11%) 50%),
+        -fx-faint-focus-color,
+        linear-gradient(to bottom,
+            derive(-fx-color, -22%) 0%,
+            derive(-fx-color, -13%) 20%,
+            derive(-fx-color, -11%) 50%);
+    -fx-background-insets: -0.2, 1, -1.4, 2.6;
+    -fx-background-radius: 3, 2, 4, 0;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * RadioButton                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+
+.radio-button {
+    -fx-label-padding: 0.0em 0.0em 0.0em 0.416667em; /* 0 0 0 5 */
+    -fx-text-fill: -fx-text-background-color;
+}
+.radio-button > .radio,
+.radio-button:focused > .radio  {
+   -fx-background-radius: 1.0em; /* large value to make sure this remains circular */
+   -fx-padding: 0.333333em; /* 4 -- padding from outside edge to the inner black dot */
+}
+.radio-button > .radio > .dot {
+   -fx-background-color: transparent;
+   -fx-background-radius: 1.0em; /* large value to make sure this remains circular */
+   -fx-padding: 0.333333em; /* 4 -- radius of the inner black dot when selected */
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * CheckBox                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+
+.check-box {
+    -fx-label-padding: 0.0em 0.0em 0.0em 0.416667em; /* 0 0 0 5 */
+    -fx-text-fill: -fx-text-background-color;
+}
+.check-box > .box {
+    -fx-background-radius: 3, 2, 1;
+    -fx-padding: 0.166667em 0.166667em 0.25em 0.25em; /* 2 2 3 3 */
+}
+.check-box > .box > .mark {
+    -fx-background-color: null;
+    -fx-padding: 0.416667em 0.416667em 0.5em 0.5em; /* 5 5 6 6 */
+    -fx-shape: "M-0.25,6.083c0.843-0.758,4.583,4.833,5.75,4.833S14.5-1.5,15.917-0.917c1.292,0.532-8.75,17.083-10.5,17.083C3,16.167-1.083,6.833-0.25,6.083z";
+}
+.check-box:indeterminate > .box {
+    -fx-padding: 0;
+}
+.check-box:indeterminate  > .box > .mark {
+    -fx-shape: "M0,0H10V2H0Z";
+    -fx-scale-shape: false;
+    -fx-padding: 0.666667em; /* 16x16 = 8+8 */
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Hyperlink                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.hyperlink {
+    -fx-padding: 0.166667em 0.25em 0.166667em 0.25em; /* 2 3 2 3 */
+    -fx-cursor: hand;
+    -fx-content-display: LEFT;
+    -fx-border-color: transparent;
+    -fx-border-width: 1px;
+}
+.hyperlink,
+.hyperlink:hover,
+.hyperlink:hover:visited {
+    -fx-text-fill: -fx-accent;
+}
+.hyperlink:armed,
+.hyperlink:visited,
+.hyperlink:hover:armed {
+    -fx-text-fill: -fx-text-background-color;
+}
+.hyperlink:hover,
+.hyperlink:visited,
+.hyperlink:hover:visited {
+    -fx-underline: true;
+}
+.hyperlink:visited:armed {
+    -fx-underline: false;
+}
+.hyperlink:focused {
+    -fx-border-color: -fx-focus-color;
+    -fx-border-style: segments(0.166667em, 0.166667em);
+    -fx-border-width: 1px;
+}
+
+/* Fix for RT-37971 */
+.cell:selected .hyperlink,
+.cell:selected .hyperlink:hover,
+.cell:selected .hyperlink:hover:visited {
+    -fx-text-fill: -fx-text-background-color;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * SplitMenuButton                                                             *
+ *                                                                             *
+ ******************************************************************************/
+
+.split-menu-button {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border;
+    -fx-background-insets: 0 0 -1 0, 0;
+    -fx-background-radius: 3, 3;
+    -fx-padding: 0;
+}
+.split-menu-button > .label {
+    -fx-text-fill: -fx-text-base-color;
+    -fx-background-color: -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 1 0 1 1, 2 1 2 2;
+    -fx-background-radius: 2 0 0 2, 1 0 0 1;
+    -fx-padding: 0.333333em 0.667em 0.333333em 0.667em; /* 4 8 4 8 */
+}
+.split-menu-button > .arrow-button {
+    -fx-background-color: -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 1, 2;
+    -fx-background-radius: 0 2 2 0, 0 1 1 0;
+    -fx-padding: 0.5em 0.667em 0.5em 0.667em; /* 6 8 6 8 */
+}
+.split-menu-button:focused {
+    -fx-background-color: -fx-focus-color;
+    -fx-background-insets: -0.2;
+    -fx-background-radius: 3;
+}
+.split-menu-button:focused > .label {
+    -fx-background-color: -fx-inner-border, -fx-body-color, -fx-faint-focus-color, -fx-body-color;
+    -fx-background-insets: 1 0 1 1, 2 1 2 2, -1.4 0 -1.4 -1.4, 2.6 1.6 2.6 2.6;
+    -fx-background-radius: 2 0 0 2, 1 0 0 1, 4 0 0 4, 0;
+}
+.split-menu-button:focused > .arrow-button {
+    -fx-background-color: -fx-inner-border, -fx-body-color, -fx-faint-focus-color, -fx-body-color;
+    -fx-background-insets: 1, 2, -1.4, 2.6;
+    -fx-background-radius: 0 2 2 0, 0 1 1 0, 0 4 4 0, 0;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ToolBar                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+
+.tool-bar:vertical { /* left */
+    -fx-background-color:
+        -fx-outer-border,
+        linear-gradient(to right, derive(-fx-base,0%) 0%, derive(-fx-base,10%) 50%, derive(-fx-base,0%) 100%);
+    -fx-background-insets: 0, 0 0 0 1;
+    -fx-padding: 0.5em 0.416667em 0.5em 0.416667em; /* 6 5 6 5 */
+    -fx-spacing: 0.333em; /* 4 */
+    -fx-alignment: TOP_LEFT;
+}
+.tool-bar { /* top */
+    TOP-COLOR: ladder(
+        -fx-base,
+        derive(-fx-base,0%) 0%,
+        derive(-fx-base,46%) 100%
+    );
+    -fx-background-color:
+        linear-gradient(to bottom, derive(TOP-COLOR,25%) 0%, -fx-outer-border 90%),
+        linear-gradient(to bottom, TOP-COLOR 2%, derive(-fx-base,-2.1%) 95%);
+    -fx-background-insets: 0 0 0 0, 1 0 1 0;
+    -fx-padding: 0.416667em 0.5em 0.416667em 0.5em; /* 5 6  5 6 */
+    -fx-spacing: 0.333em; /* 4 */
+    -fx-alignment: CENTER_LEFT;
+}
+.tool-bar:vertical.right {
+    -fx-background-insets: 0, 0 1 0 0;
+}
+.tool-bar.bottom {
+    -fx-background-color:
+        -fx-outer-border,
+        derive(TOP-COLOR,25%),
+        linear-gradient(to bottom, TOP-COLOR 2%, derive(-fx-base,-2.1%) 95%);
+    -fx-background-insets: 0, 1 0 0 0, 2 0 0 0;
+}
+.tool-bar > .container > .separator {
+    -fx-orientation: vertical;
+}
+.tool-bar:vertical > .container > .separator {
+    -fx-orientation: horizontal;
+}
+.tool-bar-overflow-button {
+    -fx-padding: 0 0.75em 0 0 ;
+}
+.tool-bar:vertical > .tool-bar-overflow-button {
+    -fx-padding: 0 0 0.75em 0 ;
+}
+.tool-bar-overflow-button > .arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.666667em 0.916667em 0em 0em; /* 8 11 0 0 */
+    -fx-shape: "M337.273,297.622l-0.016,1.069l2.724,2.639l-2.723,2.628l0.015,1.048h0.881l3.81-3.685l-3.788-3.699H337.273z M343.783,297.622h-0.902l-0.015,1.069l2.724,2.639l-2.724,2.628l0.015,1.048h0.882l3.809-3.685L343.783,297.622z" ;
+}
+
+.tool-bar-overflow-button:focused > .arrow {
+    -fx-background-color: -fx-mark-highlight-color, derive(-fx-accent, -15%);
+    -fx-background-insets: 1 0 -1 0, 0;
+}
+
+.tool-bar-overflow-button:hover > .arrow {
+    -fx-background-color: -fx-mark-highlight-color, derive(-fx-hover-base, -35%);
+    -fx-background-insets: 1 0 -1 0, 0;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Slider                                                                      *
+ *                                                                             *
+ ******************************************************************************/
+
+.slider .thumb {
+    -fx-background-color:
+        linear-gradient(to bottom, derive(-fx-text-box-border, -20%), derive(-fx-text-box-border, -30%)),
+        -fx-inner-border,
+        -fx-body-color;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 1.0em; /* makes sure this remains circular */
+    -fx-padding: 0.583333em;  /* 7 */
+    -fx-effect: dropshadow(two-pass-box , rgba(0, 0, 0, 0.1), 5, 0.0 , 0, 2);
+}
+.slider:focused .thumb {
+    -fx-background-radius: 1.0em; /* makes sure this remains circular */
+}
+.slider .track {
+      -fx-background-color:
+          -fx-shadow-highlight-color,
+          linear-gradient(to bottom, derive(-fx-text-box-border, -10%), -fx-text-box-border),
+          linear-gradient(to bottom,
+            derive(-fx-control-inner-background, -9%),
+            derive(-fx-control-inner-background, 0%),
+            derive(-fx-control-inner-background, -5%),
+            derive(-fx-control-inner-background, -12%)
+          );
+    -fx-background-insets: 0 0 -1 0, 0, 1;
+    -fx-background-radius: 0.25em, 0.25em, 0.166667em; /* 3 3 2 */
+    -fx-padding: 0.25em; /* 3 */
+}
+.slider:vertical .track {
+    -fx-background-color:
+          -fx-shadow-highlight-color,
+          -fx-text-box-border,
+          linear-gradient(to right,
+            derive(-fx-control-inner-background, -9%),
+            -fx-control-inner-background,
+            derive(-fx-control-inner-background, -9%)
+          );
+}
+.slider .axis {
+    -fx-tick-label-fill: derive(-fx-text-background-color, 30%);
+    -fx-tick-length: 5px;
+    -fx-minor-tick-length: 3px;
+    -fx-border-color: null;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ScrollBar                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.scroll-bar:horizontal {
+    -fx-background-color: derive(-fx-box-border,30%), linear-gradient(to bottom, derive(-fx-base,-3%), derive(-fx-base,5%) 50%, derive(-fx-base,-3%));
+    -fx-background-insets: 0, 1 0 1 0;
+}
+.scroll-bar:vertical {
+    -fx-background-color: derive(-fx-box-border,30%), linear-gradient(to right, derive(-fx-base,-3%), derive(-fx-base,5%) 50%, derive(-fx-base,-3%));
+    -fx-background-insets: 0, 0 1 0 1;
+}
+.scroll-bar:focused {
+    -fx-background-color:
+        -fx-focus-color,
+        linear-gradient(to bottom, derive(-fx-base,-3%), derive(-fx-base,5%) 50%, derive(-fx-base,-3%)),
+        -fx-faint-focus-color,
+        linear-gradient(to bottom, derive(-fx-base,-3%), derive(-fx-base,5%) 50%, derive(-fx-base,-3%));
+    -fx-background-insets: -0.2, 1, -1.4, 2.6;
+}
+.scroll-bar:vertical:focused {
+    -fx-background-color:
+        -fx-focus-color,
+        linear-gradient(to right, derive(-fx-base,-3%), derive(-fx-base,5%) 50%, derive(-fx-base,-3%)),
+        -fx-faint-focus-color,
+        linear-gradient(to right, derive(-fx-base,-3%), derive(-fx-base,5%) 50%, derive(-fx-base,-3%));
+}
+.scroll-bar > .thumb {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    /*-fx-background-insets: 1, 2, 3;*/
+    -fx-background-insets: 2, 3, 4;
+    /*-fx-background-radius: 0.416667em, 0.333333em, 0.25em; *//* 5, 4,3 */
+    -fx-background-radius: 3, 2, 1;
+}
+.scroll-bar:vertical > .thumb {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color-to-right;
+}
+.scroll-bar > .increment-button,
+.scroll-bar > .decrement-button {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-color: transparent;
+    -fx-padding: 0.25em; /* 3px */
+}
+.scroll-bar:horizontal > .increment-button,
+.scroll-bar:horizontal > .decrement-button {
+    -fx-background-insets: 2 1 2 1, 3 2 3 2, 4 3 4 3;
+}
+.scroll-bar:vertical > .increment-button,
+.scroll-bar:vertical > .decrement-button {
+    -fx-background-insets: 1 2 1 2, 2 3 2 3, 3 4 3 4;
+}
+.scroll-bar > .increment-button > .increment-arrow,
+.scroll-bar > .decrement-button > .decrement-arrow {
+    -fx-background-color: -fx-mark-highlight-color,derive(-fx-base,-45%);
+}
+.scroll-bar > .increment-button:hover > .increment-arrow,
+.scroll-bar > .decrement-button:hover > .decrement-arrow {
+    -fx-background-color: -fx-mark-highlight-color,derive(-fx-base,-50%);
+}
+.scroll-bar > .increment-button:pressed > .increment-arrow,
+.scroll-bar > .decrement-button:pressed > .decrement-arrow {
+    -fx-background-color: -fx-mark-highlight-color,derive(-fx-base,-55%);
+}
+.scroll-bar:horizontal > .decrement-button > .decrement-arrow {
+    -fx-padding: 0.333em 0.167em 0.333em 0.167em; /* 4 2 4 2 */
+    -fx-shape: "M5.997,5.072L5.995,6.501l-2.998-4l2.998-4l0.002,1.43l-1.976,2.57L5.997,5.072z";
+    -fx-effect: dropshadow(two-pass-box , -fx-shadow-highlight-color, 1, 0.0 , 0, 1.4);
+    /*-fx-background-insets: 2 0 -2 0, 0;*/
+}
+.scroll-bar:horizontal > .increment-button > .increment-arrow {
+    -fx-padding: 0.333em 0.167em 0.333em 0.167em; /* 4 2 4 2 */
+    -fx-shape: "M2.998-0.07L3-1.499l2.998,4L3,6.501l-0.002-1.43l1.976-2.57L2.998-0.07z";
+    -fx-effect: dropshadow(two-pass-box , -fx-shadow-highlight-color, 1, 0.0 , 0, 1.4);
+    /*-fx-background-insets: 2 0 -2 0, 0;*/
+}
+.scroll-bar:vertical > .decrement-button > .decrement-arrow {
+    -fx-padding: 0.167em 0.333em 0.167em 0.333em; /* 2 4 2 4 */
+    -fx-shape: "M1.929,4L0.5,3.998L4.5,1l4,2.998L7.07,4L4.5,2.024L1.929,4z";
+    -fx-effect: dropshadow(two-pass-box , -fx-shadow-highlight-color, 1, 0.0 , 0, 1.4);
+    /*-fx-background-insets: 2 0 -2 0, 0;*/
+}
+.scroll-bar:vertical > .increment-button > .increment-arrow {
+    -fx-padding: 0.167em 0.333em 0.167em 0.333em; /* 2 4 2 4 */
+    -fx-shape: "M7.071,1L8.5,1.002L4.5,4l-4-2.998L1.93,1L4.5,2.976L7.071,1z";
+    -fx-effect: dropshadow(two-pass-box , -fx-shadow-highlight-color, 1, 0.0 , 0, 1.4);
+    /*-fx-background-insets: 2 0 -2 0, 0;*/
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ScrollPane                                                                  *
+ *                                                                             *
+ ******************************************************************************/
+.scroll-pane > .viewport {
+    -fx-background-color: -fx-background;
+}
+.scroll-pane > .scroll-bar:horizontal {
+    -fx-background-insets: 0 1 1 1, 1;
+    -fx-padding: 0 1 0 1;
+}
+.scroll-pane > .scroll-bar:horizontal > .increment-button,
+.scroll-pane > .scroll-bar:horizontal > .decrement-button {
+    -fx-padding: 0.166667em 0.25em 0.25em  0.25em; /* 2 3 3 3 */
+}
+.scroll-pane > .scroll-bar:vertical > .increment-button,
+.scroll-pane > .scroll-bar:vertical > .decrement-button {
+    -fx-padding: 0.25em 0.25em 0.25em 0.166667em; /* 3 3 3 2 */
+}
+.scroll-pane > .scroll-bar:vertical {
+    -fx-background-insets: 1 1 1 0, 1;
+    -fx-padding: 1 0 1 0;
+}
+.scroll-pane > .corner {
+    -fx-background-color: derive(-fx-base,-1%);
+    -fx-background-insets: 0 1 1 0;
+}
+/* new styleclass for edge to edge scrollpanes that don't want to draw a border */
+.scroll-pane.edge-to-edge,
+.tab-pane > * > .scroll-pane {
+    -fx-background-color: -fx-background;
+    -fx-background-insets: 0;
+    -fx-padding: 0;
+}
+.scroll-pane.edge-to-edge > .scroll-bar,
+.tab-pane > * > .scroll-pane > .scroll-bar,
+.titled-pane > .content > .scroll-pane > .scroll-bar {
+    -fx-background-insets: 0;
+    -fx-padding: 0;
+}
+.scroll-pane.edge-to-edge > .scroll-bar > .increment-button,
+.scroll-pane.edge-to-edge > .scroll-bar > .decrement-button,
+.tab-pane > * > .scroll-pane > .scroll-bar > .increment-button,
+.tab-pane > * > .scroll-pane > .scroll-bar > .decrement-button,
+.titled-pane > .content > .scroll-pane > .scroll-bar > .increment-button,
+.titled-pane > .content > .scroll-pane > .scroll-bar > .decrement-button {
+    -fx-padding: 0.25em; /* 3px */
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Separator                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.separator:horizontal .line {
+    -fx-border-color: -fx-text-box-border transparent transparent transparent,
+        -fx-shadow-highlight-color transparent transparent transparent;
+    -fx-border-insets: 0, 1 0 0 0;
+}
+.separator:vertical .line {
+    -fx-border-color: transparent transparent transparent -fx-shadow-highlight-color,
+        transparent transparent transparent -fx-text-box-border;
+    -fx-border-width: 3, 1;
+    -fx-border-insets: 0, 0 0 0 1;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ProgressBar                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+
+.progress-bar {
+    -fx-indeterminate-bar-length: 60;
+    -fx-indeterminate-bar-escape: true;
+    -fx-indeterminate-bar-flip: true;
+    -fx-indeterminate-bar-animation-time: 2;
+}
+.progress-bar > .bar {
+    -fx-background-color: linear-gradient(to bottom, derive(-fx-accent, -7%), derive(-fx-accent, 0%), derive(-fx-accent, -3%), derive(-fx-accent, -9%) );
+    -fx-background-insets: 3 3 4 3;
+    /*-fx-background-radius: 0.583em; *//* 7 */
+    -fx-background-radius: 2;
+    -fx-padding: 0.75em;
+}
+.progress-bar:indeterminate > .bar {
+    -fx-background-color: linear-gradient(to left, transparent, -fx-accent);
+}
+.progress-bar > .track {
+      -fx-background-color:
+          -fx-shadow-highlight-color,
+          linear-gradient(to bottom, derive(-fx-text-box-border, -10%), -fx-text-box-border),
+          linear-gradient(to bottom,
+            derive(-fx-control-inner-background, -7%),
+            derive(-fx-control-inner-background, 0%),
+            derive(-fx-control-inner-background, -3%),
+            derive(-fx-control-inner-background, -9%)
+          );
+    -fx-background-insets: 0, 0 0 1 0, 1 1 2 1;
+    -fx-background-radius: 4, 3, 2; /* 10, 9, 8 */
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ProgressIndicator                                                           *
+ *                                                                             *
+ ******************************************************************************/
+
+.progress-indicator {
+    -fx-indeterminate-segment-count: 12;
+    -fx-spin-enabled: true;
+}
+.progress-indicator > .determinate-indicator > .indicator {
+    -fx-background-color: -fx-box-border,
+        radial-gradient(center 50% 50%, radius 50%, -fx-control-inner-background 70%, derive(-fx-control-inner-background, -9%) 100%),
+        -fx-control-inner-background;
+    -fx-background-insets: 0, 1, 5 2 1 2;
+    -fx-padding: 0.166667em; /* 2px */
+}
+.progress-indicator > .determinate-indicator > .progress {
+    -fx-background-color: -fx-accent;
+    -fx-padding: 0.083333em; /* 1px */
+}
+.progress-indicator > .determinate-indicator > .tick {
+    -fx-background-color: white;
+    -fx-background-insets: 0;
+    -fx-padding: 0.666667em; /* 8 */
+    -fx-shape: "M-0.25,6.083c0.843-0.758,4.583,4.833,5.75,4.833S14.5-1.5,15.917-0.917c1.292,0.532-8.75,17.083-10.5,17.083C3,16.167-1.083,6.833-0.25,6.083z";
+}
+.progress-indicator > .determinate-indicator > .percentage {
+    -fx-font-size: 0.916667em; /* 11pt - 1 less than the default font */
+    -fx-fill: -fx-text-background-color;
+}
+.progress-indicator:indeterminate > .spinner {
+    /** Applying to undo styling from .spinner, reported in RT-37965 */
+    -fx-background-color: transparent;
+    -fx-background-insets: 0;
+    -fx-background-radius: 0;
+}
+.progress-indicator:indeterminate .segment {
+    -fx-background-color: -fx-accent;
+}
+.progress-indicator:indeterminate .segment0 {
+    -fx-shape:"M41.98 14.74 a3.5,3.5 0 1,1 0,1 Z";
+}
+.progress-indicator:indeterminate .segment1 {
+    -fx-shape:"M33.75 6.51 a3.5,3.5 0 1,1 0,1 Z";
+}
+.progress-indicator:indeterminate .segment2 {
+    -fx-shape:"M22.49 3.5 a3.5,3.5 0 1,1 0,1 Z";
+}
+.progress-indicator:indeterminate .segment3 {
+    -fx-shape:"M11.24 6.51 a3.5,3.5 0 1,1 0,1 Z";
+}
+.progress-indicator:indeterminate .segment4 {
+    -fx-shape:"M3.01 14.74 a3.5,3.5 0 1,1 0,1 Z";
+}
+.progress-indicator:indeterminate .segment5 {
+    -fx-shape:"M0.0 26.0 a3.5,3.5 0 1,1 0,1 Z";
+}
+.progress-indicator:indeterminate .segment6 {
+    -fx-shape:"M3.01 37.25 a3.5,3.5 0 1,1 0,1 Z";
+}
+.progress-indicator:indeterminate .segment7 {
+    -fx-shape:"M11.25 45.48 a3.5,3.5 0 1,1 0,1 Z";
+}
+.progress-indicator:indeterminate .segment8 {
+    -fx-shape:"M22.5 48.5 a3.5,3.5 0 1,1 0,1 Z";
+}
+.progress-indicator:indeterminate .segment9 {
+    -fx-shape:"M33.75 45.48 a3.5,3.5 0 1,1 0,1 Z";
+}
+.progress-indicator:indeterminate .segment10 {
+    -fx-shape:"M41.98 37.25 a3.5,3.5 0 1,1 0,1 Z";
+}
+.progress-indicator:indeterminate .segment11 {
+     -fx-shape:"M45.0 26.0 a3.5,3.5 0 1,1 0,1 Z";
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Text COMMON                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+
+.text-input {
+    -fx-text-fill: -fx-text-inner-color;
+    -fx-highlight-fill: derive(-fx-control-inner-background,-20%);
+    -fx-highlight-text-fill: -fx-text-inner-color;
+    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);
+    -fx-background-color: linear-gradient(to bottom, derive(-fx-text-box-border, -10%), -fx-text-box-border),
+        linear-gradient(from 0px 0px to 0px 5px, derive(-fx-control-inner-background, -9%), -fx-control-inner-background);
+    -fx-background-insets: 0, 1;
+    -fx-background-radius: 3, 2;
+    -fx-cursor: text;
+    -fx-padding: 0.333333em 0.583em 0.333333em 0.583em; /* 4 7 4 7 */
+}
+.text-input:focused {
+    -fx-highlight-fill: -fx-accent;
+    -fx-highlight-text-fill: white;
+    -fx-background-color:
+        -fx-focus-color,
+        -fx-control-inner-background,
+        -fx-faint-focus-color,
+        linear-gradient(from 0px 0px to 0px 5px, derive(-fx-control-inner-background, -9%), -fx-control-inner-background);
+    -fx-background-insets: -0.2, 1, -1.4, 3;
+    -fx-background-radius: 3, 2, 4, 0;
+    -fx-prompt-text-fill: transparent;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * TextArea                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+
+.text-area {
+    -fx-padding: 0;
+    -fx-cursor: default;
+    -fx-background-color: linear-gradient(to bottom, derive(-fx-text-box-border, -10%), -fx-text-box-border),
+        derive(-fx-base,-1%);
+}
+.text-area > .scroll-pane {
+    -fx-background-color: null;
+}
+.text-area > .scroll-pane > .scroll-bar:horizontal {
+    -fx-background-radius: 0 0 2 2;
+}
+.text-area > .scroll-pane > .scroll-bar:vertical {
+    -fx-background-radius: 0 2 2 0;
+}
+.text-area > .scroll-pane > .corner {
+    -fx-background-radius: 0 0 2 0;
+}
+.text-area .content {
+    /*the is 1px less top and bottom than TextInput because of scrollpane border */
+    -fx-padding: 0.25em 0.583em 0.25em 0.583em; /* 3 7 3 7 */
+    -fx-cursor: text;
+    -fx-background-color:
+        linear-gradient(from 0px 0px to 0px 4px, derive(-fx-control-inner-background, -8%), -fx-control-inner-background);
+    -fx-background-radius: 2;
+}
+.text-area:focused .content {
+    -fx-background-color:
+        -fx-control-inner-background,
+        -fx-faint-focus-color,
+        linear-gradient(from 0px 0px to 0px 5px, derive(-fx-control-inner-background, -9%), -fx-control-inner-background);
+    -fx-background-insets: 0, 0, 2;
+    -fx-background-radius: 2, 1, 0;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * HTML Editor                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+
+.html-editor-foreground {
+    -fx-color-label-visible: false;
+    -fx-color-rect-x: 1;
+    -fx-color-rect-y: 1;
+    -fx-color-rect-width: 4;
+    -fx-color-rect-height: 3;
+    -fx-graphic: url("HTMLEditor-Text-Color.png");
+}
+.html-editor-background {
+    -fx-color-label-visible: false;
+    -fx-color-rect-x: 1;
+    -fx-color-rect-y: 1;
+    -fx-color-rect-width: 4;
+    -fx-color-rect-height: 3;
+    -fx-graphic: url("HTMLEditor-Background-Color.png");
+}
+.color-picker.html-editor-foreground > .color-picker-label > .picker-color > .picker-color-rect,
+.color-picker.html-editor-background > .color-picker-label > .picker-color > .picker-color-rect {
+    -fx-stroke: null;
+}
+.html-editor .button ,
+.html-editor .toggle-button {
+    -fx-padding: 0.333333em 0.416667em 0.333333em 0.416667em; /* 4 5 4 5 */
+}
+.html-editor-cut {
+    -fx-graphic: url("HTMLEditor-Cut.png");
+}
+.html-editor-copy {
+    -fx-graphic: url("HTMLEditor-Copy.png");
+}
+.html-editor-paste {
+    -fx-graphic: url("HTMLEditor-Paste.png");
+}
+.html-editor-align-left {
+    -fx-graphic: url("HTMLEditor-Left.png");
+}
+.html-editor-align-center {
+    -fx-graphic: url("HTMLEditor-Center.png");
+}
+.html-editor-align-right {
+    -fx-graphic: url("HTMLEditor-Right.png");
+}
+.html-editor-align-justify {
+    -fx-graphic: url("HTMLEditor-Justify.png");
+}
+.html-editor-outdent {
+    -fx-graphic: url("HTMLEditor-Outdent.png");
+}
+.html-editor-outdent:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Outdent-rtl.png");
+}
+.html-editor-indent {
+    -fx-graphic: url("HTMLEditor-Indent.png");
+}
+.html-editor-indent:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Indent-rtl.png");
+}
+.html-editor-bullets {
+    -fx-graphic: url("HTMLEditor-Bullets.png");
+}
+.html-editor-bullets:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Bullets-rtl.png");
+}
+.html-editor-numbers {
+    -fx-graphic: url("HTMLEditor-Numbered.png");
+}
+.html-editor-numbers:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Numbered-rtl.png");
+}
+.html-editor-bold {
+    -fx-graphic: url("HTMLEditor-Bold.png");
+}
+.html-editor-italic {
+    -fx-graphic: url("HTMLEditor-Italic.png");
+}
+.html-editor-underline {
+    -fx-graphic: url("HTMLEditor-Underline.png");
+}
+.html-editor-strike {
+    -fx-graphic: url("HTMLEditor-Strikethrough.png");
+}
+.html-editor-hr {
+    -fx-graphic: url("HTMLEditor-Break.png");
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * PopupMenu                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.context-menu {
+    -fx-background-color:
+        linear-gradient(to bottom,
+            derive(-fx-color,-17%),
+            derive(-fx-color,-30%)
+        ),
+        -fx-control-inner-background;
+    -fx-background-insets: 0, 1;
+    -fx-padding: 0.333333em 0.083333em 0.333333em 0.083333em; /* 4 1 8 1 */
+    -fx-effect: dropshadow( gaussian , rgba(0,0,0,0.2) , 12, 0.0 , 0 , 8 );
+}
+.context-menu .separator:horizontal .line {
+    -fx-border-color: -fx-box-border transparent transparent transparent;
+    -fx-border-insets: 1 0 0 0;
+}
+.context-menu > .scroll-arrow {
+    -fx-padding: 0.416667em 0.416667em 0.416667em 0.416667em; /* 5 */
+    -fx-background-color: transparent;
+}
+.context-menu > .scroll-arrow:hover {
+    -fx-background: -fx-selection-bar;
+    -fx-background-color: -fx-background;
+    -fx-text-fill: -fx-text-background-color;
+}
+
+
+/*******************************************************************************
+ *                                                                             *
+ * Menu                                                                        *
+ *                                                                             *
+ ******************************************************************************/
+
+.menu {
+    -fx-background-color: transparent;
+    -fx-padding: 0.333333em 0.666667em 0.333333em 0.666667em; /* 4 8 4 8 */
+}
+.menu > .right-container > .arrow {
+    -fx-padding: 0.458em 0.167em 0.458em 0.167em; /* 4.5 2 4.5 2 */
+    -fx-background-color: -fx-mark-color;
+    -fx-shape: "M0,-4L4,0L0,4Z";
+    -fx-scale-shape: false;
+}
+.menu:focused > .right-container > .arrow {
+    -fx-background-color: -fx-focused-mark-color;
+}
+.menu-up-arrow {
+    -fx-padding: 0.666667em 0.416667em 0.0em 0.416667em;  /* 8 5 0 5 */
+    -fx-background-color: derive(-fx-color,-2%);
+    -fx-shape: "M0 1 L1 1 L.5 0 Z";
+    -fx-effect: innershadow( two-pass-box , rgba(0,0,0,0.6) , 4, 0.0 , 0 , 1 );
+}
+.menu-down-arrow {
+    -fx-background-color: derive(-fx-color,-2%);
+    -fx-padding: 0.666667em 0.416667em 0.0em 0.416667em;  /* 8 5 0 5 */
+    -fx-shape: "M0 0 L1 0 L.5 1 Z";
+    -fx-effect: innershadow( two-pass-box , rgba(0,0,0,0.6) , 4, 0.0 , 0 , 1 );
+}
+
+
+/*******************************************************************************
+ *                                                                             *
+ * MenuBar                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+
+.menu-bar {
+    -fx-padding: 0.0em 0.666667em 0.0em 0.666667em; /* 0 8 0 8 */
+    -fx-spacing: 0.166667em; /* 2 */
+    -fx-background-color:
+        linear-gradient(to bottom, derive(-fx-base,75%) 0%, -fx-outer-border 90%),
+        linear-gradient(to bottom, derive(-fx-base,46.9%) 2%, derive(-fx-base,-2.1%) 95%);
+    -fx-background-insets: 0 0 0 0, 1 0 1 0;
+    -fx-background-radius: 0, 0 ;
+}
+/* Show nothing for background of normal menu button in a menu bar */
+.menu-bar > .container > .menu-button {
+    -fx-background-radius: 0;
+    -fx-background-color: transparent;
+    -fx-background-insets: 0;
+}
+/* Change padding of menu buttons when in menu bar */
+.menu-bar > .container > .menu-button > .label {
+    -fx-padding: 0;
+}
+/* Hide the down arrow for a menu placed in a menubar */
+.menu-bar > .container > .menu-button > .arrow-button > .arrow {
+    -fx-padding: 0.167em 0 0.250em 0; /* 2 0 3 0 */
+    -fx-background-color: transparent;
+    -fx-shape: null;
+}
+.menu-bar > .container > .menu > .arrow-button {
+    -fx-padding: 0.500em 0 0.500em 0; /* 6 0 6 0 */
+}
+.menu-bar > .container > .menu-button:hover,
+.menu-bar > .container > .menu-button:focused,
+.menu-bar > .container > .menu-button:showing {
+    -fx-background: -fx-selection-bar;
+    -fx-background-color: -fx-background;
+}
+.menu-bar > .container > .menu-button:hover > .label,
+.menu-bar > .container > .menu-button:focused > .label,
+.menu-bar > .container > .menu-button:showing  > .label {
+    -fx-text-fill: -fx-text-background-color;
+}
+
+
+/*******************************************************************************
+ *                                                                             *
+ * MenuItem                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+
+.menu-item {
+    -fx-background-color: transparent;
+    -fx-padding: 0.333333em 0.41777em 0.333333em 0.41777em;  /* 4 5 4 5 */
+}
+.menu-item > .left-container {
+    -fx-padding: 0.458em 0.791em 0.458em 0.458em;
+}
+.menu-item > .graphic-container {
+    -fx-padding: 0em 0.333em 0em 0em;
+}
+.menu-item >.label {
+    -fx-padding: 0em 0.5em 0em 0em;
+    -fx-text-fill: -fx-text-base-color;
+}
+.menu-item:focused {
+     -fx-background: -fx-selection-bar;
+     -fx-background-color: -fx-background;
+     -fx-text-fill:  -fx-text-background-color;
+}
+.menu-item:focused > .label {
+    -fx-text-fill: -fx-focused-text-base-color;
+}
+.menu-item > .right-container {
+    -fx-padding: 0em 0em 0em 0.5em;
+}
+.radio-menu-item:checked > .left-container > .radio {
+    -fx-background-color: -fx-mark-color;
+    -fx-shape: "M0,5H2L4,8L8,0H10L5,10H3Z";
+    -fx-scale-shape: false;
+}
+.radio-menu-item:focused:checked > .left-container > .radio {
+    -fx-background-color: -fx-focused-mark-color;
+}
+.check-menu-item:checked > .left-container > .check {
+    -fx-background-color: -fx-mark-color;
+    -fx-shape: "M0,5H2L4,8L8,0H10L5,10H3Z";
+    -fx-scale-shape: false;
+}
+.check-menu-item:focused:checked > .left-container > .check {
+    -fx-background-color: -fx-focused-mark-color;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ChoiceBox                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+/*.choice-box > .open-button > .arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.166667em 0.333333em 0.166667em 0.333333em;  2 3.5 2 3.5
+    -fx-shape: "M 0 0 h 7 l -3.5 4 z";
+}*/
+.choice-box > .context-menu {
+    -fx-background-radius: 6, 5, 4;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * TabPane                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+
+.tab-pane {
+    -fx-tab-min-height: 1.8333em; /* 22 */
+    -fx-tab-max-height: 1.8333em; /* 22 */
+}
+.tab-pane > .tab-header-area > .headers-region > .tab > .tab-container > .tab-label {
+    -fx-alignment: CENTER;
+    -fx-text-fill: -fx-text-base-color;
+}
+.tab-pane > .tab-header-area > .headers-region > .tab {
+    -fx-background-insets: 0 1 1 0, 1 2 1 1, 2 3 1 2;
+    -fx-background-radius: 3 3 0 0, 2 2 0 0, 1 1 0 0;
+    -fx-padding: 0.083333em 0.5em 0.0769em 0.5em; /* 1 6 0.99 6 */
+}
+.tab-pane > .tab-header-area > .headers-region > .tab:top {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+.tab-pane > .tab-header-area > .headers-region > .tab:right {
+    -fx-background-color: -fx-outer-border, -fx-inner-border-bottomup, -fx-body-color-bottomup;
+}
+.tab-pane > .tab-header-area > .headers-region > .tab:bottom {
+    -fx-background-color: -fx-outer-border, -fx-inner-border-bottomup, -fx-body-color-bottomup;
+}
+.tab-pane > .tab-header-area > .headers-region > .tab:left {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+.tab-pane > .tab-header-area > .headers-region > .tab:hover {
+    -fx-color: -fx-hover-base;
+}
+.tab-pane > .tab-header-area > .headers-region > .tab:selected {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-background;
+    -fx-background-insets: 0 1 1 0, 1 2 0 1, 2 3 0 2;
+}
+.tab-pane:focused > .tab-header-area > .headers-region > .tab:selected .focus-indicator {
+    -fx-border-width: 1, 1;
+    -fx-border-color: -fx-focus-color, -fx-faint-focus-color;
+    -fx-border-insets: -4 -4 -6 -5, -2 -2 -5 -3;
+    -fx-border-radius: 2, 1; /* looks sharper if outer border has a tighter radius (2 instead of 3) */
+}
+.tab-pane:focused > .tab-header-area > .headers-region > .tab:bottom:selected .focus-indicator {
+    -fx-border-insets: -6 -5 -4 -4, -5 -3 -2 -2;
+}
+.tab-pane > .tab-header-area > .headers-region > .tab:disabled:hover {
+    -fx-color: -fx-base;
+}
+.tab-pane > .tab-header-area > .tab-header-background {
+    /* TODO should not be using text-box-border I think? */
+    -fx-background-color:
+        -fx-outer-border,
+        -fx-text-box-border,
+        linear-gradient(from 0px 0px to 0px 5px, -fx-text-box-border, derive(-fx-text-box-border, 30%));
+}
+.tab-pane:top > .tab-header-area > .tab-header-background {
+    -fx-background-insets: 0, 0 0 1 0, 1;
+}
+.tab-pane:bottom > .tab-header-area > .tab-header-background {
+    -fx-background-insets: 0, 1 0 0 0, 1;
+}
+.tab-pane:left > .tab-header-area > .tab-header-background {
+    -fx-background-insets: 0, 0 1 0 0, 1;
+}
+.tab-pane:right > .tab-header-area > .tab-header-background {
+    -fx-background-insets: 0, 0 0 0 1, 1;
+}
+.tab-pane:top > .tab-header-area {
+    /*-fx-padding: 0.416667em 0.166667em 0.0em 0.416667em; *//* 5 2 0 5 */
+    -fx-padding: 0.416667em 5 0.0em 0.416667em; /* 5 2 0 5 */
+}
+.tab-pane:bottom > .tab-header-area {
+    -fx-padding: 0 0.166667em 0.416667em 0.416667em; /* 0 2 5 5 */
+}
+.tab-pane:left > .tab-header-area {
+    -fx-padding: 0.416667em 0.0em 0.166667em 0.416667em; /* 5 0 2 5 */
+}
+.tab-pane:right > .tab-header-area {
+    -fx-padding: 0.416667em 0.416667em 0.166667em 0.0em; /* 5 5 2 0 */
+}
+/* TODO: scaling the shape seems to make it way too large */
+.tab-pane > .tab-header-area > .headers-region > .tab > .tab-container > .tab-close-button {
+    -fx-background-color: -fx-mark-color;
+    -fx-shape: "M 0,0 H1 L 4,3 7,0 H8 V1 L 5,4 8,7 V8 H7 L 4,5 1,8 H0 V7 L 3,4 0,1 Z";
+    -fx-scale-shape: false;
+    -fx-effect: dropshadow(two-pass-box , rgba(255, 255, 255, 0.4), 1, 0.0 , 0, 1);
+}
+.tab-pane > .tab-header-area > .headers-region > .tab > .tab-container > .tab-close-button:hover {
+    -fx-background-color: derive(-fx-mark-color, -30%);
+}
+/* CONTROL BUTTONS */
+.tab-pane > .tab-header-area > .control-buttons-tab > .container {
+    -fx-padding: 3 0 0 0;
+}
+.tab-pane > .tab-header-area > .control-buttons-tab > .container > .tab-down-button {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: -1 0 5 0, 0 1 6 1, 1 2 7 2;
+    -fx-padding: 4 4 9 4;
+    -fx-background-radius: 10;
+}
+.tab-pane:bottom > .tab-header-area > .control-buttons-tab > .container > .tab-down-button {
+    -fx-padding: -5 4 4 4; /* TODO convert to ems */
+}
+/* FLOATING TABS CUSTOMISATION */
+.tab-pane.floating > .tab-header-area > .tab-header-background {
+    -fx-background-color: null;
+}
+.tab-pane.floating > .tab-header-area {
+    -fx-background-color: null;
+}
+.tab-pane.floating > .tab-content-area {
+    -fx-background-color: -fx-outer-border, -fx-background;
+    -fx-background-insets: 0, 1;
+    -fx-background-radius: 2, 0;
+    -fx-padding: 2;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ComboBox                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+
+/* Customise the ListCell that appears in the ComboBox button itself */
+.combo-box > .list-cell {
+    -fx-background: transparent;
+    -fx-background-color: transparent;
+    -fx-text-fill: -fx-text-base-color;
+    -fx-padding: 0.333333em 0.666667em 0.333333em 0.666667em; /* 4 8 4 8 */
+}
+.combo-box-base > .arrow-button {
+    -fx-background-radius: 0 3 3 0, 0 2 2 0, 0 1 1 0;
+    -fx-padding: 0.5em 0.667em 0.5em 0.833333em; /* 6 8 6 10 */
+    -fx-background-color: transparent;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Editable ComboBox                                                           *
+ *                                                                             *
+ * The editable ComboBox TextBox inherits its properties from the TextBox      *
+ * Control. Only the properties with values that are different from the        *
+ * TextBox are specified here.                                                 *
+ *                                                                             *
+ ******************************************************************************/
+
+.combo-box-base:editable > .arrow-button,
+.date-picker > .arrow-button {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 1 1 1 0, 1, 2;
+    -fx-background-radius: 0 3 3 0, 0 2 2 0, 0 1 1 0;
+}
+.combo-box-base:editable > .text-field,
+.date-picker > .text-field {
+    -fx-background-color:
+        linear-gradient(to bottom, derive(-fx-text-box-border, -10%), -fx-text-box-border),
+        linear-gradient(from 0px 0px to 0px 5px, derive(-fx-control-inner-background, -9%), -fx-control-inner-background);
+    -fx-background-insets: 1 0 1 1;
+    -fx-background-radius: 2 0 0 2;
+}
+.combo-box-base:editable:focused,
+.date-picker:focused {
+    -fx-background-color: -fx-focus-color;
+    -fx-background-insets: -0.2;
+    -fx-background-radius: 3;
+}
+.combo-box-base:editable:focused > .text-field,
+.combo-box-base:editable > .text-field:focused,
+.date-picker:focused > .text-field,
+.date-picker > .text-field:focused {
+    -fx-background-color:
+        -fx-control-inner-background,
+        -fx-faint-focus-color,
+        linear-gradient(from 0px 0px to 0px 5px, derive(-fx-control-inner-background, -9%), -fx-control-inner-background);
+    -fx-background-insets: 1 0 1 1, 1 0 1 1, 3 2 3 3;
+    -fx-background-radius: 2 0 0 2, 1 0 0 1, 0;
+}
+.combo-box-base:editable:focused > .arrow-button,
+.date-picker:focused > .arrow-button {
+    -fx-background-color: -fx-inner-border, -fx-body-color, -fx-faint-focus-color, -fx-body-color;
+    -fx-background-insets: 1, 2, 1, 2.6;
+    -fx-background-radius: 0 2 2 0, 0 1 1 0, 0 1 1 0, 0 1 1 0;
+}
+
+/* -------------- STYLES FOR THE DEFAULT LISTVIEW-BASED COMBOBOX ------------- */
+
+.combo-box-popup > .list-view {
+    -fx-background-color:
+        linear-gradient(to bottom,
+            derive(-fx-color,-17%),
+            derive(-fx-color,-30%)
+        ),
+        -fx-control-inner-background;
+    -fx-background-insets: 0, 1;
+    -fx-effect: dropshadow( gaussian , rgba(0,0,0,0.2) , 12, 0.0 , 0 , 8 );
+}
+.combo-box-popup > .list-view > .virtual-flow > .clipped-container > .sheet > .list-cell {
+    -fx-padding: 4 0 4 5;
+    /* No alternate highlighting */
+    -fx-background: -fx-control-inner-background;
+}
+.combo-box-popup > .list-view > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:hover {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-selection-bar;
+}
+.combo-box-popup  > .list-view > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:selected,
+.combo-box-popup  > .list-view > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:selected:hover {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-background, -fx-cell-focus-inner-border, -fx-background;
+    -fx-background-insets: 0, 1, 2;
+}
+.combo-box-popup > .list-view > .placeholder > .label {
+    -fx-text-fill: derive(-fx-control-inner-background,-30%);
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * TitledPane                                                                  *
+ *                                                                             *
+ ******************************************************************************/
+
+.titled-pane {
+    -fx-text-fill: -fx-text-base-color;
+}
+.titled-pane:focused {
+    -fx-color: -fx-base;
+}
+.titled-pane > .title {
+    -fx-background-color:
+        linear-gradient(to bottom,
+            derive(-fx-color,-15%) 95%,
+            derive(-fx-color,-25%) 100%
+        ),
+        -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 3 3 0 0, 2 2 0 0, 1 1 0 0;
+    -fx-padding: 0.3333em 0.75em 0.3333em 0.75em; /* 4 9 4 9 */
+}
+/* alternative focus using the ring around the entire title area */
+/*.titled-pane:focused > .title {
+    -fx-background-color: -fx-faint-focus-color, -fx-focus-color, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 0.7, 2, 3;
+}*/
+/* focus purely on the arrow */
+.titled-pane:focused > .title > .arrow-button > .arrow {
+    -fx-background-color: -fx-focus-color, -fx-mark-color;
+    -fx-background-insets: -1, 0;
+    -fx-effect: dropshadow(two-pass-box , -fx-focus-color, 5, 0.2 , 0, 0);
+}
+.titled-pane > .title > .arrow-button {
+    -fx-background-color: null;
+    -fx-background-insets: 0;
+    -fx-background-radius: 0;
+    -fx-padding: 0.0em 0.583em 0.0em 0.0em; /* 0 7 0 0 */
+}
+.titled-pane > .title > .arrow-button > .arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.25em 0.3125em 0.25em 0.3125em; /* 3 3.75 3 3.75 */
+    -fx-shape: "M 0 0 h 7 l -3.5 4 z";
+}
+.titled-pane > .title:hover {
+    -fx-color: -fx-hover-base;
+}
+/* alternative content using a border and a grad to transparent background - why should TitledPane content have a colour? */
+.titled-pane > *.content {
+    -fx-border-color: -fx-box-border;
+    -fx-border-insets: -1 0 0 0;
+    -fx-background-color: linear-gradient(from 0px 0px to 0px 5px, derive(-fx-background, -6%), -fx-background);
+}
+
+
+
+/*******************************************************************************
+ *                                                                             *
+ * Accordion                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.accordion > .titled-pane > .title {
+    -fx-background-color:
+        linear-gradient(to bottom,
+        derive(-fx-color,-15%) 95%,
+        derive(-fx-color,-25%) 100%
+        ),
+        -fx-inner-border,
+        -fx-body-color;
+    -fx-background-insets: -1 0 0 0, 0 1 1 1, 1 2 2 2;
+    -fx-background-radius: 0, 0, 0;
+}
+.accordion > .first-titled-pane > .title {
+    -fx-background-insets: 0, 1, 2;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * SplitPane                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.split-pane > .split-pane-divider {
+    -fx-padding: 0 0.25em 0 0.25em; /* 0 3 0 3 */
+}
+/* horizontal the two nodes are placed to the left/right of each other. */
+.split-pane:horizontal > .split-pane-divider {
+   -fx-background-color: -fx-box-border, -fx-inner-border-horizontal;
+   -fx-background-insets: 0, 0 1 0 1;
+}
+/* vertical the two nodes are placed on top of each other. */
+.split-pane:vertical > .split-pane-divider {
+   -fx-background-color: -fx-box-border, -fx-inner-border;
+   -fx-background-insets: 0, 1 0 1 0;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ColorPicker                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+
+.color-picker > .arrow-button {
+    -fx-background-color: null;
+    -fx-padding: 0.5em 0.667em 0.5em 0; /*  6 8 6 0 */
+}
+.color-picker.split-button > .arrow-button  {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 1 1 1 0, 1, 2;
+    -fx-background-radius: 0 3 3 0, 0 2 2 0, 0 1 1 0;
+}
+.color-picker.split-button:focused > .arrow-button {
+    /*-fx-background-color: -fx-focus-color, -fx-inner-border, -fx-body-color !important;*/
+    /*-fx-background-insets: 0, 1, 2;*/
+    -fx-background-color: -fx-focus-color, -fx-inner-border, -fx-body-color, -fx-faint-focus-color, -fx-body-color;
+    -fx-background-insets: 1 1 1 0, 1, 2, 1, 2.6;
+    -fx-background-radius: 0 3 3 0, 0 2 2 0, 0 1 1 0, 0 1 1 0, 0 1 1 0;
+}
+.color-picker.split-button > .color-picker-label,
+.color-picker.split-button:focused > .color-picker-label{
+    -fx-background-color: null;
+}
+.color-picker.split-button > .arrow-button {
+    /*-fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color !important;*/
+    -fx-padding: 0.5em 0.667em 0.5em 0.667em; /* 6 8 6 8 */
+}
+.color-picker > .color-picker-label > .picker-color > .picker-color-rect {
+    -fx-stroke: -fx-box-border;
+}
+
+.color-palette {
+    -fx-spacing: 0.833333em; /* 10px */
+    -fx-background-color:
+        linear-gradient(to bottom,
+            derive(-fx-color,-17%),
+            derive(-fx-color,-30%)
+        ),
+        linear-gradient(to bottom,
+            derive(-fx-background,10%) 0%,
+            derive(-fx-background,-5%) 12%,
+            derive(-fx-background,15%) 88%,
+            derive(-fx-background,-10%) 100%);
+    -fx-background-insets: 0, 1;
+    -fx-background-radius: 6, 5;
+    -fx-padding: 1em; /* 12 */
+    -fx-effect: dropshadow( gaussian , rgba(0,0,0,0.2) , 12, 0.0 , 0 , 8 );
+}
+.color-palette > .color-picker-grid {
+    -fx-padding: 0.5px;
+    -fx-snap-to-pixel: false;
+}
+.color-palette > .color-picker-grid > .color-square {
+    -fx-background-color: transparent;
+    -fx-padding: 0.5px;
+}
+/* the color over which the user is hovering */
+.color-palette-region > .color-square.hover-square {
+    -fx-background-color: -fx-faint-focus-color, white;
+    -fx-background-insets: -3,-1;
+    -fx-background-radius: 5,0;
+    -fx-scale-x: 1.5;
+    -fx-scale-y: 1.5;
+    -fx-border-color: -fx-focus-color;
+    -fx-border-insets: -1, -1;
+}
+/* ------- CUSTOM COLOR DIALOG ------- */
+.custom-color-dialog > .color-rect-pane {
+    -fx-spacing: 0.75em;
+    -fx-pref-height: 16.666667em;
+    -fx-alignment: top-left;
+    -fx-fill-height: true;
+}
+
+.custom-color-dialog .color-rect-pane .color-rect {
+    -fx-min-width: 16.666667em;
+    -fx-min-height: 16.666667em;
+}
+
+.custom-color-dialog .color-rect-pane .color-rect-border {
+    -fx-border-color: derive(-fx-base, -20%);
+}
+
+.custom-color-dialog > .color-rect-pane #color-rect-indicator {
+    -fx-background-color: null;
+    -fx-border-color: white;
+    -fx-border-radius: 0.4166667em;
+    -fx-translate-x: -0.4166667em;
+    -fx-translate-y: -0.4166667em;
+    -fx-pref-width: 0.833333em;
+    -fx-pref-height: 0.833333em;
+    -fx-effect: dropshadow(three-pass-box, black, 2, 0.0, 0, 1);
+}
+
+.custom-color-dialog > .color-rect-pane > .color-bar {
+    -fx-min-width: 1.666667em;
+    -fx-min-height: 16.666667em;
+    -fx-max-width: 1.666667em;
+    -fx-border-color: derive(-fx-base, -20%);
+}
+
+.custom-color-dialog > .color-rect-pane > .color-bar > #color-bar-indicator {
+    -fx-border-radius: 0.333333em;
+    -fx-border-color: white;
+    -fx-effect: dropshadow(three-pass-box, black, 2, 0.0, 0, 1);
+    -fx-pref-width: 2em;
+    -fx-pref-height: 0.833333em;
+    -fx-translate-x: -0.1666667em;
+    -fx-translate-y: -0.4166667em;
+}
+
+.custom-color-dialog  {
+    -fx-background-color: -fx-background;
+    -fx-padding: 1.25em;
+    -fx-spacing: 1.25em;
+}
+.custom-color-dialog .controls-pane .current-new-color-grid #current-new-color-border {
+    -fx-border-color: derive(-fx-base, -20%);
+    -fx-border-width: 2px;
+}
+
+.custom-color-dialog .controls-pane .current-new-color-grid .color-rect {
+    -fx-min-width: 10.666667em;
+    -fx-min-height: 1.75em;
+    -fx-pref-width: 10.666667em;
+    -fx-pref-height: 1.75em;
+}
+
+.custom-color-dialog .transparent-pattern {
+    -fx-background-image: url("pattern-transparent.png");
+    -fx-background-repeat: repeat;
+    -fx-background-size: auto;
+}
+
+.custom-color-dialog .controls-pane #spacer1 {
+    -fx-min-height: 0.1666667em;
+    -fx-max-height: 0.1666667em;
+    -fx-pref-height: 0.1666667em;
+}
+
+.custom-color-dialog .controls-pane #spacer2 {
+    -fx-min-height: 1em;
+    -fx-max-height: 1em;
+    -fx-pref-height: 1em;
+}
+
+.custom-color-dialog .controls-pane #settings-pane {
+    -fx-hgap: 0.4166667em;
+    -fx-vgap: 0.3333333em;
+}
+
+.custom-color-dialog .controls-pane #settings-pane .settings-label {
+    -fx-min-width: 5.75em;
+}
+
+.custom-color-dialog .controls-pane #settings-pane .settings-unit {
+    -fx-max-width: 1.5em;
+    -fx-min-width: 1.5em;
+    -fx-pref-width: 1.5em;
+}
+
+.custom-color-dialog .controls-pane #settings-pane .slider {
+    -fx-pref-width: 8.25em;
+}
+
+.custom-color-dialog .controls-pane .color-input-field {
+    -fx-pref-column-count: 3;
+    -fx-max-width: 3.25em;
+    -fx-min-width: 3.25em;
+    -fx-pref-width: 3.25em;
+}
+
+.custom-color-dialog .controls-pane .web-field {
+    -fx-pref-column-count: 6;
+    -fx-pref-width: 8.25em;
+}
+
+.custom-color-dialog .controls-pane #spacer-side {
+    -fx-min-width: 0.5em;
+    -fx-pref-width: 0.5em;
+}
+
+.custom-color-dialog .controls-pane #spacer-bottom {
+    -fx-pref-height: 0.833333em;
+    -fx-min-height: 0.833333em;
+}
+
+.custom-color-dialog .controls-pane .customcolor-controls-background {
+    -fx-background-color: -fx-text-box-border, -fx-control-inner-background;
+    -fx-background-insets:
+        0.8333333em 0 0.4166667em 0,
+        1em 0.166667em 0.5833333em 0.166667em;
+    -fx-background-radius: 0.3333333em, 0.166667em;
+}
+
+.custom-color-dialog .controls-pane .current-new-color-grid .label {
+    -fx-padding: 0 0 0 0.4166667em;
+}
+
+.custom-color-dialog .controls-pane #buttons-hbox {
+    -fx-spacing: 0.333333em;
+    -fx-padding: 1em 0 0 0;
+    -fx-alignment: bottom-right;
+}
+
+/* The fix for RT-37494 forces the web color text's major direction to
+ * LTR. The following keeps the text right-aligned when in RTL mode. */
+.custom-color-dialog .webcolor-field:dir(rtl) > .text-field:dir(ltr) {
+    -fx-alignment: baseline-right;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Pagination                                                                  *
+ *                                                                             *
+ ******************************************************************************/
+
+.pagination {
+    -fx-padding: 0;
+    -fx-arrows-visible: true;
+    -fx-tooltip-visible: true;
+    -fx-page-information-visible: true;
+    -fx-page-information-alignment: bottom;
+    -fx-arrow-button-gap: 0;
+}
+.pagination > .page {
+    -fx-background-color: transparent;
+}
+.pagination > .pagination-control {
+    -fx-background-color: transparent;
+    -fx-font-size: 0.82em;
+}
+.pagination > .pagination-control > .control-box {
+    -fx-padding: 5px 0 0 0;
+    -fx-spacing: 2;
+    -fx-alignment: center;
+}
+.pagination > .pagination-control > .control-box > .left-arrow-button {
+    -fx-background-radius: 3 0 0 3, 3 0 0 3, 2 0 0 2, 1 0 0 1;
+    -fx-background-insets: 0 0 -1 5, 0 0 0 5, 1 1 1 6, 2 2 2 7;
+    -fx-padding: 0em 0.417em 0em 0.833em; /* 0 5 0 10 */
+}
+.pagination > .pagination-control > .control-box > .right-arrow-button {
+    -fx-background-radius: 0 3 3 0, 0 3 3 0, 0 2 2 0, 0 1 1 0;
+    -fx-background-insets: 0 5 -1 0, 0 5 0 0, 1 6 1 1, 2 7 2 2;
+    -fx-padding: 0em 0.75em 0em 0.417em; /* 0 9 0 5 */
+}
+.pagination > .pagination-control .left-arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.375em 0.291em 0.375em 0.291em;
+    -fx-shape: "M 0 0 L -13 7 L 0 13 z";
+    -fx-scale-shape: true;
+}
+.pagination > .pagination-control .right-arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.375em 0.291em 0.375em 0.291em;
+    -fx-shape: "M 0 0 L 13 7 L 0 13 z";
+    -fx-scale-shape: true;
+}
+.pagination > .pagination-control > .control-box > .bullet-button {
+   -fx-background-radius: 0, 4em, 4em, 4em, 4em;
+   -fx-padding: 0.333em;
+   -fx-background-color: transparent, -fx-outer-border, -fx-inner-border, -fx-body-color;
+   -fx-background-insets: 0, 5,  6,  7;
+}
+.pagination > .pagination-control > .control-box > .bullet-button:selected {
+    -fx-base: -fx-selection-bar-non-focused;
+}
+.pagination:focused > .pagination-control > .control-box > .bullet-button:selected {
+    -fx-base: -fx-accent;
+}
+.pagination.bullet > .pagination-control > .control-box {
+    -fx-spacing: 0;
+    -fx-alignment: center;
+}
+.pagination.bullet > .pagination-control > .control-box > .left-arrow-button {
+    -fx-background-radius: 4em;
+    -fx-background-insets: 0, 1, 2;
+    -fx-padding: 0em 0.25em 0em 0.083em; /* 0 3 0 1 */
+}
+.pagination.bullet > .pagination-control > .control-box > .right-arrow-button {
+    -fx-background-radius: 4em;
+    -fx-background-insets: 0, 1, 2;
+    -fx-padding: 0em 0.083em 0em 0.25em; /* 0 1 0 3 */
+}
+.pagination > .pagination-control > .control-box > .number-button {
+    -fx-background-radius: 0;
+    -fx-padding: 0.166667em 0.333em 0.25em 0.333em;
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+.pagination > .pagination-control > .control-box > .number-button:selected {
+    -fx-base: -fx-selection-bar-non-focused;
+}
+.pagination:focused > .pagination-control > .control-box > .number-button:selected {
+    -fx-base: -fx-accent;
+}
+.pagination > .pagination-control > .page-information {
+    -fx-padding: 0.416em 0 0 0;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Customised CSS for controls placed directly within cells                    *
+ *                                                                             *
+ ******************************************************************************/
+
+.cell > .choice-box {
+    -fx-background-color: transparent;
+    -fx-background-insets: 0;
+    -fx-background-radius: 0;
+    -fx-padding: 0.0em 0.5em 0.0em 0.0em; /* 0 6 0 0 */
+    -fx-alignment: CENTER_LEFT;
+    -fx-content-display: LEFT;
+}
+.cell > .choice-box > .label {
+    -fx-padding: 0em 0.333333em 0.0em 0.333333; /* 2 4 3 6 */
+}
+.cell:focused:selected > .choice-box > .label {
+    -fx-text-fill: white;
+}
+.cell:focused:selected > .choice-box > .open-button > .arrow {
+    -fx-background-color: -fx-mark-highlight-color, white;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * List, Tree, Table COMMON                                                    *
+ *                                                                             *
+ ******************************************************************************/
+
+/* remove double borders from scrollbars */
+.list-view > .virtual-flow > .scroll-bar:vertical,
+.tree-view > .virtual-flow > .scroll-bar:vertical,
+.table-view > .virtual-flow > .scroll-bar:vertical,
+.tree-table-view > .virtual-flow > .scroll-bar:vertical {
+    -fx-background-insets: 0, 0 0 0 1;
+    -fx-padding: -1 -1 -1 0;
+}
+.list-view > .virtual-flow > .scroll-bar:horizontal,
+.tree-view > .virtual-flow > .scroll-bar:horizontal,
+.table-view > .virtual-flow > .scroll-bar:horizontal,
+.tree-table-view > .virtual-flow > .scroll-bar:horizontal {
+    -fx-background-insets: 0, 1 0 0 0;
+    -fx-padding: 0 -1 -1 -1;
+}
+.list-view > .virtual-flow > .corner,
+.tree-view > .virtual-flow > .corner,
+.table-view > .virtual-flow > .corner,
+.tree-table-view > .virtual-flow > .corner {
+    -fx-background-color: derive(-fx-base,-1%);
+}
+/* standard cell */
+.list-cell,
+.tree-cell {
+    -fx-background: -fx-control-inner-background;
+    -fx-background-color: -fx-background;
+    -fx-text-fill: -fx-text-background-color;
+}
+/* Selected rows */
+.list-view:focused > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:selected,
+.tree-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-cell:filled:selected,
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:selected,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:selected,
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell .table-cell:selected,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell .tree-table-cell:selected {
+    -fx-background: -fx-selection-bar;
+    -fx-table-cell-border-color: derive(-fx-selection-bar, 20%);
+}
+/* Selected when control is not focused */
+.list-cell:filled:selected,
+.tree-cell:filled:selected,
+.table-row-cell:filled:selected,
+.tree-table-row-cell:filled:selected,
+.table-row-cell:filled > .table-cell:selected,
+.tree-table-row-cell:filled > .tree-table-cell:selected {
+    -fx-background: -fx-selection-bar-non-focused;
+    -fx-table-cell-border-color: derive(-fx-selection-bar-non-focused, 20%);
+}
+/* focused cell (keyboard navigation) */
+.list-view:focused > .virtual-flow > .clipped-container > .sheet > .list-cell:focused,
+.tree-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-cell:focused,
+.table-view:focused:row-selection > .virtual-flow > .clipped-container > .sheet > .table-row-cell:focused,
+.tree-table-view:focused:row-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:focused,
+.table-view:focused:cell-selection > .virtual-flow > .clipped-container > .sheet > .table-row-cell > .table-cell:focused,
+.tree-table-view:focused:cell-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell > .tree-table-cell:focused {
+    -fx-background-color: -fx-background, -fx-cell-focus-inner-border, -fx-background;
+    -fx-background-insets: 0, 1, 2;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ListView and ListCell                                                       *
+ *                                                                             *
+ ******************************************************************************/
+
+.list-cell {
+    -fx-padding: 0.25em 0.583em 0.25em 0.583em; /* 3 7 3 7 */
+}
+.list-cell:odd {
+    -fx-background: -fx-control-inner-background-alt;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * TreeView and TreeCell                                                       *
+ *                                                                             *
+ ******************************************************************************/
+
+.tree-cell {
+    -fx-padding: 0.25em; /* 3 */
+    -fx-indent: 1em;
+}
+.tree-cell .label {
+    -fx-padding: 0.0em 0.0em 0.0em 0.25em; /* 0 0 0 3 */
+}
+.tree-cell > .tree-disclosure-node,
+.tree-table-row-cell > .tree-disclosure-node {
+    -fx-padding: 4 6 4 8;
+    -fx-background-color: transparent;
+}
+.tree-cell > .tree-disclosure-node > .arrow,
+.tree-table-row-cell > .tree-disclosure-node > .arrow {
+    -fx-background-color: -fx-text-background-color;
+    -fx-padding: 0.333333em 0.229em 0.333333em 0.229em; /* 4 */
+    -fx-shape: "M 0 -3.5 L 4 0 L 0 3.5 z";
+}
+.tree-cell:expanded > .tree-disclosure-node > .arrow,
+.tree-table-row-cell:expanded > .tree-disclosure-node > .arrow {
+    -fx-rotate: 90;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * TableView                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.table-view,
+.tree-table-view {
+    /* Constants used throughout the tableview. */
+    -fx-table-header-border-color: -fx-box-border;
+    -fx-table-cell-border-color: derive(-fx-color,5%);
+}
+/***** ROW CELLS **************************************************************/
+/* Each row in the table is a table-row-cell. Inside a table-row-cell is any
+   number of table-cell. */
+.table-row-cell {
+    -fx-background: -fx-control-inner-background;
+    -fx-background-color: -fx-table-cell-border-color, -fx-background;
+    -fx-background-insets: 0, 0 0 1 0;
+    -fx-padding: 0;
+    -fx-text-fill: -fx-text-background-color;
+}
+.table-row-cell:odd {
+    -fx-background: -fx-control-inner-background-alt;
+}
+/***** INDIVIDUAL CELLS ********************************************************/
+.table-cell {
+    -fx-padding: 0.166667em; /* 2px, plus border adds 1px */
+    -fx-background-color: null;
+    -fx-border-color: transparent -fx-table-cell-border-color transparent transparent;
+    -fx-cell-size: 2.0em; /* 24 */
+    -fx-text-fill: -fx-text-background-color;
+}
+.table-view > .virtual-flow > .clipped-container > .sheet > .table-row-cell .table-cell:selected,
+.tree-table-view > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell .tree-table-cell:selected {
+    -fx-background-color: -fx-table-cell-border-color, -fx-background;
+    -fx-background-insets: 0, 0 0 1 0;
+}
+/* When in constrained resize mode, the right-most visible cell should not have
+   a right-border, as it is not possible to get this cleanly out of view without
+   introducing horizontal scrollbars (see RT-14886). */
+.table-view:constrained-resize > .virtual-flow > .clipped-container > .sheet > .table-row-cell > .table-cell:last-visible,
+.tree-table-view:constrained-resize > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell > .tree-table-cell:last-visible {
+    -fx-border-color: transparent;
+}
+/***** HEADER **********************************************************************/
+/* The column-resize-line is shown when the user is attempting to resize a column. */
+.table-view .column-resize-line,
+.tree-table-view .column-resize-line {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-background;
+    -fx-padding: 0.0em 0.0416667em 0.0em 0.0416667em; /* 0 0.571429 0 0.571429 */
+}
+/* This is the area behind the column headers. An ideal place to specify background
+   and border colors for the whole area (not individual column-header's). */
+.table-view .column-header-background,
+.tree-table-view > .column-header-background {
+    -fx-background-color: -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 1;
+}
+/* The column header row is made up of a number of column-header, one for each
+   TableColumn, and a 'filler' area that extends from the right-most column
+   to the edge of the tableview, or up to the 'column control' button. */
+.table-view .column-header,
+.tree-table-view .column-header,
+.table-view .filler,
+.tree-table-view .filler,
+.table-view > .column-header-background > .show-hide-columns-button,
+.tree-table-view > .column-header-background > .show-hide-columns-button,
+.table-view:constrained-resize .filler,
+.tree-table-view:constrained-resize .filler {
+    -fx-background-color: -fx-box-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 0 1 1 0, 1 2 2 1;
+    -fx-font-weight: bold;
+    -fx-size: 2em;
+    -fx-text-fill: -fx-selection-bar-text;
+    -fx-padding: 0.166667em;
+}
+.table-view .column-header .context-menu,
+.tree-table-view .column-header .context-menu,
+.table-view > .column-header-background > .show-hide-columns-button .context-menu,
+.tree-table-view > .column-header-background > .show-hide-columns-button .context-menu {
+    -fx-font-weight: null;
+}
+.table-view .filler,
+.tree-table-view .filler,
+.table-view:constrained-resize .filler,
+.tree-table-view:constrained-resize .filler {
+    -fx-background-insets: 0, 0 0 1 0, 1 1 2 1;
+}
+.table-view > .column-header-background > .show-hide-columns-button,
+.tree-table-view > .column-header-background > .show-hide-columns-button {
+    -fx-background-insets: 0, 0 0 1 1, 1 1 2 2;
+}
+.table-view .column-header .sort-order-dots-container,
+.tree-table-view .column-header .sort-order-dots-container{
+    -fx-padding: 2 0 2 0;
+}
+.table-view .column-header .sort-order,
+.tree-table-view .column-header .sort-order{
+    -fx-font-size: 0.916667em; /* 11pt - 1 less than the default font */
+}
+.table-view .column-header .sort-order-dot,
+.tree-table-view .column-header .sort-order-dot {
+    -fx-background-color: -fx-mark-color;
+    -fx-padding: 0.115em;
+    -fx-background-radius: 0.115em;
+}
+.table-view .column-header .label,
+.tree-table-view .column-header .label {
+    -fx-alignment: center;
+}
+
+/* Plus Symbol */
+.table-view .show-hide-column-image,
+.tree-table-view .show-hide-column-image {
+    -fx-background-color: -fx-mark-color;
+    -fx-padding: 0.25em; /* 3px */
+    -fx-shape: "M398.902,298.045c0.667,0,1.333,0,2,0c0,0.667,0,1.333,0,2c0.667,0,1.333,0,2,0c0,0.667,0,1.333,0,2c-0.667,0-1.333,0-2,0c0,0.666,0,1.332,0,1.999c-0.667,0-1.333,0-2,0c0-0.667,0-1.333,0-1.999c-0.666,0-1.333,0-1.999,0c0-0.667,0-1.334,0-2c0.666,0,1.333,0,1.999,0C398.902,299.378,398.902,298.711,398.902,298.045z";
+}
+/* When a column is being 'dragged' to be placed in a different position, there
+   is a region that follows along the column header area to indicate where the
+   column will be dropped. This region can be styled using the .column-drag-header
+   name. */
+.table-view .column-drag-header,
+.tree-table-view .column-drag-header {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-selection-bar;
+    -fx-border-color: transparent;
+    -fx-opacity: 0.6;
+}
+/* Semi-transparent overlay to indicate the column that is currently being moved */
+.table-view .column-overlay,
+.tree-table-view .column-overlay {
+    -fx-background-color: darkgray;
+    -fx-opacity: 0.3;
+}
+/* Header Sort Arrows */
+.table-view /*> column-header-background > nested-column-header >*/ .arrow,
+.tree-table-view /*> column-header-background > nested-column-header >*/ .arrow {
+    -fx-background-color: -fx-mark-color;
+    -fx-padding: 0.25em 0.3125em 0.25em 0.3125em; /* 3 3.75 3 3.75 */
+    -fx-shape: "M 0 0 h 7 l -3.5 4 z";
+}
+/* This is shown when the table has no rows and/or no columns. */
+.table-view .empty-table,
+.tree-table-view .empty-table {
+    -fx-background-color: white;
+    -fx-font-size: 1.166667em; /* 14pt - 2 more than the default font */
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Table Cells                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+
+.check-box-table-cell {
+    -fx-alignment: center;
+    -fx-padding: 0;
+}
+.check-box-table-cell > .check-box {
+    -fx-font-size: 0.8em;
+    -fx-opacity: 1;
+    -fx-padding: 0 0 1 0;
+}
+.check-box-table-cell > .check-box > .box {
+    -fx-background-color: -fx-outer-border, -fx-background;
+    -fx-background-insets: 0,1;
+}
+.check-box-table-cell > .check-box:focused > .box {
+    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-background;
+    -fx-background-insets: -0.2, 1, 1.6;
+    -fx-background-radius: 3, 2, 1;
+}
+.check-box-table-cell > .check-box:selected > .box > .mark {
+    -fx-background-color: -fx-text-background-color;
+    -fx-background-insets: 0;
+}
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled > .check-box-table-cell:selected > .check-box > .box,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled > .check-box-table-cell:selected > .check-box > .box,
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:selected > .check-box-table-cell > .check-box > .box,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:selected > .check-box-table-cell > .check-box > .box {
+    -fx-background-color: derive(-fx-accent,40%), -fx-background;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * TreeTableView                                                               *
+ *                                                                             *
+ * Note: A lot of the CSS for TreeTableView is included with the TreeView and  *
+ * TableView CSS styles elsewhere in modena.css (as they are the same, just   *
+ * targeting different CSS style classes).                                     *
+ ******************************************************************************/
+
+.tree-table-row-cell {
+    -fx-background: -fx-control-inner-background;
+    -fx-background-color: -fx-background;
+    -fx-padding: 0;
+    -fx-text-fill: -fx-text-background-color;
+    -fx-indent: 1em;
+}
+.tree-table-cell {
+    /* tree-table-cell needs slightly different padding to make the text sit at
+    the right height for the arrow */
+    -fx-padding: 0.25em 0.166667em 0.083em 0.166667em; /* 3 2 1 2 , plus border adds 1px */
+    -fx-background-color: null;
+    -fx-border-color: transparent -fx-table-cell-border-color transparent transparent;
+    -fx-cell-size: 2.0em; /* 24 */
+    -fx-text-fill: -fx-text-background-color;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Tooltip                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+
+.tooltip {
+    -fx-background: rgba(30,30,30);
+    -fx-text-fill: white;
+    -fx-background-color: rgba(30,30,30,0.8);
+    -fx-background-radius: 6px;
+    -fx-background-insets: 0;
+    -fx-padding: 0.667em 0.75em 0.667em 0.75em; /* 10px */
+    -fx-effect: dropshadow( three-pass-box , rgba(0,0,0,0.5) , 10, 0.0 , 0 , 3 );
+    -fx-font-size: 0.85em;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Charts                                                                      *
+ *                                                                             *
+ ******************************************************************************/
+
+.chart {
+    -fx-padding: 5px;
+}
+.chart-plot-background {
+    -fx-background-color: -fx-background;
+}
+.chart-content {
+    -fx-padding: 10px;
+}
+.chart-title {
+    -fx-font-size: 1.4em;
+}
+.chart-legend {
+   -fx-background-color: -fx-shadow-highlight-color,
+        linear-gradient(to bottom, derive(-fx-background, -10%), derive(-fx-background, -5%)),
+        linear-gradient(from 0px 0px to 0px 4px, derive(-fx-background, -4%), derive(-fx-background, 10%));
+   -fx-background-insets: 0 0 -1 0, 0,1;
+   -fx-background-radius: 4,4,3;
+   -fx-padding: 6px;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Axis                                                                        *
+ *                                                                             *
+ ******************************************************************************/
+
+.axis {
+    AXIS_COLOR: derive(-fx-background,-20%);
+    -fx-tick-label-font-size: 0.833333em; /* 10px */
+    -fx-tick-label-fill: derive(-fx-text-background-color, 30%);
+}
+.axis:top {
+    -fx-border-color: transparent transparent AXIS_COLOR transparent;
+}
+.axis:right {
+    -fx-border-color: transparent transparent transparent AXIS_COLOR;
+}
+.axis:bottom {
+    -fx-border-color: AXIS_COLOR transparent transparent transparent;
+}
+.axis:left {
+    -fx-border-color: transparent AXIS_COLOR transparent transparent;
+}
+.axis:top > .axis-label,
+.axis:left > .axis-label {
+    -fx-padding: 0 0 4px 0;
+}
+.axis:bottom > .axis-label,
+.axis:right > .axis-label {
+    -fx-padding: 4px 0 0 0;
+}
+.axis-tick-mark,
+.axis-minor-tick-mark {
+    -fx-fill: null;
+    -fx-stroke: AXIS_COLOR;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ChartPlot                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.chart-vertical-grid-lines {
+    -fx-stroke: derive(-fx-background,-10%);
+    -fx-stroke-dash-array: 0.25em, 0.25em;
+}
+.chart-horizontal-grid-lines {
+    -fx-stroke: derive(-fx-background,-10%);
+    -fx-stroke-dash-array: 0.25em, 0.25em;
+}
+.chart-alternative-column-fill {
+    -fx-fill: null;
+    -fx-stroke: null;
+}
+.chart-alternative-row-fill {
+    -fx-fill: null;
+    -fx-stroke: null;
+}
+.chart-vertical-zero-line,
+.chart-horizontal-zero-line {
+    -fx-stroke: derive(-fx-text-background-color, 40%);
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ScatterChart                                                                *
+ *                                                                             *
+ ******************************************************************************/
+
+.chart-symbol { /* solid circle */
+    -fx-background-color: CHART_COLOR_1;
+    -fx-background-radius: 5px;
+    -fx-padding: 5px;
+}
+.default-color1.chart-symbol { /* solid square */
+    -fx-background-color: CHART_COLOR_2;
+    -fx-background-radius: 0;
+}
+.default-color2.chart-symbol { /* solid diamond */
+    -fx-background-color: CHART_COLOR_3;
+    -fx-background-radius: 0;
+    -fx-padding: 7px 5px 7px 5px;
+    -fx-shape: "M5,0 L10,9 L5,18 L0,9 Z";
+}
+.default-color3.chart-symbol { /* cross */
+    -fx-background-color: CHART_COLOR_4;
+    -fx-background-radius: 0;
+    -fx-background-insets: 0;
+    -fx-shape: "M2,0 L5,4 L8,0 L10,0 L10,2 L6,5 L10,8 L10,10 L8,10 L5,6 L2,10 L0,10 L0,8 L4,5 L0,2 L0,0 Z";
+}
+.default-color4.chart-symbol { /* solid triangle */
+    -fx-background-color: CHART_COLOR_5;
+    -fx-background-radius: 0;
+    -fx-background-insets: 0;
+    -fx-shape: "M5,0 L10,8 L0,8 Z";
+}
+.default-color5.chart-symbol { /* hollow circle */
+    -fx-background-color: CHART_COLOR_6, white;
+    -fx-background-insets: 0, 2;
+    -fx-background-radius: 5px;
+    -fx-padding: 5px;
+}
+.default-color6.chart-symbol { /* hollow square */
+    -fx-background-color: CHART_COLOR_7, white;
+    -fx-background-insets: 0, 2;
+    -fx-background-radius: 0;
+}
+.default-color7.chart-symbol { /* hollow diamond */
+    -fx-background-color: CHART_COLOR_8, white;
+    -fx-background-radius: 0;
+    -fx-background-insets: 0, 2.5;
+    -fx-padding: 7px 5px 7px 5px;
+    -fx-shape: "M5,0 L10,9 L5,18 L0,9 Z";
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * LineChart                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+
+.chart-line-symbol {
+    -fx-background-color: CHART_COLOR_1, white;
+    -fx-background-insets: 0, 2;
+    -fx-background-radius: 5px;
+    -fx-padding: 5px;
+}
+.chart-series-line {
+    -fx-stroke: CHART_COLOR_1;
+    -fx-stroke-width: 3px;
+}
+.default-color0.chart-line-symbol { -fx-background-color: CHART_COLOR_1, white; }
+.default-color1.chart-line-symbol { -fx-background-color: CHART_COLOR_2, white; }
+.default-color2.chart-line-symbol { -fx-background-color: CHART_COLOR_3, white; }
+.default-color3.chart-line-symbol { -fx-background-color: CHART_COLOR_4, white; }
+.default-color4.chart-line-symbol { -fx-background-color: CHART_COLOR_5, white; }
+.default-color5.chart-line-symbol { -fx-background-color: CHART_COLOR_6, white; }
+.default-color6.chart-line-symbol { -fx-background-color: CHART_COLOR_7, white; }
+.default-color7.chart-line-symbol { -fx-background-color: CHART_COLOR_8, white; }
+.default-color0.chart-series-line { -fx-stroke: CHART_COLOR_1; }
+.default-color1.chart-series-line { -fx-stroke: CHART_COLOR_2; }
+.default-color2.chart-series-line { -fx-stroke: CHART_COLOR_3; }
+.default-color3.chart-series-line { -fx-stroke: CHART_COLOR_4; }
+.default-color4.chart-series-line { -fx-stroke: CHART_COLOR_5; }
+.default-color5.chart-series-line { -fx-stroke: CHART_COLOR_6; }
+.default-color6.chart-series-line { -fx-stroke: CHART_COLOR_7; }
+.default-color7.chart-series-line { -fx-stroke: CHART_COLOR_8; }
+
+/*******************************************************************************
+ *                                                                             *
+ * AreaChart                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.chart-area-symbol {
+    -fx-background-color: CHART_COLOR_1, white;
+    -fx-background-insets: 0, 1;
+    -fx-background-radius: 4px; /* makes sure this remains circular */
+    -fx-padding: 3px;
+}
+.default-color0.chart-area-symbol { -fx-background-color: CHART_COLOR_1, white; }
+.default-color1.chart-area-symbol { -fx-background-color: CHART_COLOR_2, white; }
+.default-color2.chart-area-symbol { -fx-background-color: CHART_COLOR_3, white; }
+.default-color3.chart-area-symbol { -fx-background-color: CHART_COLOR_4, white; }
+.default-color4.chart-area-symbol { -fx-background-color: CHART_COLOR_5, white; }
+.default-color5.chart-area-symbol { -fx-background-color: CHART_COLOR_6, white; }
+.default-color6.chart-area-symbol { -fx-background-color: CHART_COLOR_7, white; }
+.default-color7.chart-area-symbol { -fx-background-color: CHART_COLOR_8, white; }
+.chart-series-area-line {
+    -fx-stroke: CHART_COLOR_1;
+    -fx-stroke-width: 1px;
+}
+.default-color0.chart-series-area-line { -fx-stroke: CHART_COLOR_1; }
+.default-color1.chart-series-area-line { -fx-stroke: CHART_COLOR_2; }
+.default-color2.chart-series-area-line { -fx-stroke: CHART_COLOR_3; }
+.default-color3.chart-series-area-line { -fx-stroke: CHART_COLOR_4; }
+.default-color4.chart-series-area-line { -fx-stroke: CHART_COLOR_5; }
+.default-color5.chart-series-area-line { -fx-stroke: CHART_COLOR_6; }
+.default-color6.chart-series-area-line { -fx-stroke: CHART_COLOR_7; }
+.default-color7.chart-series-area-line { -fx-stroke: CHART_COLOR_8; }
+.chart-series-area-fill {
+    -fx-stroke: null;
+    -fx-fill: CHART_COLOR_1_TRANS_20;
+}
+.default-color0.chart-series-area-fill { -fx-fill: CHART_COLOR_1_TRANS_20; }
+.default-color1.chart-series-area-fill { -fx-fill: CHART_COLOR_2_TRANS_20; }
+.default-color2.chart-series-area-fill { -fx-fill: CHART_COLOR_3_TRANS_20; }
+.default-color3.chart-series-area-fill { -fx-fill: CHART_COLOR_4_TRANS_20; }
+.default-color4.chart-series-area-fill { -fx-fill: CHART_COLOR_5_TRANS_20; }
+.default-color5.chart-series-area-fill { -fx-fill: CHART_COLOR_6_TRANS_20; }
+.default-color6.chart-series-area-fill { -fx-fill: CHART_COLOR_7_TRANS_20; }
+.default-color7.chart-series-area-fill { -fx-fill: CHART_COLOR_8_TRANS_20; }
+.area-legend-symbol {
+    -fx-padding: 6px;
+    -fx-background-radius: 6px; /* makes sure this remains circular */
+    -fx-background-insets: 0, 3;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * BubbleChart                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+
+.bubble-legend-symbol {
+    -fx-background-radius: 8px;
+    -fx-padding: 8px;
+}
+.chart-bubble {
+    -fx-bubble-fill: CHART_COLOR_1_TRANS_70;
+    -fx-background-color: radial-gradient(center 50% 50%, radius 80%, derive(-fx-bubble-fill,20%), derive(-fx-bubble-fill,-30%));
+}
+.default-color0.chart-bubble { -fx-bubble-fill: CHART_COLOR_1_TRANS_70; }
+.default-color1.chart-bubble { -fx-bubble-fill: CHART_COLOR_2_TRANS_70; }
+.default-color2.chart-bubble { -fx-bubble-fill: CHART_COLOR_3_TRANS_70; }
+.default-color3.chart-bubble { -fx-bubble-fill: CHART_COLOR_4_TRANS_70; }
+.default-color4.chart-bubble { -fx-bubble-fill: CHART_COLOR_5_TRANS_70; }
+.default-color5.chart-bubble { -fx-bubble-fill: CHART_COLOR_6_TRANS_70; }
+.default-color6.chart-bubble { -fx-bubble-fill: CHART_COLOR_7_TRANS_70; }
+.default-color7.chart-bubble { -fx-bubble-fill: CHART_COLOR_8_TRANS_70; }
+
+/*******************************************************************************
+ *                                                                             *
+ * BarChart                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+
+.chart-bar {
+    -fx-bar-fill: CHART_COLOR_1;
+    -fx-background-color:   linear-gradient(to right,
+                                derive(-fx-bar-fill, -4%),
+                                derive(-fx-bar-fill, -1%),
+                                derive(-fx-bar-fill, 0%),
+                                derive(-fx-bar-fill, -1%),
+                                derive(-fx-bar-fill, -6%)
+                              );
+    -fx-background-insets: 0;
+}
+.chart-bar.negative {
+    -fx-background-insets: 1 0 0 0;
+}
+.bar-chart:horizontal .chart-bar {
+    -fx-background-insets: 0 0 0 1;
+}
+.bar-chart:horizontal .chart-bar,
+.stacked-bar-chart:horizontal .chart-bar {
+    -fx-background-color:   linear-gradient(to bottom,
+                                derive(-fx-bar-fill, -4%),
+                                derive(-fx-bar-fill, -1%),
+                                derive(-fx-bar-fill, 0%),
+                                derive(-fx-bar-fill, -1%),
+                                derive(-fx-bar-fill, -6%)
+                              );
+}
+.default-color0.chart-bar { -fx-bar-fill: CHART_COLOR_1; }
+.default-color1.chart-bar { -fx-bar-fill: CHART_COLOR_2; }
+.default-color2.chart-bar { -fx-bar-fill: CHART_COLOR_3; }
+.default-color3.chart-bar { -fx-bar-fill: CHART_COLOR_4; }
+.default-color4.chart-bar { -fx-bar-fill: CHART_COLOR_5; }
+.default-color5.chart-bar { -fx-bar-fill: CHART_COLOR_6; }
+.default-color6.chart-bar { -fx-bar-fill: CHART_COLOR_7; }
+.default-color7.chart-bar { -fx-bar-fill: CHART_COLOR_8; }
+.bar-legend-symbol {
+    -fx-padding: 8px;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * PieChart                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+
+.chart-pie {
+    -fx-pie-color: CHART_COLOR_1;
+    -fx-background-color: radial-gradient(radius 100%, derive(-fx-pie-color,20%), derive(-fx-pie-color,-10%));
+    -fx-background-insets: 1;
+    -fx-border-color: -fx-background;
+}
+.chart-pie-label {
+    -fx-padding: 3px;
+    -fx-fill: -fx-text-base-color;
+}
+.chart-pie-label-line {
+    -fx-stroke: derive(-fx-background,-20%);
+}
+.default-color0.chart-pie { -fx-pie-color: CHART_COLOR_1; }
+.default-color1.chart-pie { -fx-pie-color: CHART_COLOR_2; }
+.default-color2.chart-pie { -fx-pie-color: CHART_COLOR_3; }
+.default-color3.chart-pie { -fx-pie-color: CHART_COLOR_4; }
+.default-color4.chart-pie { -fx-pie-color: CHART_COLOR_5; }
+.default-color5.chart-pie { -fx-pie-color: CHART_COLOR_6; }
+.default-color6.chart-pie { -fx-pie-color: CHART_COLOR_7; }
+.default-color7.chart-pie { -fx-pie-color: CHART_COLOR_8; }
+.negative.chart-pie {
+    -fx-pie-color: transparent;
+    -fx-background-color: white;
+}
+.pie-legend-symbol.chart-pie {
+    -fx-background-radius: 8px;
+    -fx-padding: 8px;
+    -fx-border-color: null;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Combinations                                                                *
+ *                                                                             *
+ * This section is for special handling of when one control is nested inside   *
+ * another control. There are many cases where we would end up with ugly       *
+ * double borders that are fixed here.                                         *
+ *                                                                             *
+ ******************************************************************************/
+
+.tab-pane > * > .table-view,
+.tab-pane > * > .tree-table-view,
+.tab-pane > * > .list-view,
+.tab-pane > * > .tree-view,
+.tab-pane > * > .scroll-pane,
+.tab-pane > * > .split-pane,
+.tab-pane > * > .text-area,
+.tab-pane > * > .html-editor,
+.split-pane > * > .tab-pane,
+.split-pane > * > .table-view,
+.split-pane > * > .tree-table-view,
+.split-pane > * > .list-view,
+.split-pane > * > .tree-view,
+.split-pane > * > .scroll-pane,
+.split-pane > * > .split-pane,
+.split-pane > * > .text-area,
+.split-pane > * > .html-editor {
+    -fx-background-insets: 0, 0;
+    -fx-padding: 0;
+ }
+ .tab-pane > * > .scroll-pane > .corner {
+     -fx-background-insets: 0;  /* Fix for RT-35067 */
+ }
+.tab-pane.floating > * > .table-view,
+.tab-pane.floating > * > .tree-table-view,
+.tab-pane.floating > * > .list-view,
+.tab-pane.floating > * > .tree-view,
+.tab-pane.floating > * > .scroll-pane,
+.tab-pane.floating > * > .split-pane,
+.tab-pane.floating > * > .text-area,
+.tab-pane.floating > * > .html-editor {
+    -fx-background-insets: 0, 0;
+    -fx-padding: -1;
+}
+.split-pane > * > .accordion > .titled-pane > *.content {
+    -fx-border-color: null;
+    -fx-border-insets: 0;
+}
+.split-pane > * > .accordion > .titled-pane > .title  {
+    -fx-background-insets: 0,1 0 1 0, 2 1 2 1;
+}
+.split-pane > * > .accordion > .first-titled-pane > .title  {
+    -fx-background-insets: 0,0 0 1 0, 1 1 2 1;
+}
+.split-pane > * > .accordion > .titled-pane:collapsed > .title  {
+    -fx-background-insets: 0,1 0 0 0, 2 1 1 1;
+}
+.split-pane > * > .accordion > .first-titled-pane:collapsed > .title  {
+    -fx-background-insets: 0,0 0 0 0, 1 1 1 1;
+}
+.titled-pane > .content > .split-pane,
+.titled-pane > .content > .text-area,
+.titled-pane > .content > .html-editor,
+.titled-pane > .content > .list-view,
+.titled-pane > .content > .tree-view,
+.titled-pane > .content > .table-view,
+.titled-pane > .content > .tree-table-view,
+.titled-pane > .content > .scroll-pane {
+    -fx-background-color: null;
+    -fx-background-insets: 0, 0;
+    -fx-padding: 0;
+}
+
+.titled-pane > .content > AnchorPane,
+.titled-pane > .content > BorderPane,
+.titled-pane > .content > FlowPane,
+.titled-pane > .content > GridPane,
+.titled-pane > .content > HBox,
+.titled-pane > .content > Pane,
+.titled-pane > .content > StackPane,
+.titled-pane > .content > TilePane,
+.titled-pane > .content > VBox {
+    -fx-padding: 0.8em;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * DatePicker                                                                  *
+ *                                                                             *
+ ******************************************************************************/
+
+.date-picker > .arrow-button > .arrow {
+    -fx-shape: "M0,0v9h9V0H0z M2,8H1V7h1V8z M2,6H1V5h1V6z M2,4H1V3h1V4z M4,8H3V7h1V8z M4,6H3V5h1V6z M4,4H3V3h1V4z M6,8H5V7h1V8z M6,6H5 V5h1V6z M6,4H5V3h1V4z M8,8H7V7h1V8z M8,6H7V5h1V6z M8,4H7V3h1V4z";
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.416667em 0.416667em 0.333333em 0.333333em; /* 5 5 4 4 */
+    -fx-scale-shape: true;
+}
+
+.date-picker-popup {
+     -fx-background-color:
+        linear-gradient(to bottom,
+            derive(-fx-color,-17%),
+            derive(-fx-color,-30%)
+        ),
+        -fx-control-inner-background;
+    -fx-background-insets: 0, 1;
+    -fx-background-radius: 0;
+    -fx-alignment: CENTER; /* VBox */
+    -fx-spacing: 0; /* VBox */
+    -fx-padding: 0.083333em; /* 1 1 1 1 */
+    -fx-effect: dropshadow( gaussian , rgba(0,0,0,0.2) , 12, 0.0 , 0 , 8 );
+}
+.date-picker-popup > .month-year-pane {
+    -fx-padding: 0.588883em 0.5em 0.666667em 0.5em; /* 7 6 8 6 */
+    -fx-background-color: derive(-fx-box-border,30%), linear-gradient(to bottom, derive(-fx-base,-3%), derive(-fx-base,5%) 50%, derive(-fx-base,-3%));
+    -fx-background-insets: 0 0 0 0, 0 0 1 0;
+}
+.date-picker-popup > * > .spinner {
+    -fx-spacing: 0.25em; /* 3 */
+    -fx-alignment: CENTER;
+    -fx-fill-height: false;
+    -fx-background-color: transparent;
+}
+.date-picker-popup > * > .spinner > .button {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 1, 2;
+    -fx-color: transparent;
+    -fx-background-radius: 0;
+}
+.date-picker-popup > * > .spinner > .button:focused {
+    -fx-background-color: -fx-focus-color, -fx-inner-border, -fx-body-color, -fx-faint-focus-color, -fx-body-color;
+    -fx-color: -fx-hover-base;
+    -fx-background-insets: -0.2, 1, 2, -1.4, 2.6;
+}
+.date-picker-popup > * > .spinner > .button:hover {
+    -fx-color: -fx-hover-base;
+}
+.date-picker-popup > * > .spinner > .button:armed {
+    -fx-color: -fx-pressed-base;
+}
+.date-picker-popup > * > .spinner > .left-button {
+    -fx-padding: 0 0.333333em 0 0.25em; /* 0 4 0 3 */
+}
+.date-picker-popup > * > .spinner > .right-button {
+    -fx-padding: 0 0.25em 0 0.333333em; /* 0 3 0 4 */
+}
+.date-picker-popup > * > .spinner > .button > .left-arrow,
+.date-picker-popup > * > .spinner > .button > .right-arrow {
+    -fx-background-color: -fx-mark-highlight-color, derive(-fx-base,-45%);
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.333333em 0.166667em 0.333333em 0.166667em; /* 4 2 4 2 */
+    -fx-effect: dropshadow(two-pass-box , -fx-shadow-highlight-color, 1, 0.0 , 0, 1.4);
+}
+.date-picker-popup > * > .spinner > .button:hover > .left-arrow,
+.date-picker-popup > * > .spinner > .button:hover > .right-arrow {
+    -fx-background-color: -fx-mark-highlight-color, derive(-fx-base,-50%);
+}
+.date-picker-popup > * > .spinner > .button:pressed > .left-arrow,
+.date-picker-popup > * > .spinner > .button:pressed > .right-arrow {
+    -fx-background-color: -fx-mark-highlight-color, derive(-fx-base,-55%);
+}
+.date-picker-popup > * > .spinner > .button > .left-arrow {
+    -fx-padding: 0.333333em 0.25em 0.333333em 0.166667em; /* 4 3 4 2 */
+    -fx-shape: "M5.997,5.072L5.995,6.501l-2.998-4l2.998-4l0.002,1.43l-1.976,2.57L5.997,5.072z";
+    -fx-scale-shape: true;
+}
+.date-picker-popup > * > .spinner > .button > .right-arrow {
+    -fx-padding: 0.333333em 0.25em 0.333333em 0.166667em; /* 4 3 4 2 */
+    -fx-shape: "M2.998-0.07L3-1.499l2.998,4L3,6.501l-0.002-1.43l1.976-2.57L2.998-0.07z";
+    -fx-scale-shape: true;
+}
+.date-picker-popup > * > .spinner > .label {
+    -fx-alignment: CENTER;
+}
+.date-picker-popup > .month-year-pane > .secondary-label {
+    -fx-alignment: BASELINE_CENTER;
+    -fx-padding: 0.5em 0 0 0; /* 6 0 0 0 */
+    -fx-text-fill: #f3622d;
+}
+
+.date-picker-popup > .calendar-grid {
+    -fx-background-color: derive(-fx-selection-bar-non-focused, 60%);
+    /*-fx-background-insets: 1 0 0 0;*/
+    -fx-padding: 0;
+}
+.date-picker-popup > * > .date-cell {
+    -fx-background-color: transparent;
+    -fx-background-insets: 1, 2;
+    -fx-padding: 0;
+    -fx-alignment: BASELINE_CENTER;
+    -fx-opacity: 1.0;
+}
+.date-picker-popup > * > .day-name-cell,
+.date-picker-popup > * > .week-number-cell {
+    -fx-font-size: 0.916667em;
+}
+.date-picker-popup > * > .week-number-cell {
+    -fx-padding: 0.333333em 0.583333em 0.333333em 0.583333em; /* 4 7 4 7 */
+    -fx-border-color: -fx-control-inner-background;
+    -fx-border-width: 1px;
+    -fx-background: -fx-control-inner-background;
+    -fx-background-color: -fx-background;
+    -fx-text-fill: -fx-accent;
+}
+.date-picker-popup > * > .day-cell {
+    -fx-padding: 0.333333em 0.583333em 0.333333em 0.583333em; /* 4 7 4 7 */
+    -fx-border-color: derive(-fx-selection-bar-non-focused, 60%);
+    -fx-border-width: 1px;
+    -fx-font-size: 1em;
+    -fx-background: -fx-control-inner-background;
+    -fx-background-color: -fx-background;
+    -fx-text-fill: -fx-text-background-color;
+}
+.date-picker-popup > * > .hijrah-day-cell {
+    -fx-alignment: TOP_LEFT;
+    -fx-padding: 0.083333em 0.333333em 0.083333em 0.333333em; /* 1 4 1 4 */
+    -fx-cell-size: 2.75em;
+}
+.date-picker-popup > * > .day-cell > .secondary-text {
+    -fx-fill: #f3622d;
+}
+.date-picker-popup > * > .today {
+    -fx-background-color: -fx-control-inner-background, derive(-fx-selection-bar-non-focused, -20%), -fx-control-inner-background;
+    -fx-background-insets: 1, 2, 3;
+}
+.date-picker-popup > * > .day-cell:hover,
+.date-picker-popup > * > .selected,
+.date-picker-popup > * > .previous-month.selected,
+.date-picker-popup > * > .next-month.selected {
+    -fx-background: -fx-selection-bar;
+}
+.date-picker-popup > * > .previous-month:hover,
+.date-picker-popup > * > .next-month:hover {
+    -fx-background: -fx-selection-bar-non-focused;
+}
+.date-picker-popup > * > .today:hover,
+.date-picker-popup > * > .today.selected {
+    -fx-background-color: -fx-selection-bar, derive(-fx-selection-bar-non-focused, -20%),-fx-selection-bar;
+}
+.date-picker-popup > * > .day-cell:focused,
+.date-picker-popup > * > .today:focused {
+    -fx-background-color: -fx-control-inner-background, -fx-cell-focus-inner-border, -fx-control-inner-background;
+    -fx-background-insets: 1, 2, 3;
+}
+.date-picker-popup > * > .day-cell:focused:hover,
+.date-picker-popup > * > .today:focused:hover,
+.date-picker-popup > * > .selected:focused,
+.date-picker-popup > * > .today.selected:focused {
+    -fx-background-color: -fx-selection-bar, -fx-cell-focus-inner-border, -fx-selection-bar;
+}
+.date-picker-popup > * > .previous-month,
+.date-picker-popup > * > .next-month {
+    -fx-background: derive(-fx-control-inner-background, -4%);
+}
+.date-picker-popup > * > .day-cell:hover > .secondary-text,
+.date-picker-popup > * > .previous-month > .secondary-text,
+.date-picker-popup > * > .next-month > .secondary-text,
+.date-picker-popup > * > .selected > .secondary-text {
+    -fx-fill: -fx-text-background-color;
+}
+.date-picker-popup > * > .previous-month.today,
+.date-picker-popup > * > .next-month.today {
+    -fx-background-color: derive(-fx-control-inner-background, -4%), derive(-fx-selection-bar-non-focused, -20%), derive(-fx-control-inner-background, -4%);
+}
+
+.date-picker-popup > * > .previous-month.today:hover,
+.date-picker-popup > * > .next-month.today:hover {
+    -fx-background-color: -fx-selection-bar-non-focused, derive(-fx-selection-bar-non-focused, -20%), -fx-selection-bar-non-focused;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Spinner                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+
+.spinner {
+    -fx-background-color:
+        linear-gradient(to bottom, derive(-fx-text-box-border, -10%), -fx-text-box-border),
+        linear-gradient(from 0px 0px to 0px 5px, derive(-fx-control-inner-background, -9%), -fx-control-inner-background);
+    -fx-background-insets: 0, 1;
+    -fx-background-radius: 3, 2;
+}
+.spinner:focused,
+.spinner:contains-focus {
+    -fx-background-color: -fx-focus-color, -fx-inner-border, -fx-body-color, -fx-faint-focus-color, -fx-body-color;
+    -fx-background-insets: -0.2, 1, 2, -1.4, 2.6;
+    -fx-background-radius: 3, 2, 1, 4, 1;
+}
+.spinner > .text-field {
+    -fx-background-color:
+        linear-gradient(to bottom, derive(-fx-text-box-border, -10%), -fx-text-box-border),
+        linear-gradient(from 0px 0px to 0px 5px, derive(-fx-control-inner-background, -9%), -fx-control-inner-background);
+    -fx-background-insets: 0, 1 0 1 1;
+    -fx-background-radius: 3 0 0 3, 2 0 0 2;
+}
+.spinner:focused > .text-field,
+.spinner:contains-focus > .text-field {
+    -fx-background-color:
+        -fx-control-inner-background,
+        -fx-faint-focus-color,
+        linear-gradient(from 0px 0px to 0px 5px, derive(-fx-control-inner-background, -9%), -fx-control-inner-background);
+    -fx-background-insets: 1 0 1 1, 1 0 1 1, 3 2 3 3;
+    -fx-background-radius: 2 0 0 2, 1 0 0 1, 0;
+}
+
+.spinner .increment-arrow-button {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+     /*Change the two 0's here to -1 to get rid of the horizontal line */
+    -fx-background-insets: 0 0 -1 0, 1 1 0 1, 2 2 1 2;
+    -fx-background-radius: 0 3 0 0, 0 2 0 0, 0 1 0 0;
+    -fx-padding: 0.333335em 0.666667em 0.333335em 0.666667em;  /* 5 8 3 8 */
+}
+.spinner .decrement-arrow-button {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 1 1 1 1, 1 2 2 2;
+    -fx-background-radius: 0 0 3 0, 0 0 2 0, 0 0 1 0;
+    -fx-padding: 0.333335em 0.666667em 0.333335em 0.666667em;  /* 3 8 5 8 */
+}
+.spinner:focused .increment-arrow-button,
+.spinner:contains-focus .increment-arrow-button,
+.spinner:focused .decrement-arrow-button,
+.spinner:contains-focus .decrement-arrow-button {
+    -fx-background-color: -fx-focus-color, -fx-body-color, -fx-faint-focus-color, -fx-body-color;
+}
+
+.spinner .increment-arrow-button .increment-arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 0 0 -1 0, 0;
+    -fx-padding: 0.166667em 0.333333em 0.166667em 0.333333em;  /* 2 4 2 4 */
+    -fx-shape: "M 0 4 h 7 l -3.5 -4 z";
+}
+.spinner .decrement-arrow-button .decrement-arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 0 0 -1 0, 0;
+    -fx-padding: 0.166667em 0.333333em 0.166667em 0.333333em; /* 2 4 2 4 */
+    -fx-shape: "M 0 0 h 7 l -3.5 4 z";
+}
+
+/* Spinner - Horizontal arrows */
+.spinner.split-arrows-horizontal .increment-arrow-button .increment-arrow,
+.spinner.arrows-on-right-horizontal .increment-arrow-button .increment-arrow,
+.spinner.arrows-on-left-horizontal .increment-arrow-button .increment-arrow {
+    -fx-padding: 0.333333em 0.166667em 0.333333em 0.166667em; /* 4 2 4 2 */
+    -fx-shape: "M 0 0 v 7 l 3.5 -4 z";
+}
+.spinner.split-arrows-horizontal .decrement-arrow-button .decrement-arrow,
+.spinner.arrows-on-right-horizontal .decrement-arrow-button .decrement-arrow,
+.spinner.arrows-on-left-horizontal .decrement-arrow-button .decrement-arrow {
+    -fx-padding: 0.333333em 0.166667em 0.333333em 0.166667em; /* 4 2 4 2 */
+    -fx-shape: "M 4 0 v 7 l -4 -3.5 z";
+}
+
+/* Spinner - STYLE_CLASS_ARROWS_ON_RIGHT_HORIZONTAL */
+.spinner.arrows-on-right-horizontal .increment-arrow-button {
+    -fx-background-radius: 0 3 3 0, 0 2 2 0, 0 1 1 0;
+    -fx-background-insets: 0 0 0 -1, 1 1 1 0, 2 2 2 1;
+}
+.spinner.arrows-on-right-horizontal .decrement-arrow-button {
+    -fx-background-radius: 0;
+    -fx-background-insets: 0, 1, 2;
+}
+
+/* Spinner - STYLE_CLASS_ARROWS_ON_LEFT_VERTICAL */
+.spinner.arrows-on-left-vertical > .text-field {
+    -fx-background-insets: 0, 1 1 1 0;
+    -fx-background-radius: 0 3 3 0, 0 2 2 0;
+}
+.spinner.arrows-on-left-vertical .increment-arrow-button {
+    -fx-background-radius: 3 0 0 0, 2 0 0 0, 1 0 0 0;
+}
+.spinner.arrows-on-left-vertical .decrement-arrow-button {
+    -fx-background-radius: 0 0 0 3, 0 0 0 2, 0 0 0 1;
+}
+
+/* Spinner - STYLE_CLASS_ARROWS_ON_LEFT_HORIZONTAL */
+.spinner.arrows-on-left-horizontal > .text-field {
+    -fx-background-insets: 0, 1 1 1 0;
+    -fx-background-radius: 0 3 3 0, 0 2 2 0;
+}
+.spinner.arrows-on-left-horizontal .increment-arrow-button {
+    -fx-background-insets: 0 0 0 -1, 1 1 1 0, 2 2 2 1;
+    -fx-background-radius: 0;
+}
+.spinner.arrows-on-left-horizontal .decrement-arrow-button {
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 3 0 0 3, 2 0 0 2, 1 0 0 1;
+}
+.spinner.arrows-on-left-vertical:focused > .text-field,
+.spinner.arrows-on-left-vertical:contains-focus > .text-field,
+.spinner.arrows-on-left-horizontal:focused > .text-field,
+.spinner.arrows-on-left-horizontal:contains-focus > .text-field {
+    -fx-background-insets: 1 1 1 0, 1 1 1 0, 3 3 3 2;
+}
+
+/* Spinner - STYLE_CLASS_SPLIT_ARROWS_VERTICAL */
+.spinner.split-arrows-vertical > .text-field {
+    -fx-background-insets: 0, 0 1 0 1;
+    -fx-background-radius: 0, 0;
+}
+.spinner.split-arrows-vertical .increment-arrow-button {
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 3 3 0 0, 2 2 0 0, 1 1 0 0;
+}
+.spinner.split-arrows-vertical .decrement-arrow-button {
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 0 0 3 3, 0 0 2 2, 0 0 1 1;
+}
+.spinner.split-arrows-vertical:focused > .text-field,
+.spinner.split-arrows-vertical:contains-focus > .text-field {
+    -fx-background-insets: 0 1 0 1, 0 1 0 1, 2 3 2 3;
+}
+
+/* Spinner - STYLE_CLASS_SPLIT_ARROWS_HORIZONTAL */
+.spinner.split-arrows-horizontal > .text-field {
+    -fx-background-insets: 0, 1 0 1 0;
+    -fx-background-radius: 0, 0;
+}
+.spinner.split-arrows-horizontal .increment-arrow-button {
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 0 3 3 0, 0 2 2 0, 0 1 1 0;
+}
+.spinner.split-arrows-horizontal .decrement-arrow-button {
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 3 0 0 3, 2 0 0 2, 1 0 0 1;
+}
+.spinner.split-arrows-horizontal:focused > .text-field,
+.spinner.split-arrows-horizontal:contains-focus > .text-field {
+    -fx-background-insets: 1 0 1 0, 1 0 1 0, 3 2 3 2;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Dialog                                                                      *
+ *                                                                             *
+ ******************************************************************************/
+
+.dialog-pane {
+    -fx-background-color: -fx-background;
+    -fx-padding: 0;
+}
+
+.dialog-pane > .expandable-content {
+    -fx-padding: 0.666em; /* 8px */
+}
+
+.dialog-pane > .button-bar > .container {
+    -fx-padding: 0.833em; /* 10px */
+}
+
+.dialog-pane > .content.label {
+    -fx-alignment: top-left;
+    -fx-padding: 1.333em 0.833em 0 0.833em; /* 16px 10px 0px 10px */
+}
+
+.dialog-pane > .content {
+    -fx-padding: 0.833em; /* 10 */
+}
+
+.dialog-pane:no-header .graphic-container {
+    -fx-padding: 0.833em 0 0 0.833em; /* 10px 0px 0px 10px */
+}
+
+.dialog-pane:header .header-panel {
+    /*-fx-padding: 0.833em 1.166em 0.833em 1.166em; *//* 10px 14px 10px 14px */
+    -fx-padding: 0.833em; /* 10px */
+    -fx-background-color: -fx-box-border, linear-gradient(-fx-background, derive(-fx-background, 30%));
+    -fx-background-insets: 0, 0 0 1 0;
+}
+
+.dialog-pane:header .header-panel .label {
+    -fx-font-size: 1.167em; /* 14px */
+    -fx-wrap-text: true;
+}
+
+.dialog-pane:header .header-panel .graphic-container {
+    /* This prevents the text in the header running directly into the graphic */
+    -fx-padding: 0 0 0 0.833em; /* 0px 0px 0px 10px */
+}
+
+.dialog-pane > .button-bar > .container > .details-button {
+  -fx-alignment: baseline-left;
+  -fx-focus-traversable: false;
+  -fx-padding: 0.416em; /* 5px */
+}
+
+.dialog-pane > .button-bar > .container > .details-button.more {
+    -fx-graphic: url("dialog-more-details.png");
+}
+
+.dialog-pane > .button-bar > .container > .details-button.less {
+    -fx-graphic: url("dialog-fewer-details.png");
+}
+
+.dialog-pane > .button-bar > .container > .details-button:hover {
+    -fx-underline: true;
+}
+
+.alert.confirmation.dialog-pane,
+.text-input-dialog.dialog-pane,
+.choice-dialog.dialog-pane {
+    -fx-graphic: url("dialog-confirm.png");
+}
+
+.alert.information.dialog-pane {
+    -fx-graphic: url("dialog-information.png");
+}
+
+.alert.error.dialog-pane {
+    -fx-graphic: url("dialog-error.png");
+}
+
+.alert.warning.dialog-pane {
+    -fx-graphic: url("dialog-warning.png");
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_ja.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_ja.properties	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_ja.properties	(date 1547619874000)
@@ -0,0 +1,2 @@
+OverlayWarningESC = \u5168\u753B\u9762\u30E2\u30FC\u30C9\u3092\u7D42\u4E86\u3059\u308B\u306B\u306F\u3001[ESC]\u3092\u62BC\u3057\u3066\u304F\u3060\u3055\u3044\u3002
+OverlayWarningKey = \u5168\u753B\u9762\u30E2\u30FC\u30C9\u3092\u7D42\u4E86\u3059\u308B\u306B\u306F\u3001%s\u3092\u62BC\u3057\u3066\u304F\u3060\u3055\u3044\u3002
Index: build/kotlin/compileKotlin/caches-jvm/lookups/counters.tab
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/kotlin/compileKotlin/caches-jvm/lookups/counters.tab	(date 1606510520738)
+++ build/kotlin/compileKotlin/caches-jvm/lookups/counters.tab	(date 1606510520738)
@@ -0,0 +1,2 @@
+85
+77
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_zh_TW.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_zh_TW.properties	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_zh_TW.properties	(date 1547619874000)
@@ -0,0 +1,2 @@
+OverlayWarningESC = \u6309 ESC \u5373\u53EF\u96E2\u958B\u5168\u87A2\u5E55\u6A21\u5F0F.
+OverlayWarningKey = \u6309 %s \u5373\u53EF\u96E2\u958B\u5168\u87A2\u5E55\u6A21\u5F0F.
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_de.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_de.properties	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_de.properties	(date 1547619874000)
@@ -0,0 +1,2 @@
+OverlayWarningESC = Dr\u00FCcken Sie ESC, um den Vollbildmodus zu beenden.
+OverlayWarningKey = Dr\u00FCcken Sie %s, um den Vollbildmodus zu beenden.
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_pt_BR.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_pt_BR.properties	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_pt_BR.properties	(date 1547619874000)
@@ -0,0 +1,2 @@
+OverlayWarningESC = Pressione ESC para sair do modo de exibi\u00E7\u00E3o de tela inteira.
+OverlayWarningKey = Pressione %s para sair do modo de exibi\u00E7\u00E3o de tela inteira.
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/blackOnWhite.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/blackOnWhite.css	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/blackOnWhite.css	(date 1547619866000)
@@ -0,0 +1,567 @@
+/*
+ * Copyright (c) 2013, 2016, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*******************************************************************************
+ *                                                                             *
+ * "Black on White" contrast theme.                                            *
+ *                                                                             *
+ ******************************************************************************/
+
+.root {
+    -fx-base: white;
+    -fx-background: -fx-base;
+    -fx-control-inner-background: -fx-base;
+    -fx-control-inner-background-alt: -fx-base;
+    -fx-faint-focus-color: -fx-accent;
+    -fx-hover-base: black;
+    -fx-pressed-base: derive(-fx-base, -8%);
+    -fx-box-border: -fx-hover-base;
+    -fx-text-box-border: -fx-hover-base;
+    -fx-shadow-highlight-color: -fx-base;
+    -fx-outer-border: -fx-hover-base;
+    -fx-selection-bar-non-focused: -fx-pressed-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Font Weight                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+.text,
+.text-input {
+    -fx-font-weight: bold;
+}
+.axis {
+    -fx-tick-label-font-weight: bold;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ToggleButton                                                                *
+ *                                                                             *
+ ******************************************************************************/
+.toggle-button:selected,
+.toggle-button:selected:focused {
+    -fx-mid-text-color: -fx-base;
+}
+.toggle-button:selected:armed,
+.toggle-button:selected:focused:armed {
+    -fx-mid-text-color: -fx-hover-base;
+}
+.toggle-button:selected {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-hover-base, -fx-hover-base;
+}
+.toggle-button:selected:focused {
+    -fx-background-color: -fx-focus-color, -fx-hover-base, -fx-faint-focus-color, -fx-hover-base;
+}
+.toggle-button:selected:armed {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-hover-base, -fx-faint-focus-color, -fx-pressed-base;
+}
+.toggle-button:selected:focused:armed {
+    -fx-background-color: -fx-focus-color, -fx-hover-base, -fx-faint-focus-color, -fx-pressed-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Slider                                                                      *
+ *                                                                             *
+ ******************************************************************************/
+.slider .thumb {
+    -fx-background-color: -fx-hover-base, -fx-inner-border, -fx-body-color;
+}
+.slider:focused .thumb {
+    -fx-background-color: -fx-focus-color, -fx-inner-border, -fx-body-color, -fx-faint-focus-color, -fx-body-color;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ScrollBar                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.scroll-bar > .increment-button,
+.scroll-bar > .decrement-button {
+    -fx-background-color: -fx-outer-border, -fx-base, -fx-base;
+}
+.scroll-bar > .increment-button:hover,
+.scroll-bar > .decrement-button:hover {
+    -fx-background-color: -fx-outer-border, -fx-hover-base, -fx-hover-base;
+}
+.scroll-bar > .increment-button:hover > .increment-arrow,
+.scroll-bar > .decrement-button:hover > .decrement-arrow {
+    -fx-background-color: -fx-base, -fx-base;
+}
+.scroll-bar > .increment-button:hover:pressed > .increment-arrow,
+.scroll-bar > .decrement-button:hover:pressed > .decrement-arrow {
+    -fx-background-color: -fx-hover-base, -fx-hover-base;
+}
+.scroll-bar > .increment-button > .increment-arrow,
+.scroll-bar > .decrement-button > .decrement-arrow {
+    -fx-background-color: -fx-hover-base, -fx-hover-base;
+}
+.scroll-bar > .increment-button:hover:pressed,
+.scroll-bar > .decrement-button:hover:pressed {
+    -fx-background-color: -fx-outer-border, -fx-pressed-base, -fx-pressed-base;
+}
+.scroll-bar:horizontal > .decrement-button > .decrement-arrow,
+.scroll-bar:horizontal > .increment-button > .increment-arrow,
+.scroll-bar:vertical > .decrement-button > .decrement-arrow,
+.scroll-bar:vertical > .increment-button > .increment-arrow {
+    -fx-effect: null;
+}
+.scroll-bar > .thumb:pressed {
+    -fx-background-color: -fx-outer-border, -fx-pressed-base, -fx-pressed-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * HTML Editor                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+.html-editor-foreground,
+.html-editor-foreground:showing:hover {
+    -fx-graphic: url("HTMLEditor-Text-Color-Black.png");
+}
+.html-editor-background,
+.html-editor-background:showing:hover {
+    -fx-graphic: url("HTMLEditor-Background-Color-Black.png");
+}
+.html-editor-cut,
+.html-editor-cut:hover:armed {
+    -fx-graphic: url("HTMLEditor-Cut-Black.png");
+}
+.html-editor-copy,
+.html-editor-copy:hover:armed {
+    -fx-graphic: url("HTMLEditor-Copy-Black.png");
+}
+.html-editor-paste,
+.html-editor-paste:hover:armed {
+    -fx-graphic: url("HTMLEditor-Paste-Black.png");
+}
+.html-editor-align-left,
+.html-editor-align-left:hover:armed,
+.html-editor-align-left:selected:armed {
+    -fx-graphic: url("HTMLEditor-Left-Black.png");
+}
+.html-editor-align-center,
+.html-editor-align-center:hover:armed,
+.html-editor-align-center:selected:armed {
+    -fx-graphic: url("HTMLEditor-Center-Black.png");
+}
+.html-editor-align-right,
+.html-editor-align-right:hover:armed,
+.html-editor-align-right:selected:armed {
+    -fx-graphic: url("HTMLEditor-Right-Black.png");
+}
+.html-editor-align-justify,
+.html-editor-align-justify:hover:armed,
+.html-editor-align-justify:selected:armed {
+    -fx-graphic: url("HTMLEditor-Justify-Black.png");
+}
+.html-editor-outdent,
+.html-editor-outdent:hover:armed {
+    -fx-graphic: url("HTMLEditor-Outdent-Black.png");
+}
+.html-editor-outdent:dir(rtl),
+.html-editor-outdent:hover:armed:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Outdent-Black-rtl.png");
+}
+.html-editor-indent,
+.html-editor-indent:hover:armed {
+    -fx-graphic: url("HTMLEditor-Indent-Black.png");
+}
+.html-editor-indent:dir(rtl),
+.html-editor-indent:hover:armed:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Indent-Black-rtl.png");
+}
+.html-editor-bullets,
+.html-editor-bullets:hover:armed,
+.html-editor-bullets:selected:armed {
+    -fx-graphic: url("HTMLEditor-Bullets-Black.png");
+}
+.html-editor-bullets:dir(rtl),
+.html-editor-bullets:hover:armed:dir(rtl),
+.html-editor-bullets:selected:armed:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Bullets-Black-rtl.png");
+}
+.html-editor-numbers,
+.html-editor-numbers:hover:armed,
+.html-editor-numbers:selected:armed {
+    -fx-graphic: url("HTMLEditor-Numbered-Black.png");
+}
+.html-editor-numbers:dir(rtl),
+.html-editor-numbers:hover:armed:dir(rtl),
+.html-editor-numbers:selected:armed:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Numbered-Black-rtl.png");
+}
+.html-editor-bold,
+.html-editor-bold:hover:armed,
+.html-editor-bold:selected:armed {
+    -fx-graphic: url("HTMLEditor-Bold-Black.png");
+}
+.html-editor-italic,
+.html-editor-italic:hover:armed,
+.html-editor-italic:selected:armed {
+    -fx-graphic: url("HTMLEditor-Italic-Black.png");
+}
+.html-editor-underline,
+.html-editor-underline:hover:armed,
+.html-editor-underline:selected:armed {
+    -fx-graphic: url("HTMLEditor-Underline-Black.png");
+}
+.html-editor-strike,
+.html-editor-strike:hover:armed,
+.html-editor-strike:selected:armed {
+    -fx-graphic: url("HTMLEditor-Strikethrough-Black.png");
+}
+.html-editor-hr,
+.html-editor-hr:hover:armed {
+    -fx-graphic: url("HTMLEditor-Break-Black.png");
+}
+.html-editor-foreground:hover {
+    -fx-graphic: url("HTMLEditor-Text-Color-White.png");
+}
+.html-editor-background:hover {
+    -fx-graphic: url("HTMLEditor-Background-Color-White.png");
+}
+.html-editor-cut:hover,
+.html-editor-cut:armed {
+    -fx-graphic: url("HTMLEditor-Cut-White.png");
+}
+.html-editor-copy:hover,
+.html-editor-copy:armed {
+    -fx-graphic: url("HTMLEditor-Copy-White.png");
+}
+.html-editor-paste:hover,
+.html-editor-paste:armed {
+    -fx-graphic: url("HTMLEditor-Paste-White.png");
+}
+.html-editor-align-left:hover,
+.html-editor-align-left:selected {
+    -fx-graphic: url("HTMLEditor-Left-White.png");
+}
+.html-editor-align-center:hover,
+.html-editor-align-center:selected {
+    -fx-graphic: url("HTMLEditor-Center-White.png");
+}
+.html-editor-align-right:hover,
+.html-editor-align-right:selected {
+    -fx-graphic: url("HTMLEditor-Right-White.png");
+}
+.html-editor-align-justify:hover,
+.html-editor-align-justify:selected {
+    -fx-graphic: url("HTMLEditor-Justify-White.png");
+}
+.html-editor-outdent:hover,
+.html-editor-outdent:armed {
+    -fx-graphic: url("HTMLEditor-Outdent-White.png");
+}
+.html-editor-indent:hover,
+.html-editor-indent:armed {
+    -fx-graphic: url("HTMLEditor-Indent-White.png");
+}
+.html-editor-bullets:hover,
+.html-editor-bullets:selected {
+    -fx-graphic: url("HTMLEditor-Bullets-White.png");
+}
+.html-editor-numbers:hover,
+.html-editor-numbers:selected {
+    -fx-graphic: url("HTMLEditor-Numbered-White.png");
+}
+.html-editor-bold:hover,
+.html-editor-bold:selected {
+    -fx-graphic: url("HTMLEditor-Bold-White.png");
+}
+.html-editor-italic:hover,
+.html-editor-italic:selected {
+    -fx-graphic: url("HTMLEditor-Italic-White.png");
+}
+.html-editor-underline:hover,
+.html-editor-underline:selected {
+    -fx-graphic: url("HTMLEditor-Underline-White.png");
+}
+.html-editor-strike:hover,
+.html-editor-strike:selected {
+    -fx-graphic: url("HTMLEditor-Strikethrough-White.png");
+}
+.html-editor-hr:hover,
+.html-editor-hr:armed {
+    -fx-graphic: url("HTMLEditor-Break-White.png");
+}
+/*******************************************************************************
+ *                                                                             *
+ * PopupMenu                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.context-menu {
+    -fx-background-color: -fx-hover-base, -fx-control-inner-background;
+    -fx-text-fill: red;
+}
+.context-menu > .scroll-arrow > .menu-up-arrow,
+.context-menu > .scroll-arrow > .menu-down-arrow {
+    -fx-background-color: -fx-hover-base;
+}
+.context-menu > .scroll-arrow:hover > .menu-up-arrow,
+.context-menu > .scroll-arrow:hover > .menu-down-arrow {
+    -fx-background-color: -fx-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * MenuBar                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+.menu-bar {
+    -fx-background-color: -fx-hover-base, -fx-base;
+    -fx-background-insets: 1 1 0 1, 1;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Menu                                                                        *
+ *                                                                             *
+ ******************************************************************************/
+.menu-up-arrow, .menu-down-arrow {
+    -fx-effect: null;
+}
+.menu > .right-container > .arrow {
+    -fx-background-color: -fx-hover-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * MenuItem                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+.menu-item >.label {
+    -fx-text-fill: -fx-hover-base;
+}
+.radio-menu-item:checked > .left-container > .radio,
+.check-menu-item:checked > .left-container > .check {
+    -fx-background-color: -fx-hover-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * TabPane                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+.tab-header-area {
+    -fx-text-box-border: -fx-base;
+}
+.tab-pane > .tab-header-area > .headers-region > .tab:selected:hover {
+    -fx-background-color: -fx-hover-base;
+}
+.tab-pane:focused > .tab-header-area > .headers-region > .tab:selected .focus-indicator {
+    -fx-border-width: 4;
+    -fx-border-color: -fx-focus-color;
+    -fx-border-insets: -4 -4 -7 -5;
+    -fx-border-radius: 1;
+}
+.tab-pane:focused > .tab-header-area > .headers-region > .tab:bottom:selected .focus-indicator {
+    -fx-border-insets: -7 -5 -4 -4;
+}
+.tab-pane:bottom > .tab-header-area > .tab-header-background,
+.tab-pane:left > .tab-header-area > .tab-header-background,
+.tab-pane:right > .tab-header-area > .tab-header-background {
+    -fx-background-insets: 0, 0 0 1 0, 1;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ComboBox                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+.combo-box-popup > .list-view {
+    -fx-background-color: -fx-outer-border, -fx-control-inner-background;
+}
+.combo-box-popup > .list-view > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:selected:hover {
+    -fx-text-fill: -fx-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * TitledPane                                                                  *
+ *                                                                             *
+ ******************************************************************************/
+.titled-pane > .title {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+.titled-pane:focused > .title {
+    -fx-background-color: -fx-faint-focus-color, -fx-focus-color, -fx-body-color;
+    -fx-background-insets: 0, 1, 4;
+}
+.titled-pane > .title:hover {
+    -fx-color: -fx-pressed-base;
+}
+.titled-pane > .title > .arrow-button > .arrow,
+.titled-pane:focused > .title > .arrow-button > .arrow {
+    -fx-background-color: -fx-mark-color;
+    -fx-background-insets: 0;
+    -fx-effect: null;
+}
+.titled-pane > .title:hover > .arrow-button > .arrow {
+    -fx-background-color: -fx-hover-base;
+    -fx-background-insets: 0;
+}
+/*******************************************************************************
+ *                                                                             *
+ * SplitPane                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.split-pane:horizontal > .split-pane-divider:hover {
+    -fx-background-color: -fx-box-border, -fx-hover-base;
+    -fx-background-insets: 0, 0 1 0 1;
+}
+.split-pane:vertical > .split-pane-divider:hover {
+    -fx-background-color: -fx-box-border, -fx-hover-base;
+    -fx-background-insets: 0, 1 0 1 0;
+}
+.split-pane:horizontal > .split-pane-divider:pressed {
+    -fx-background-color: -fx-box-border, -fx-pressed-base;
+    -fx-background-insets: 0, 0 1 0 1;
+}
+.split-pane:vertical > .split-pane-divider:pressed {
+    -fx-background-color: -fx-box-border, -fx-pressed-base;
+    -fx-background-insets: 0, 1 0 1 0;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ColorPicker                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+.color-palette {
+    -fx-background-color: -fx-hover-base, -fx-base;
+}
+.color-palette > .color-picker-grid > .color-square:selected {
+    -fx-background-color: -fx-hover-base;
+}
+.custom-color-dialog > .color-rect-pane #color-rect-indicator,
+.custom-color-dialog > .color-rect-pane > .color-bar > #color-bar-indicator {
+    -fx-border-width: 2;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Pagination                                                                  *
+ *                                                                             *
+ ******************************************************************************/
+.pagination > .pagination-control > .control-box > .number-button:selected {
+    -fx-background-color: transparent, -fx-hover-base, -fx-inner-border, -fx-body-color;
+}
+.pagination > .pagination-control > .control-box > .bullet-button:selected {
+    -fx-background-color: transparent, -fx-hover-base, -fx-inner-border, -fx-body-color;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Table Cells                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled > .check-box-table-cell:selected > .check-box > .box,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled > .check-box-table-cell:selected > .check-box > .box,
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:selected > .check-box-table-cell > .check-box > .box,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:selected > .check-box-table-cell > .check-box > .box {
+    -fx-background-color: -fx-base, -fx-background;
+}
+.table-view > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled > .check-box-table-cell:selected > .check-box > .box,
+.tree-table-view > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled > .check-box-table-cell:selected > .check-box > .box,
+.table-view > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:selected > .check-box-table-cell > .check-box > .box,
+.tree-table-view > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:selected > .check-box-table-cell > .check-box > .box {
+    -fx-background-color: -fx-hover-base, -fx-background;
+}
+/*******************************************************************************
+*                                                                              *
+* TableView                                                                    *
+*                                                                              *
+*******************************************************************************/
+.table-view,
+.tree-table-view {
+    /* Constants used throughout the tableview */
+    -fx-table-cell-border-color: derive(-fx-base, -30%);
+}
+/*******************************************************************************
+ *                                                                             *
+ * Tooltip                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+.tooltip {
+    -fx-background-color: -fx-hover-base, rgba(30, 30, 30, 0.8);
+    -fx-background-radius: 6px, 5px;
+    -fx-background-insets: 0, 1;
+    -fx-font-size: 1em;
+    -fx-font-weight: bold;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Charts                                                                      *
+ *                                                                             *
+ ******************************************************************************/
+.chart-legend {
+    -fx-background-color: -fx-hover-base, -fx-base;
+    -fx-background-insets: 0, 1;
+    -fx-background-radius: 4, 3;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Axis                                                                        *
+ *                                                                             *
+ ******************************************************************************/
+.axis {
+    AXIS_COLOR: -fx-dark-text-color;
+    -fx-tick-label-fill: -fx-hover-base;
+}
+/*******************************************************************************
+*                                                                              *
+* ChartPlot                                                                    *
+*                                                                              *
+*******************************************************************************/
+.chart-vertical-grid-lines,
+.chart-horizontal-grid-lines {
+    -fx-stroke: derive(-fx-base, -30%);
+}
+/*******************************************************************************
+ *                                                                             *
+ * ScatterChart, LineChart, AreaChart                                          *
+ *                                                                             *
+ ******************************************************************************/
+.default-color5.chart-symbol, /* hollow circle */
+.chart-line-symbol,
+.chart-area-symbol {
+    -fx-background-radius: 6px;
+    -fx-padding: 6px;
+}
+.chart-area-symbol {
+    -fx-background-color: #f9d900, black;
+    -fx-background-insets: 0, 2;
+}
+.default-color0.chart-area-symbol { -fx-background-color: CHART_COLOR_1, white; }
+.default-color1.chart-area-symbol { -fx-background-color: CHART_COLOR_2, white; }
+.default-color2.chart-area-symbol { -fx-background-color: CHART_COLOR_3, white; }
+.default-color3.chart-area-symbol { -fx-background-color: CHART_COLOR_4, white; }
+.default-color4.chart-area-symbol { -fx-background-color: CHART_COLOR_5, white; }
+.default-color5.chart-area-symbol { -fx-background-color: CHART_COLOR_6, white; }
+.default-color6.chart-area-symbol { -fx-background-color: CHART_COLOR_7, white; }
+.default-color7.chart-area-symbol { -fx-background-color: CHART_COLOR_8, white; }
+.chart-series-area-line {
+    -fx-stroke-width: 3px;
+}
+.default-color0.chart-series-area-fill { -fx-fill: CHART_COLOR_1_TRANS_20; }
+.default-color1.chart-series-area-fill { -fx-fill: CHART_COLOR_2_TRANS_20; }
+.default-color2.chart-series-area-fill { -fx-fill: CHART_COLOR_3_TRANS_20; }
+.default-color3.chart-series-area-fill { -fx-fill: CHART_COLOR_4_TRANS_20; }
+.default-color4.chart-series-area-fill { -fx-fill: CHART_COLOR_5_TRANS_20; }
+.default-color5.chart-series-area-fill { -fx-fill: CHART_COLOR_6_TRANS_20; }
+.default-color6.chart-series-area-fill { -fx-fill: CHART_COLOR_7_TRANS_20; }
+.default-color7.chart-series-area-fill { -fx-fill: CHART_COLOR_8_TRANS_20; }
+.area-legend-symbol {
+    -fx-background-insets: 0, 2;
+}
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1606511731074)
+++ .idea/vcs.xml	(date 1606511731074)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_it.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_it.properties	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_it.properties	(date 1547619874000)
@@ -0,0 +1,2 @@
+OverlayWarningESC = Premere ESC per disattivare la modalit\u00E0 schermo intero.
+OverlayWarningKey = Premere %s per disattivare la modalit\u00E0 schermo intero.
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/listmenu.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/listmenu.css	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/listmenu.css	(date 1580448308000)
@@ -0,0 +1,52 @@
+.list-menu {
+    -fx-graphic-fixed-size: 2em;
+}
+
+.list-menu .list-item {
+    -fx-cursor: hand;
+    -fx-padding: 10;
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0 0 -0.5 0, 0, 0.5, 1.5;
+}
+
+.list-menu .list-item .label {
+    -fx-text-fill: -fx-text-base-color;
+}
+
+.list-menu .list-item:active {
+    -fx-background-color: -fx-focus-color, -fx-inner-border, -fx-body-color, -fx-faint-focus-color, -fx-body-color;
+    -fx-background-insets: -0.2, 1, 2, -1.4, 2.6;
+}
+
+.list-menu .list-item:hover {
+    -fx-color: -fx-hover-base;
+}
+
+.list-menu .list-item:disabled {
+    -fx-opacity: 0.4;
+}
+
+.list-menu.blue {
+    -fx-graphic-fixed-size: 2.5em;
+    -fx-background-color: #1e88cf;
+}
+
+.list-menu.blue .list-item {
+    -fx-background-color: #1e88cf;
+}
+
+.list-menu.blue .list-item * {
+    -fx-fill: #fff;
+}
+
+.list-menu.blue .list-item:hover .graphic {
+    -fx-fill: #ddd;
+}
+
+.list-menu.blue .list-item:active {
+    -fx-background-color: #3da0e3;
+}
+
+.list-menu.blue .list-item:active:hover .graphic {
+    -fx-fill: #fff;
+}
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_ko.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_ko.properties	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_ko.properties	(date 1547619874000)
@@ -0,0 +1,2 @@
+OverlayWarningESC = \uC804\uCCB4 \uD654\uBA74 \uBAA8\uB4DC\uB97C \uC885\uB8CC\uD558\uB824\uBA74 ESC\uB97C \uB204\uB974\uC2ED\uC2DC\uC624.
+OverlayWarningKey = \uC804\uCCB4 \uD654\uBA74 \uBAA8\uB4DC\uB97C \uC885\uB8CC\uD558\uB824\uBA74 %s\uC744(\uB97C) \uB204\uB974\uC2ED\uC2DC\uC624.
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_zh_CN.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_zh_CN.properties	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_zh_CN.properties	(date 1547619874000)
@@ -0,0 +1,2 @@
+OverlayWarningESC = \u6309 ESC \u53EF\u9000\u51FA\u5168\u5C4F\u6A21\u5F0F\u3002
+OverlayWarningKey = \u6309 %s \u53EF\u9000\u51FA\u5168\u5C4F\u6A21\u5F0F\u3002
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/yellowOnBlack.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/yellowOnBlack.css	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/modena/yellowOnBlack.css	(date 1547619866000)
@@ -0,0 +1,658 @@
+/*
+ * Copyright (c) 2013, 2016, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*******************************************************************************
+ *                                                                             *
+ * "Yellow on Black" contrast theme.                                           *
+ *                                                                             *
+ ******************************************************************************/
+
+.root {
+    -fx-base: black;
+    -fx-background: -fx-base;
+    -fx-control-inner-background: -fx-base;
+    -fx-control-inner-background-alt: -fx-base;
+    -fx-faint-focus-color: -fx-accent;
+    -fx-hover-base: yellow;
+    -fx-pressed-base: derive(-fx-hover-base, -18%);
+    -fx-box-border: -fx-hover-base;
+    -fx-text-box-border: -fx-hover-base;
+    -fx-shadow-highlight-color: -fx-base;
+    -fx-outer-border: -fx-hover-base;
+    -fx-light-text-color: -fx-hover-base;
+    -fx-mark-color: ladder(
+        -fx-color,
+        yellow 30%,
+        derive(-fx-color,-63%) 31%
+    );
+    -fx-selection-bar-non-focused: derive(-fx-hover-base, -80%);
+    -fx-contrast-color: white;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Font Weight                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+.text,
+.text-input {
+    -fx-font-weight: bold;
+}
+.axis {
+    -fx-tick-label-font-weight: bold;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Label                                                                       *
+ *                                                                             *
+ ******************************************************************************/
+.label {
+    -fx-text-fill: -fx-hover-base;
+}
+/* ====   CHOICE BOX LIKE THINGS   ========================================== */
+.choice-box:hover > .label,
+.menu-button:hover > .label,
+.color-picker:hover > .label,
+.split-menu-button:hover > .label,
+.choice-box:showing > .label,
+.menu-button:armed > .label,
+.color-picker:showing > .label,
+.split-menu-button:armed > .label {
+    -fx-text-fill: -fx-mark-color;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ToggleButton                                                                *
+ *                                                                             *
+ ******************************************************************************/
+.toggle-button:selected,
+.toggle-button:selected:focused {
+    -fx-light-text-color: -fx-base;
+}
+.toggle-button:selected:armed,
+.toggle-button:selected:focused:armed {
+    -fx-mid-text-color: -fx-base;
+}
+.toggle-button:selected {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-hover-base, -fx-hover-base;
+}
+.toggle-button:selected:focused {
+    -fx-background-color: -fx-focus-color, -fx-hover-base, -fx-faint-focus-color, -fx-hover-base;
+}
+.toggle-button:selected:armed {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-hover-base, -fx-faint-focus-color, -fx-pressed-base;
+}
+.toggle-button:selected:focused:armed {
+    -fx-background-color: -fx-focus-color, -fx-hover-base, -fx-faint-focus-color, -fx-pressed-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Slider                                                                      *
+ *                                                                             *
+ ******************************************************************************/
+.slider .thumb {
+    -fx-background-color: -fx-hover-base, -fx-hover-base, -fx-body-color;
+}
+.slider:focused .thumb {
+    -fx-background-color: -fx-focus-color, -fx-hover-base, -fx-body-color, -fx-faint-focus-color, -fx-body-color;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ScrollBar                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.scroll-bar > .increment-button,
+.scroll-bar > .decrement-button {
+    -fx-background-color: -fx-outer-border, -fx-base, -fx-base;
+}
+.scroll-bar > .increment-button:hover,
+.scroll-bar > .decrement-button:hover {
+    -fx-background-color: -fx-outer-border, -fx-hover-base, -fx-hover-base;
+}
+.scroll-bar > .increment-button:hover > .increment-arrow,
+.scroll-bar > .decrement-button:hover > .decrement-arrow,
+.scroll-bar > .increment-button:hover:pressed > .increment-arrow,
+.scroll-bar > .decrement-button:hover:pressed > .decrement-arrow {
+    -fx-background-color: -fx-base, -fx-base;
+}
+.scroll-bar > .increment-button > .increment-arrow,
+.scroll-bar > .decrement-button > .decrement-arrow {
+    -fx-background-color: -fx-hover-base, -fx-hover-base;
+}
+.scroll-bar > .increment-button:hover:pressed,
+.scroll-bar > .decrement-button:hover:pressed {
+    -fx-background-color: -fx-outer-border, -fx-pressed-base, -fx-pressed-base;
+}
+.scroll-bar:horizontal > .decrement-button > .decrement-arrow,
+.scroll-bar:horizontal > .increment-button > .increment-arrow,
+.scroll-bar:vertical > .decrement-button > .decrement-arrow,
+.scroll-bar:vertical > .increment-button > .increment-arrow {
+    -fx-effect: null;
+}
+.scroll-bar > .thumb:pressed {
+    -fx-background-color: -fx-outer-border, -fx-pressed-base, -fx-pressed-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * HTML Editor                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+.html-editor-foreground {
+    -fx-graphic: url("HTMLEditor-Text-Color-Yellow.png");
+}
+.html-editor-background {
+    -fx-graphic: url("HTMLEditor-Background-Color-Yellow.png");
+}
+.html-editor-cut {
+    -fx-graphic: url("HTMLEditor-Cut-Yellow.png");
+}
+.html-editor-copy {
+    -fx-graphic: url("HTMLEditor-Copy-Yellow.png");
+}
+.html-editor-paste {
+    -fx-graphic: url("HTMLEditor-Paste-Yellow.png");
+}
+.html-editor-align-left {
+    -fx-graphic: url("HTMLEditor-Left-Yellow.png");
+}
+.html-editor-align-center {
+    -fx-graphic: url("HTMLEditor-Center-Yellow.png");
+}
+.html-editor-align-right {
+    -fx-graphic: url("HTMLEditor-Right-Yellow.png");
+}
+.html-editor-align-justify {
+    -fx-graphic: url("HTMLEditor-Justify-Yellow.png");
+}
+.html-editor-outdent {
+    -fx-graphic: url("HTMLEditor-Outdent-Yellow.png");
+}
+.html-editor-outdent:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Outdent-Yellow-rtl.png");
+}
+.html-editor-indent {
+    -fx-graphic: url("HTMLEditor-Indent-Yellow.png");
+}
+.html-editor-indent:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Indent-Yellow-rtl.png");
+}
+.html-editor-bullets {
+    -fx-graphic: url("HTMLEditor-Bullets-Yellow.png");
+}
+.html-editor-bullets:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Bullets-Yellow-rtl.png");
+}
+.html-editor-numbers {
+    -fx-graphic: url("HTMLEditor-Numbered-Yellow.png");
+}
+.html-editor-numbers:dir(rtl) {
+    -fx-graphic: url("HTMLEditor-Numbered-Yellow-rtl.png");
+}
+.html-editor-bold {
+    -fx-graphic: url("HTMLEditor-Bold-Yellow.png");
+}
+.html-editor-italic {
+    -fx-graphic: url("HTMLEditor-Italic-Yellow.png");
+}
+.html-editor-underline {
+    -fx-graphic: url("HTMLEditor-Underline-Yellow.png");
+}
+.html-editor-strike {
+    -fx-graphic: url("HTMLEditor-Strikethrough-Yellow.png");
+}
+.html-editor-hr {
+    -fx-graphic: url("HTMLEditor-Break-Yellow.png");
+}
+.html-editor-foreground:hover,
+.html-editor-foreground:showing:hover {
+    -fx-graphic: url("HTMLEditor-Text-Color-Black.png");
+}
+.html-editor-background:hover,
+.html-editor-background:showing:hover {
+    -fx-graphic: url("HTMLEditor-Background-Color-Black.png");
+}
+.html-editor-cut:hover,
+.html-editor-cut:armed,
+.html-editor-cut:hover:armed {
+    -fx-graphic: url("HTMLEditor-Cut-Black.png");
+}
+.html-editor-copy:hover,
+.html-editor-copy:armed,
+.html-editor-copy:hover:armed {
+    -fx-graphic: url("HTMLEditor-Copy-Black.png");
+}
+.html-editor-paste:hover,
+.html-editor-paste:armed,
+.html-editor-paste:hover:armed {
+    -fx-graphic: url("HTMLEditor-Paste-Black.png");
+}
+.html-editor-align-left:hover,
+.html-editor-align-left:selected,
+.html-editor-align-left:hover:armed,
+.html-editor-align-left:selected:armed {
+    -fx-graphic: url("HTMLEditor-Left-Black.png");
+}
+.html-editor-align-center:hover,
+.html-editor-align-center:selected,
+.html-editor-align-center:hover:armed,
+.html-editor-align-center:selected:armed {
+    -fx-graphic: url("HTMLEditor-Center-Black.png");
+}
+.html-editor-align-right:hover,
+.html-editor-align-right:selected,
+.html-editor-align-right:hover:armed,
+.html-editor-align-right:selected:armed {
+    -fx-graphic: url("HTMLEditor-Right-Black.png");
+}
+.html-editor-align-justify:hover,
+.html-editor-align-justify:selected,
+.html-editor-align-justify:hover:armed,
+.html-editor-align-justify:selected:armed {
+    -fx-graphic: url("HTMLEditor-Justify-Black.png");
+}
+.html-editor-outdent:hover,
+.html-editor-outdent:armed,
+.html-editor-outdent:hover:armed {
+    -fx-graphic: url("HTMLEditor-Outdent-Black.png");
+}
+.html-editor-indent:hover,
+.html-editor-indent:armed,
+.html-editor-indent:hover:armed {
+    -fx-graphic: url("HTMLEditor-Indent-Black.png");
+}
+.html-editor-bullets:hover,
+.html-editor-bullets:selected,
+.html-editor-bullets:hover:armed,
+.html-editor-bullets:selected:armed {
+    -fx-graphic: url("HTMLEditor-Bullets-Black.png");
+}
+.html-editor-numbers:hover,
+.html-editor-numbers:selected,
+.html-editor-numbers:hover:armed,
+.html-editor-numbers:selected:armed {
+    -fx-graphic: url("HTMLEditor-Numbered-Black.png");
+}
+.html-editor-bold:hover,
+.html-editor-bold:selected,
+.html-editor-bold:hover:armed,
+.html-editor-bold:selected:armed {
+    -fx-graphic: url("HTMLEditor-Bold-Black.png");
+}
+.html-editor-italic:hover,
+.html-editor-italic:selected,
+.html-editor-italic:hover:armed,
+.html-editor-italic:selected:armed {
+    -fx-graphic: url("HTMLEditor-Italic-Black.png");
+}
+.html-editor-underline:hover,
+.html-editor-underline:selected,
+.html-editor-underline:hover:armed,
+.html-editor-underline:selected:armed {
+    -fx-graphic: url("HTMLEditor-Underline-Black.png");
+}
+.html-editor-strike:hover,
+.html-editor-strike:selected,
+.html-editor-strike:hover:armed,
+.html-editor-strike:selected:armed {
+    -fx-graphic: url("HTMLEditor-Strikethrough-Black.png");
+}
+.html-editor-hr:hover,
+.html-editor-hr:armed,
+.html-editor-hr:hover:armed {
+    -fx-graphic: url("HTMLEditor-Break-Black.png");
+}
+/*******************************************************************************
+ *                                                                             *
+ * PopupMenu                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.context-menu {
+    -fx-background-color: -fx-hover-base, -fx-control-inner-background;
+}
+.context-menu > .scroll-arrow > .menu-up-arrow,
+.context-menu > .scroll-arrow > .menu-down-arrow {
+    -fx-background-color: -fx-hover-base;
+}
+.context-menu > .scroll-arrow:hover > .menu-up-arrow,
+.context-menu > .scroll-arrow:hover > .menu-down-arrow {
+    -fx-background-color: -fx-contrast-color;
+}
+/*******************************************************************************
+ *                                                                             *
+ * MenuBar                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+.menu-bar {
+    -fx-background-color: -fx-hover-base, -fx-base;
+    -fx-background-insets: 1 1 0 1, 1;
+}
+.menu-bar > .container > .menu-button:hover > .label,
+.menu-bar > .container > .menu-button:focused > .label,
+.menu-bar > .container > .menu-button:showing  > .label {
+    -fx-text-fill: -fx-contrast-color !important;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Menu                                                                        *
+ *                                                                             *
+ ******************************************************************************/
+.menu:focused > .right-container > .arrow {
+    -fx-background-color: -fx-contrast-color;
+}
+.menu-up-arrow, .menu-down-arrow {
+    -fx-effect: null;
+}
+.menu > .right-container > .arrow {
+    -fx-background-color: -fx-hover-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * MenuItem                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+.menu-item >.label {
+    -fx-text-fill: -fx-hover-base;
+}
+.menu-item:focused > .label {
+    -fx-text-fill: -fx-contrast-color;
+}
+.radio-menu-item:checked > .left-container > .radio,
+.check-menu-item:checked > .left-container > .check {
+    -fx-background-color: -fx-hover-base;
+}
+.radio-menu-item:focused:checked > .left-container > .radio,
+.check-menu-item:focused:checked > .left-container > .check {
+    -fx-background-color: -fx-contrast-color;
+}
+/*******************************************************************************
+ *                                                                             *
+ * TabPane                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+.tab-header-area {
+    -fx-text-box-border: -fx-base;
+}
+.tab-pane > .tab-header-area > .headers-region > .tab:selected:hover {
+    -fx-background-color: -fx-hover-base;
+}
+.tab-pane:focused > .tab-header-area > .headers-region > .tab:selected .focus-indicator {
+    -fx-border-width: 4;
+    -fx-border-color: -fx-focus-color;
+    -fx-border-insets: -4 -4 -7 -5;
+    -fx-border-radius: 1;
+}
+.tab-pane:focused > .tab-header-area > .headers-region > .tab:bottom:selected .focus-indicator {
+    -fx-border-insets: -7 -5 -4 -4;
+}
+.tab-pane:bottom > .tab-header-area > .tab-header-background,
+.tab-pane:left > .tab-header-area > .tab-header-background,
+.tab-pane:right > .tab-header-area > .tab-header-background {
+    -fx-background-insets: 0, 0 0 1 0, 1;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ComboBox                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+.combo-box-popup > .list-view {
+    -fx-background-color: -fx-outer-border, -fx-control-inner-background;
+}
+.combo-box-popup > .list-view > .virtual-flow > .clipped-container > .sheet > .list-cell:filled {
+    -fx-text-fill: -fx-hover-base;
+}
+.combo-box-popup > .list-view > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:hover {
+    -fx-text-fill: -fx-contrast-color;
+}
+/*******************************************************************************
+ *                                                                             *
+ * TitledPane                                                                  *
+ *                                                                             *
+ ******************************************************************************/
+.titled-pane > .title {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+.titled-pane:focused > .title {
+    -fx-background-color: -fx-faint-focus-color, -fx-focus-color, -fx-body-color;
+    -fx-background-insets: 0, 1, 4;
+}
+.titled-pane > .title:hover {
+    -fx-color: -fx-base;
+}
+.titled-pane > .title > .arrow-button > .arrow,
+.titled-pane:focused > .title > .arrow-button > .arrow {
+    -fx-background-color: -fx-mark-color;
+    -fx-background-insets: 0;
+    -fx-effect: null;
+}
+.titled-pane > .title:hover > .arrow-button > .arrow {
+    -fx-background-color: derive(-fx-hover-base, -50%);
+    -fx-background-insets: 0;
+}
+/*******************************************************************************
+ *                                                                             *
+ * SplitPane                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.split-pane:horizontal > .split-pane-divider:hover {
+    -fx-background-color: -fx-box-border, -fx-hover-base;
+    -fx-background-insets: 0, 0 1 0 1;
+}
+.split-pane:vertical > .split-pane-divider:hover {
+    -fx-background-color: -fx-box-border, -fx-hover-base;
+    -fx-background-insets: 0, 1 0 1 0;
+}
+.split-pane:horizontal > .split-pane-divider:pressed {
+    -fx-background-color: -fx-box-border, -fx-pressed-base;
+    -fx-background-insets: 0, 0 1 0 1;
+}
+.split-pane:vertical > .split-pane-divider:pressed {
+    -fx-background-color: -fx-box-border, -fx-pressed-base;
+    -fx-background-insets: 0, 1 0 1 0;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ColorPicker                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+.color-palette {
+    -fx-background-color: -fx-hover-base, -fx-base;
+}
+.color-palette > .color-picker-grid > .color-square:selected {
+    -fx-background-color: -fx-hover-base;
+}
+.custom-color-dialog .color-rect-pane .color-rect-border,
+.custom-color-dialog > .color-rect-pane > .color-bar,
+.custom-color-dialog .controls-pane .current-new-color-grid #current-new-color-border {
+    -fx-border-color: derive(-fx-hover-base, -20%);
+}
+.custom-color-dialog > .color-rect-pane #color-rect-indicator,
+.custom-color-dialog > .color-rect-pane > .color-bar > #color-bar-indicator {
+    -fx-border-color: -fx-hover-base;
+    -fx-border-width: 2;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Pagination                                                                  *
+ *                                                                             *
+ ******************************************************************************/
+.pagination > .pagination-control > .control-box > .number-button:selected {
+    -fx-background-color: transparent, -fx-hover-base, -fx-inner-border, -fx-body-color;
+    -fx-text-fill: -fx-contrast-color;
+}
+.pagination > .pagination-control > .control-box > .number-button:selected:hover:armed {
+    -fx-background-color: transparent, -fx-hover-base, -fx-inner-border, -fx-body-color;
+}
+.pagination > .pagination-control > .control-box > .number-button:selected:hover {
+    -fx-background-color: transparent, -fx-hover-base, -fx-hover-base, -fx-hover-base;
+    -fx-text-fill: -fx-dark-text-color;
+}
+.pagination > .pagination-control > .control-box > .bullet-button:selected,
+.pagination > .pagination-control > .control-box > .bullet-button:selected:hover:armed {
+    -fx-background-color: transparent, -fx-hover-base, -fx-inner-border, -fx-body-color;
+}
+/*******************************************************************************
+*                                                                              *
+* TextField                                                                    *
+*                                                                              *
+*******************************************************************************/
+.text-field {
+    -fx-prompt-text-fill: derive(-fx-hover-base,-30%);
+}
+/*******************************************************************************
+*                                                                              *
+* List, Tree, Table COMMON                                                     *
+*                                                                              *
+*******************************************************************************/
+/* Selected rows */
+.list-view:focused > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:selected,
+.tree-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-cell:filled:selected,
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:selected,
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell .table-cell:filled:selected,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:selected,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell .tree-table-cell:filled:selected {
+    -fx-text-fill: -fx-contrast-color;
+}
+/*******************************************************************************
+*                                                                              *
+* TreeView and TreeCell                                                        *
+*                                                                              *
+*******************************************************************************/
+.tree-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-cell:filled:selected > .tree-disclosure-node > .arrow,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:selected > .tree-disclosure-node > .arrow {
+    -fx-background-color: -fx-contrast-color;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Table Cells                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled > .check-box-table-cell:selected > .check-box > .box,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled > .check-box-table-cell:selected > .check-box > .box,
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:selected > .check-box-table-cell > .check-box > .box,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:selected > .check-box-table-cell > .check-box > .box {
+    -fx-background-color: -fx-contrast-color, -fx-background;
+}
+.table-view > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled > .check-box-table-cell:selected > .check-box > .box,
+.tree-table-view > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled > .check-box-table-cell:selected > .check-box > .box,
+.table-view > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:selected > .check-box-table-cell > .check-box > .box,
+.tree-table-view > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:selected > .check-box-table-cell > .check-box > .box {
+    -fx-background-color: -fx-hover-base, -fx-background;
+}
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:selected > .check-box-table-cell > .check-box:selected > .box > .mark,
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell > .table-cell:filled:selected > .check-box-table-cell > .check-box:selected > .box > .mark {
+    -fx-background-color: -fx-contrast-color !important;
+}
+/*******************************************************************************
+*                                                                              *
+* TableView                                                                    *
+*                                                                              *
+*******************************************************************************/
+.table-view,
+.tree-table-view {
+    -fx-table-cell-border-color: derive(-fx-hover-base, -30%);
+}
+/*******************************************************************************
+ *                                                                             *
+ * Tooltip                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+.tooltip {
+    -fx-background-color: -fx-hover-base, rgba(30, 30, 30, 0.8);
+    -fx-background-radius: 6px, 5px;
+    -fx-background-insets: 0, 1;
+    -fx-text-fill: -fx-hover-base;
+    -fx-font-size: 1em;
+    -fx-font-weight: bold;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Charts                                                                      *
+ *                                                                             *
+ ******************************************************************************/
+.chart-legend {
+    -fx-background-color: -fx-hover-base, -fx-base;
+    -fx-background-insets: 0, 1;
+    -fx-background-radius: 4, 3;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Axis                                                                        *
+ *                                                                             *
+ ******************************************************************************/
+.axis {
+    AXIS_COLOR: -fx-light-text-color;
+    -fx-tick-label-fill: -fx-hover-base;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ChartPlot                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.chart-vertical-grid-lines,
+.chart-horizontal-grid-lines {
+    -fx-stroke: derive(-fx-hover-base, -30%);
+}
+/*******************************************************************************
+ *                                                                             *
+ * ScatterChart, LineChart, AreaChart, PieChart                                *
+ *                                                                             *
+ ******************************************************************************/
+.default-color5.chart-symbol, /* hollow circle */
+.chart-line-symbol,
+.chart-area-symbol {
+    -fx-background-radius: 6px;
+    -fx-padding: 6px;
+}
+.chart-area-symbol {
+    -fx-background-color: #f9d900, black;
+    -fx-background-insets: 0, 2;
+}
+.default-color0.chart-area-symbol { -fx-background-color: CHART_COLOR_1, white; }
+.default-color1.chart-area-symbol { -fx-background-color: CHART_COLOR_2, white; }
+.default-color2.chart-area-symbol { -fx-background-color: CHART_COLOR_3, white; }
+.default-color3.chart-area-symbol { -fx-background-color: CHART_COLOR_4, white; }
+.default-color4.chart-area-symbol { -fx-background-color: CHART_COLOR_5, white; }
+.default-color5.chart-area-symbol { -fx-background-color: CHART_COLOR_6, white; }
+.default-color6.chart-area-symbol { -fx-background-color: CHART_COLOR_7, white; }
+.default-color7.chart-area-symbol { -fx-background-color: CHART_COLOR_8, white; }
+.chart-series-area-line {
+    -fx-stroke-width: 3px;
+}
+.default-color0.chart-series-area-fill { -fx-fill: CHART_COLOR_1_TRANS_20; }
+.default-color1.chart-series-area-fill { -fx-fill: CHART_COLOR_2_TRANS_20; }
+.default-color2.chart-series-area-fill { -fx-fill: CHART_COLOR_3_TRANS_20; }
+.default-color3.chart-series-area-fill { -fx-fill: CHART_COLOR_4_TRANS_20; }
+.default-color4.chart-series-area-fill { -fx-fill: CHART_COLOR_5_TRANS_20; }
+.default-color5.chart-series-area-fill { -fx-fill: CHART_COLOR_6_TRANS_20; }
+.default-color6.chart-series-area-fill { -fx-fill: CHART_COLOR_7_TRANS_20; }
+.default-color7.chart-series-area-fill { -fx-fill: CHART_COLOR_8_TRANS_20; }
+.area-legend-symbol {
+    -fx-background-insets: 0, 2;
+}
+.chart-pie-label-line {
+    -fx-stroke: -fx-hover-base;
+}
+.chart-pie-label {
+    -fx-fill: -fx-hover-base;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_es.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_es.properties	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_es.properties	(date 1547619874000)
@@ -0,0 +1,2 @@
+OverlayWarningESC = Pulse ESC para salir del modo de pantalla completa.
+OverlayWarningKey = Pulse %s para salir del modo de pantalla completa.
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle.properties	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle.properties	(date 1547619874000)
@@ -0,0 +1,2 @@
+OverlayWarningESC = Press ESC to exit full-screen mode.
+OverlayWarningKey = Press %s to exit full-screen mode.
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/highcontrast.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/highcontrast.css	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/highcontrast.css	(date 1547619866000)
@@ -0,0 +1,91 @@
+/*
+ * Copyright (c) 2011, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ *  Document   : highcontrast
+ */
+
+/********************************************************************************
+ *                                                                              *
+ * 508 Compliance:                                                              *
+ * The CSS Styles used in this file provide a contrast ratio of at least 4.5:1  *
+ * for text and its background, per WCAG2.0 guidelines. See also W3C G18.       *
+ *                                                                              *
+ *******************************************************************************/
+
+
+/* ###### HIGH-CONTRAST COLOR THEME ##################################################### */
+
+.scene {
+    -fx-accent: #6ECFFF;
+    -fx-mid-text-color: black;
+    -fx-selection-bar: linear-gradient( from 0% 0% to 0% 100%, -fx-background 7%, derive(-fx-background,-15%) 100% );
+}
+
+
+.menu-item:focused .label {
+    -fx-text-fill: black;
+}
+
+
+.radio-menu-item:focused:checked .radio {
+    -fx-background-color: black;
+}
+
+
+ .check-menu-item:focused:checked .check {
+    -fx-background-color: black;
+}
+
+
+.menu:selected .arrow {
+    -fx-background-color: black;
+}
+
+
+.toggle-button:selected {
+    -fx-background-color:
+            -fx-shadow-highlight-color,
+            linear-gradient( from 0% 0% to 0% 100%, derive(-fx-color,-90%) 0%, derive(-fx-color,-60%) 100%),
+/*          the next line of code paints the dark vertical gradient from the top to the bottom of the selected button */
+            linear-gradient( from 0% 0% to 0% 100%, derive(-fx-color,-80%) 0%, derive(-fx-color,-65%) 45%, derive(-fx-color,-50%) 99%, derive(-fx-color,-60%) 100%),
+/*          the next line of code paints the dark horizontal gradient from the left and right edges toward the center of the selected button */
+            linear-gradient( from 0% 0% to 100% 0%, rgba(0,0,0,0.3) 0%, rgba(0,0,0,0) 10%, rgba(0,0,0,0) 90%, rgba(0,0,0,0.3) 100%);
+        -fx-background-insets: 0 0 -1 0, 0, 1, 1;
+        -fx-text-fill: white;
+    }
+
+.toggle-button:selected:focused {
+    -fx-color: -fx-focused-base;
+    -fx-background-color:
+            -fx-focus-color,
+            linear-gradient( from 0% 0% to 0% 100%, derive(-fx-color,-90%) 0%, derive(-fx-color,-60%) 100%),
+/*          the next line of code paints the dark vertical gradient from the top to the bottom of the selected button */
+            linear-gradient( from 0% 0% to 0% 100%, derive(-fx-color,-80%) 0%, derive(-fx-color,-65%) 45%, derive(-fx-color,-50%) 99%, derive(-fx-color,-60%) 100%),
+/*          the next line of code paints the dark horizontal gradient from the left and right edges toward the center of the selected button */
+            linear-gradient( from 0% 0% to 100% 0%, rgba(0,0,0,0.3) 0%, rgba(0,0,0,0) 10%, rgba(0,0,0,0) 90%, rgba(0,0,0,0.3) 100%);
+        -fx-background-insets: -1.4, 0, 1, 1;
+    }
+
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_sv.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_sv.properties	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/tk/quantum/QuantumMessagesBundle_sv.properties	(date 1547619874000)
@@ -0,0 +1,2 @@
+OverlayWarningESC = Tryck p\u00E5 ESC f\u00F6r att st\u00E4nga helsk\u00E4rmsl\u00E4get.
+OverlayWarningKey = Tryck p\u00E5 %s f\u00F6r att st\u00E4nga helsk\u00E4rmsl\u00E4get.
Index: build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/org.glassfish/javax.json/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/org.glassfish/javax.json/pom.xml	(date 1509637864000)
+++ build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/org.glassfish/javax.json/pom.xml	(date 1509637864000)
@@ -0,0 +1,173 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
+
+    Copyright (c) 2011-2017 Oracle and/or its affiliates. All rights reserved.
+
+    The contents of this file are subject to the terms of either the GNU
+    General Public License Version 2 only ("GPL") or the Common Development
+    and Distribution License("CDDL") (collectively, the "License").  You
+    may not use this file except in compliance with the License.  You can
+    obtain a copy of the License at
+    https://oss.oracle.com/licenses/CDDL+GPL-1.1
+    or LICENSE.txt.  See the License for the specific
+    language governing permissions and limitations under the License.
+
+    When distributing the software, include this License Header Notice in each
+    file and include the License file at LICENSE.txt.
+
+    GPL Classpath Exception:
+    Oracle designates this particular file as subject to the "Classpath"
+    exception as provided by Oracle in the GPL Version 2 section of the License
+    file that accompanied this code.
+
+    Modifications:
+    If applicable, add the following below the License Header, with the fields
+    enclosed by brackets [] replaced by your own identifying information:
+    "Portions Copyright [year] [name of copyright owner]"
+
+    Contributor(s):
+    If you wish your version of this file to be governed by only the CDDL or
+    only the GPL Version 2, indicate your decision by adding "[Contributor]
+    elects to include this software in this distribution under the [CDDL or GPL
+    Version 2] license."  If you don't indicate a single choice of license, a
+    recipient has the option to distribute your version of this file under
+    either the CDDL, the GPL Version 2 or to extend the choice of license to
+    its licensees as provided above.  However, if you add GPL Version 2 code
+    and therefore, elected the GPL Version 2 license, then the option applies
+    only if the new code is made subject to such option by the copyright
+    holder.
+
+-->
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>org.glassfish</groupId>
+        <artifactId>json</artifactId>
+        <version>1.1.2</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>
+
+    <groupId>org.glassfish</groupId>
+    <artifactId>javax.json</artifactId>
+    <packaging>bundle</packaging>
+    <version>1.1.2</version>
+    <name>JSR 374 (JSON Processing) Default Provider</name>
+    <description>Default provider for JSR 374:Java API for Processing JSON</description>
+    <url>https://javaee.github.io/jsonp</url>
+
+    <properties>
+        <packages.private>org.glassfish.json</packages.private>
+        <packages.export>org.glassfish.json.api</packages.export>
+    </properties>
+
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.glassfish.build</groupId>
+                <artifactId>spec-version-maven-plugin</artifactId>
+                <configuration>
+                    <spec>
+                        <nonFinal>${non.final}</nonFinal>
+                        <jarType>impl</jarType>
+                        <specVersion>${spec_version}</specVersion>
+                        <newSpecVersion>${new_spec_version}</newSpecVersion>
+                        <specImplVersion>${new_spec_impl_version}</specImplVersion>
+                        <implVersion>${impl_version}</implVersion>
+                        <newImplVersion>${new_impl_version}</newImplVersion>
+                        <apiPackage>${api_package}</apiPackage>
+                        <implNamespace>${impl_namespace}</implNamespace>
+                    </spec>
+                </configuration>
+                <executions>
+                    <execution>
+                        <goals>
+                            <goal>set-spec-properties</goal>
+                            <goal>check-module</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-javadoc-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>attach-javadocs</id>
+                        <goals>
+                            <goal>jar</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+            <!--
+              This plugin is reponsible for packaging artifacts
+              as OSGi bundles.  Please refer to
+              http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html
+              for more information about how to use this plugin.
+            -->
+            <plugin>
+                <groupId>org.apache.felix</groupId>
+                <artifactId>maven-bundle-plugin</artifactId>
+                <extensions>true</extensions>
+                <configuration>
+                    <instructions>
+                        <Bundle-Version>${spec.bundle.version}</Bundle-Version>
+                        <Bundle-SymbolicName>${spec.bundle.symbolic-name}</Bundle-SymbolicName>
+                        <Extension-Name>${spec.extension.name}</Extension-Name>
+                        <Implementation-Version>${spec.implementation.version}</Implementation-Version>
+                        <Specification-Version>${spec.specification.version}</Specification-Version>
+                        <Export-Package>${packages.export}</Export-Package>
+                        <Private-Package>${packages.private}</Private-Package>
+                    </instructions>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
+    <dependencies>
+        <dependency>
+            <groupId>javax.json</groupId>
+            <artifactId>javax.json-api</artifactId>
+        </dependency>
+    </dependencies>
+
+    <profiles>
+        <profile>
+            <id>jdk9-setup</id>
+            <activation>
+                <jdk>9</jdk>
+            </activation>
+            <build>
+                <plugins>
+                    <plugin>
+                        <groupId>org.apache.maven.plugins</groupId>
+                        <artifactId>maven-javadoc-plugin</artifactId>
+                        <configuration>
+                            <!--
+                               workaround for https://issues.apache.org/jira/browse/MJAVADOC-489
+                            -->
+                            <additionalJOptions>
+                                <additionalJOption>--add-modules</additionalJOption>
+                                <additionalJOption>java.json</additionalJOption>
+                                <additionalJOption>--module-path</additionalJOption>
+                                <additionalJOption>${project.build.directory}/../../api/target/javax.json-api-${project.version}.jar</additionalJOption>
+                            </additionalJOptions>
+                        </configuration>
+                    </plugin>
+                    <plugin>
+                        <groupId>org.apache.felix</groupId>
+                        <artifactId>maven-bundle-plugin</artifactId>
+                        <configuration>
+                            <instructions>
+                                <Include-Resource>target/classes/module-info.class</Include-Resource>
+                            </instructions>
+                        </configuration>
+                    </plugin>
+                </plugins>
+            </build>
+        </profile>
+    </profiles>
+</project>
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/two-level-focus.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/two-level-focus.css	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/two-level-focus.css	(date 1547619866000)
@@ -0,0 +1,125 @@
+/*
+ * Copyright (c) 2009, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+ /*******************************************************************************
+ *                                                                             *
+ * 2-level focus setting for Caspian                                           *
+ *                                                                             *
+ ******************************************************************************/
+
+/*******************************************************************************
+ *                                                                             *
+ * ChoiceBox                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.choice-box:showing {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+/*******************************************************************************
+ *                                                                             *
+ * TextField                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.text-input:focused:internal-focus {
+    -fx-highlight-fill: -fx-accent;
+    -fx-highlight-text-fill: white;
+}
+.text-input:focused:external-focus {
+    -fx-highlight-fill: -fx-control-inner-background;
+    -fx-highlight-text-fill: -fx-text-inner-color;
+}
+.text-field:focused:external-focus {
+    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);
+}
+.text-field:focused:internal-focus {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-prompt-text-fill: transparent;
+}
+/*******************************************************************************
+ *                                                                             *
+ * TextArea                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+.text-area:focused:internal-focus {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-text-box-border, -fx-control-inner-background;
+}
+.text-area:focused:external-focus {
+    -fx-background-color: -fx-focus-color, -fx-text-box-border, -fx-control-inner-background;
+}
+/*******************************************************************************
+ *                                                                             *
+ * Slider                                                                      *
+ *                                                                             *
+ ******************************************************************************/
+.slider {
+    -fx-padding: 5;
+}
+.slider:focused:external-focus {
+    -fx-background-color: -fx-focus-color, -fx-control-inner-background;
+    -fx-background-insets: -0.4, 1;
+    -fx-background-radius: 3.4, 2;
+}
+.slider:focused:internal-focus {
+    -fx-background-color: transparent;
+}
+.slider:focused:external-focus .thumb {
+    -fx-background-color:
+        derive(-fx-color,-36%),
+        derive(-fx-color,73%),
+        linear-gradient(to bottom, derive(-fx-color,-19%),derive(-fx-color,61%));
+    -fx-background-insets: 0, 1, 2;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ListView, TableView                                                         *
+ *                                                                             *
+ ******************************************************************************/
+.list-view:focused:external-focus > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:selected,
+.table-view:focused:external-focus > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:selected,
+.table-view:focused:external-focus > .virtual-flow > .clipped-container > .sheet > .table-row-cell > .table-cell:selected,
+.table-view:row-selection:focused:external-focus > .virtual-flow > .clipped-container > .sheet > .table-row-cell:selected:filled {
+    -fx-background-color: lightgray;
+    -fx-background: -fx-control-inner-background;
+    -fx-text-fill: -fx-text-inner-color;
+}
+.list-view:focused:internal-focus,
+.table-view:focused:internal-focus {
+    -fx-background-color: -fx-box-border, -fx-control-inner-background;
+    -fx-background-insets: 0, 1;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ComboBox                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+.combo-box-base:focused:showing  {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-radius: 5, 5, 4, 3;
+    -fx-background-insets: 0 0 -1 0, 0, 1, 2;
+    -fx-padding: 0;
+}
+.combo-box-base:editable:focused:showing > .text-field:focused {
+    -fx-prompt-text-fill: transparent;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/no.tornado/tornadofx/pom.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/no.tornado/tornadofx/pom.properties	(date 1580448364000)
+++ build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/no.tornado/tornadofx/pom.properties	(date 1580448364000)
@@ -0,0 +1,4 @@
+#Created by Apache Maven 3.6.0
+version=1.7.20
+groupId=no.tornado
+artifactId=tornadofx
Index: build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/org.jetbrains/annotations/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/org.jetbrains/annotations/pom.xml	(date 1387197612000)
+++ build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/org.jetbrains/annotations/pom.xml	(date 1387197612000)
@@ -0,0 +1,139 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project
+        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
+        xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
+
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>org.jetbrains</groupId>
+    <artifactId>annotations</artifactId>
+    <version>13.0</version>
+    <packaging>jar</packaging>
+
+    <name>IntelliJ IDEA Annotations</name>
+    <description>A set of annotations used for code inspection support and code documentation.</description>
+    <url>http://www.jetbrains.org</url>
+
+    <licenses>
+        <license>
+            <name>The Apache Software License, Version 2.0</name>
+            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
+            <distribution>repo</distribution>
+            <comments>A business-friendly OSS license</comments>
+        </license>
+    </licenses>
+
+    <scm>
+        <url>https://github.com/JetBrains/intellij-community</url>
+        <connection>scm:git:https://github.com/JetBrains/intellij-community.git</connection>
+    </scm>
+
+    <developers>
+        <developer>
+            <id>JetBrains</id>
+            <name>JetBrains Team</name>
+            <organization>JetBrains</organization>
+            <organizationUrl>http://www.jetbrains.com</organizationUrl>
+        </developer>
+    </developers>
+
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+    <build>
+        <plugins>
+            <plugin>
+                <artifactId>maven-antrun-plugin</artifactId>
+                <version>1.7</version>
+                <executions>
+                    <execution>
+                        <phase>generate-sources</phase>
+                        <configuration>
+                            <tasks>
+                                <delete dir="${basedir}/src/main/java" />
+                                <mkdir dir="${basedir}/src/main/java" />
+                                <copy todir="${basedir}/src/main/java">
+                                    <fileset dir="${basedir}/../../../community/platform/annotations/src" />
+                                </copy>
+                            </tasks>
+                        </configuration>
+                        <goals>
+                            <goal>run</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-source-plugin</artifactId>
+                <version>2.1.2</version>
+
+                <executions>
+                    <execution>
+                        <id>attach-sources</id>
+                        <goals>
+                            <goal>jar</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.1</version>
+                <configuration>
+                    <source>1.5</source>
+                    <target>1.5</target>
+                </configuration>
+            </plugin>
+
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-javadoc-plugin</artifactId>
+                <version>2.9.1</version>
+                <executions>
+                    <execution>
+                        <id>attach-javadocs</id>
+                        <goals>
+                            <goal>jar</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+
+            <plugin>
+                <artifactId>maven-gpg-plugin</artifactId>
+                <version>1.4</version>
+                <configuration>
+                    <keyname>66770193</keyname>
+                    <homedir>${basedir}/.gnupg</homedir>
+                </configuration>
+                <executions>
+                    <execution>
+                        <id>sign-artifacts</id>
+                        <phase>verify</phase>
+                        <goals>
+                            <goal>sign</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+
+        </plugins>
+    </build>
+
+    <distributionManagement>
+        <repository>
+            <id>sonatype-nexus-staging</id>
+            <url>http://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
+        </repository>
+        <snapshotRepository>
+            <id>sonatype-nexus-snapshots</id>
+            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
+        </snapshotRepository>
+    </distributionManagement>
+
+</project>
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/embedded.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/embedded.css	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/embedded.css	(date 1547619866000)
@@ -0,0 +1,266 @@
+/*
+ * Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*******************************************************************************
+ *                                                                             *
+ * CSS Styles for embedded devices. These styles either override or            *
+ * supplement those in caspian.css                                             *
+ *                                                                             *
+ ******************************************************************************/
+
+/*******************************************************************************
+ *                                                                             *
+ * PopupMenu                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.context-menu .text-input-context-menu {
+    -fx-background-color: transparent;
+    -fx-background-radius: 0;
+    -fx-padding: 0;
+}
+
+.context-menu .text-input-context-menu .button {
+    -fx-background-radius: 0;
+    -fx-background-color: derive(-fx-color,-40%);
+    -fx-text-fill: white;
+}
+
+.context-menu .text-input-context-menu .pointer {
+    -fx-background-color: derive(-fx-color,-40%);
+    -fx-padding: 6px;
+    -fx-shape: "M 6 0 L 12 12 L 0 12 z";
+    -fx-scale-shape: true;
+}
+
+
+/*******************************************************************************
+ *                                                                             *
+ * ScrollBar                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+.scroll-bar:horizontal,
+.scroll-bar:horizontal:focused,
+.scroll-bar:vertical,
+.scroll-bar:vertical:focused,
+.scroll-bar:horizontal > .track-background,
+.scroll-bar:vertical > .track-background {
+    -fx-background-color: transparent;
+}
+.scroll-bar:horizontal > .thumb {
+   -fx-background-color: -fx-box-border, linear-gradient(to bottom, derive(-fx-color,95%), derive(-fx-color,10%));
+   -fx-background-radius: 4, 3;
+}
+
+.scroll-bar:vertical > .thumb {
+   -fx-background-color: -fx-box-border, linear-gradient(to right, derive(-fx-color,95%), derive(-fx-color,10%));
+    -fx-background-radius: 4, 3;
+}
+.scroll-bar:horizontal > .track {
+   -fx-opacity: 50%;
+   -fx-background-color: linear-gradient(to bottom, derive(-fx-color,-15%), derive(-fx-color,2.2%) 20%, derive(-fx-color,60%));
+   -fx-background-insets: 0;
+   -fx-background-radius: 4;
+}
+.scroll-bar:vertical > .track {
+   -fx-opacity: 50%;
+   -fx-background-color: linear-gradient(to right, derive(-fx-color,-15%), derive(-fx-color,2.2%) 20%, derive(-fx-color,60%));
+   -fx-background-insets: 0;
+   -fx-background-radius: 4;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ListView, TreeView, TableView, TreeTableView, ScrollPane                    *
+ *                                                                             *
+ ******************************************************************************/
+.list-view > .virtual-flow > .corner,
+.tree-view > .virtual-flow > .corner,
+.table-view > .virtual-flow > .corner,
+.tree-table-view > .virtual-flow > .corner,
+.scroll-pane > .corner {
+    -fx-background-color: transparent;
+}
+.scroll-pane > .scroll-bar:horizontal,
+.scroll-pane > .scroll-bar:vertical {
+    -fx-padding: 2;
+}
+.list-view > .virtual-flow > .scroll-bar:horizontal,
+.tree-view > .virtual-flow > .scroll-bar:horizontal,
+.table-view > .virtual-flow > .scroll-bar:horizontal,
+.tree-table-view > .virtual-flow > .scroll-bar:horizontal,
+.list-view > .virtual-flow > .scroll-bar:vertical,
+.tree-view > .virtual-flow > .scroll-bar:vertical,
+.table-view > .virtual-flow > .scroll-bar:vertical,
+.tree-table-view > .virtual-flow > .scroll-bar:vertical {
+    -fx-padding: 1;
+}
+
+
+/*******************************************************************************
+ *                                                                             *
+ * TextField, PasswordField, TextArea                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.text-field {
+    -fx-padding: 6 5 6 5; /* Adding 3px to top and bottom for handles */
+}
+
+.text-area .content {
+    -fx-padding: 9 5 9 5; /* Adding 6px to top and bottom for handles */
+}
+
+
+.caret-handle {
+    -fx-background-color: transparent,
+                          black /*#ACACAC*/,
+                          linear-gradient(to bottom, #AFAFAF 0%, #DFDFDF 100%);
+    -fx-background-insets: -4 -18 -8 -18, 0, 1;
+    -fx-shape: "M11.974,2.579L20,12.358V20H4V12.356L11.974,2.579z";
+/*
+    -fx-shape: "M11.972,1L3,12v17h18V12L11.972,1L11.972,1z";
+    -fx-padding: 0.375em 0.291em 0.375em 0.291em;
+*/
+    -fx-padding: 0.32em 0.3em 0.32em 0.3em;
+    -fx-cursor: hand;
+}
+
+
+
+.selection-handle {
+    -fx-background-color: transparent,
+                          #0071bc /*-fx-accent*/,
+                          linear-gradient(to bottom, #0063AA 0%, #008AED 100%);
+    -fx-background-insets: -4 -18 -8 -18, 0, 1;
+    -fx-shape: "M10.974,2.579L19,12.358V20H3V12.356L10.974,2.579z";
+/*
+    -fx-shape: "M10.972,1L2,12v17h18V12L10.972,1L10.972,1z";
+    -fx-padding: 0.375em 0.291em 0.375em 0.291em;
+*/
+    -fx-padding: 0.32em 0.3em 0.32em 0.3em;
+    -fx-cursor: hand;
+}
+
+
+/*******************************************************************************
+ *
+ * 2-level focus setting.
+ * The visuals aren't ready yet, so currently these are just placeholders.
+ *
+ ******************************************************************************/
+
+.choice-box:focused:external-focus {
+    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+.choice-box:focused:showing {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+.choice-box:focused:internal-focus {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+
+
+.slider {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-background-color: transparent;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 3, 2, 2;
+    -fx-padding: 3 5 5 5;
+}
+.slider:focused:external-focus {
+    -fx-background-color: -fx-focus-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-background-insets: -0.4, 1, 2;
+    -fx-background-radius: 3.4, 2, 2;
+    -fx-prompt-text-fill: transparent;
+
+}
+.slider:focused:internal-focus {
+    -fx-background-color: transparent;
+}
+.slider:focused:external-focus > .thumb {
+    -fx-focus-color: transparent;
+}
+
+
+.text-field:focused:external-focus {
+    -fx-background-color: -fx-focus-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);
+}
+.text-field:focused:external-focus .caret-handle {
+    -fx-background-color: transparent;
+}
+.text-field:focused:external-focus .selection-handle {
+    -fx-background-color: transparent;
+}
+.text-field:focused:internal-focus {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-prompt-text-fill: transparent;
+}
+
+
+
+.password-field:focused:external-focus {
+    -fx-background-color: -fx-focus-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);
+}
+.password-field:focused:external-focus .caret-handle {
+    -fx-background-color: transparent;
+}
+.password-field:focused:external-focus .selection-handle {
+    -fx-background-color: transparent;
+}
+.password-field:focused:internal-focus {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-text-box-border, -fx-control-inner-background;
+}
+
+
+.text-area:focused:external-focus {
+    -fx-background-color: -fx-focus-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);
+}
+.text-area:focused:external-focus .caret-handle {
+    -fx-background-color: transparent;
+}
+.text-area:focused:external-focus .selection-handle {
+    -fx-background-color: transparent;
+}
+.text-area:focused:internal-focus {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-prompt-text-fill: transparent;
+}
+
+
+
+.combo-box:focused:external-focus {
+    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+.combo-box:focused:showing {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+.combo-box:focused:internal-focus {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+
Index: build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/org.glassfish/javax.json/pom.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/org.glassfish/javax.json/pom.properties	(date 1509638264000)
+++ build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/org.glassfish/javax.json/pom.properties	(date 1509638264000)
@@ -0,0 +1,5 @@
+#Generated by org.apache.felix.bundleplugin
+#Thu Nov 02 19:57:45 CET 2017
+groupId=org.glassfish
+artifactId=javax.json
+version=1.1.2
Index: build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/javax.json/javax.json-api/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/javax.json/javax.json-api/pom.xml	(date 1509637864000)
+++ build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/javax.json/javax.json-api/pom.xml	(date 1509637864000)
@@ -0,0 +1,152 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
+
+    Copyright (c) 2011-2017 Oracle and/or its affiliates. All rights reserved.
+
+    The contents of this file are subject to the terms of either the GNU
+    General Public License Version 2 only ("GPL") or the Common Development
+    and Distribution License("CDDL") (collectively, the "License").  You
+    may not use this file except in compliance with the License.  You can
+    obtain a copy of the License at
+    https://oss.oracle.com/licenses/CDDL+GPL-1.1
+    or LICENSE.txt.  See the License for the specific
+    language governing permissions and limitations under the License.
+
+    When distributing the software, include this License Header Notice in each
+    file and include the License file at LICENSE.txt.
+
+    GPL Classpath Exception:
+    Oracle designates this particular file as subject to the "Classpath"
+    exception as provided by Oracle in the GPL Version 2 section of the License
+    file that accompanied this code.
+
+    Modifications:
+    If applicable, add the following below the License Header, with the fields
+    enclosed by brackets [] replaced by your own identifying information:
+    "Portions Copyright [year] [name of copyright owner]"
+
+    Contributor(s):
+    If you wish your version of this file to be governed by only the CDDL or
+    only the GPL Version 2, indicate your decision by adding "[Contributor]
+    elects to include this software in this distribution under the [CDDL or GPL
+    Version 2] license."  If you don't indicate a single choice of license, a
+    recipient has the option to distribute your version of this file under
+    either the CDDL, the GPL Version 2 or to extend the choice of license to
+    its licensees as provided above.  However, if you add GPL Version 2 code
+    and therefore, elected the GPL Version 2 license, then the option applies
+    only if the new code is made subject to such option by the copyright
+    holder.
+
+-->
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>org.glassfish</groupId>
+        <artifactId>json</artifactId>
+        <version>1.1.2</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>
+
+    <groupId>javax.json</groupId>
+    <artifactId>javax.json-api</artifactId>
+    <packaging>bundle</packaging>
+    <version>1.1.2</version>
+    <name>JSR 374 (JSON Processing) API</name>
+    <description>API module of JSR 374:Java API for Processing JSON</description>
+    <url>https://javaee.github.io/jsonp</url>
+
+    <properties>
+        <packages.export>javax.json.*</packages.export>
+    </properties>
+
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-source-plugin</artifactId>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-javadoc-plugin</artifactId>
+                <configuration>
+                    <docfilessubdirs>true</docfilessubdirs>
+                    <groups>
+                        <group>
+                            <title>JSON Processing Packages</title>
+                            <packages>javax.json*</packages>
+                        </group>
+                    </groups>
+                    <bottom>
+<![CDATA[Copyright &#169; 2012-2017,
+    <a href="http://www.oracle.com">Oracle</a>
+    and/or its affiliates. All Rights Reserved.
+    Use is subject to
+    <a href="{@docRoot}/doc-files/speclicense.html" target="_top">license terms</a>.
+    <br>Comments to : jsonp-spec@javaee.groups.io
+]]>
+                    </bottom>
+                    <links>
+                        <link>http://docs.oracle.com/javase/8/docs/api/</link>
+                    </links>
+                </configuration>
+
+                <executions>
+                    <execution>
+                        <id>attach-javadocs</id>
+                        <goals>
+                            <goal>jar</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
+                <groupId>org.glassfish.build</groupId>
+                <artifactId>spec-version-maven-plugin</artifactId>
+                <configuration>
+                    <spec>
+                        <nonFinal>${non.final}</nonFinal>
+                        <jarType>api</jarType>
+                        <specVersion>${spec_version}</specVersion>
+                        <specImplVersion>${new_spec_impl_version}</specImplVersion>
+                        <newSpecVersion>${new_spec_version}</newSpecVersion>
+                        <apiPackage>${api_package}</apiPackage>
+                    </spec>
+                </configuration>
+                <executions>
+                    <execution>
+                        <goals>
+                            <goal>set-spec-properties</goal>
+                            <goal>check-module</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+            <!--
+              This plugin is reponsible for packaging artifacts
+              as OSGi bundles.  Please refer to
+              http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html
+              for more information about how to use this plugin.
+            -->
+            <plugin>
+                <groupId>org.apache.felix</groupId>
+                <artifactId>maven-bundle-plugin</artifactId>
+                <extensions>true</extensions>
+                <configuration>
+                    <instructions>
+                        <Bundle-Version>${spec.bundle.version}</Bundle-Version>
+                        <Bundle-SymbolicName>${spec.bundle.symbolic-name}</Bundle-SymbolicName>
+                        <Extension-Name>${spec.extension.name}</Extension-Name>
+                        <Implementation-Version>${spec.implementation.version}</Implementation-Version>
+                        <Specification-Version>${spec.specification.version}</Specification-Version>
+                        <Export-Package>${packages.export}</Export-Package>
+                        <Bundle-Description>Java API for JSON Processing (JSON-P) ${spec_version}</Bundle-Description>
+                    </instructions>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
+</project>
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/caspian.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/caspian.css	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/caspian.css	(date 1547619866000)
@@ -0,0 +1,4277 @@
+/*
+ * Copyright (c) 2009, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*******************************************************************************
+ *                                                                             *
+ * CSS Styles for core infrastructure bits.  The .root section provides the   *
+ * overall default font and colors used by the rest of the sections.           *
+ *                                                                             *
+ ******************************************************************************/
+
+.root {
+    /***************************************************************************
+     *                                                                         *
+     * The main color palette from which the rest of the colors are derived.   *
+     *                                                                         *
+     **************************************************************************/
+
+    /* A light grey that is the base color for objects.  Instead of using
+     * -fx-base directly, the sections in this file will typically use -fx-color.
+     */
+    -fx-base: #d0d0d0;
+
+    /* A very light grey used for the background of windows.  See also
+     * -fx-text-background-color, which should be used as the -fx-text-fill
+     * value for text painted on top of backgrounds colored with -fx-background.
+     */
+    -fx-background: #f4f4f4;
+
+    /* Used for the inside of text boxes, password boxes, lists, trees, and
+     * tables.  See also -fx-text-inner-color, which should be used as the
+     * -fx-text-fill value for text painted on top of backgrounds colored
+     * with -fx-control-inner-background.
+     */
+    -fx-control-inner-background: white;
+
+    /* One of these colors will be chosen based upon a ladder calculation
+     * that uses the brightness of a background color.  Instead of using these
+     * colors directly as -fx-text-fill values, the sections in this file should
+     * use a derived color to match the background in use.  See also:
+     *
+     * -fx-text-base-color for text on top of -fx-base, -fx-color, and -fx-body-color
+     * -fx-text-background-color for text on top of -fx-background
+     * -fx-text-inner-color for text on top of -fx-control-inner-color
+     * -fx-selection-bar-text for text on top of -fx-selection-bar
+     */
+    -fx-dark-text-color: black;
+    -fx-mid-text-color: #292929;
+    -fx-light-text-color: white;
+
+    /* A bright blue for highlighting/accenting objects.  For example: selected
+     * text; selected items in menus, lists, trees, and tables; progress bars;
+     * default buttons.
+     */
+    -fx-accent: #0093ff;
+
+    /* A bright blue for the focus indicator of objects. Typically used as the
+     * first color in -fx-background-color for the "focused" pseudo-class. Also
+     * typically used with insets of -1.4 to provide a glowing effect.
+     *
+     * TODO: should this be derived from -fx-accent?
+     */
+    -fx-focus-color: #0093ff;
+
+    /* The color that is used in styling controls. The default value is based
+     * on -fx-base, but is changed by pseudoclasses to change the base color.
+     * For example, the "hover" pseudoclass will typically set -fx-color to
+     * -fx-hover-base (see below) and the "armed" pseudoclass will typically
+     * set -fx-color to -fx-pressed-base.
+     */
+    -fx-color: -fx-base;
+
+    /* The opacity level to use for the "disabled" pseudoclass.
+     */
+    -fx-disabled-opacity: 0.4;
+
+    /***************************************************************************
+     *                                                                         *
+     * Colors that are derived from the main color palette.                    *
+     *                                                                         *
+     **************************************************************************/
+
+    /* A little lighter than -fx-base and used as the -fx-color for the
+     * "hovered" pseudoclass state.
+     */
+    -fx-hover-base: ladder(
+        -fx-base,
+        derive(-fx-base,20%) 20%,
+        derive(-fx-base,30%) 35%,
+        derive(-fx-base,40%) 50%
+     );
+
+    /* A little darker than -fx-base and used as the -fx-color for the
+     * "armed" pseudoclass state.
+     *
+     * TODO: should this be renamed to -fx-armed-base?
+     */
+    -fx-pressed-base: derive(-fx-base,-20%);
+
+    /* Used to specify the body color for focused objects.  By default, it's
+     * the same as -fx-base (i.e., the body color doesn't change when a control
+     * gets focus).
+     */
+    -fx-focused-base: -fx-base;
+
+    /* The color to use for -fx-text-fill when text is to be painted on top of
+     * a background filled with the -fx-background color.
+     */
+    -fx-text-background-color: ladder(
+        -fx-background,
+        -fx-light-text-color 45%,
+        -fx-dark-text-color  46%,
+        -fx-dark-text-color  59%,
+        -fx-mid-text-color   60%
+     );
+
+    /* The default color for all text.  Sections should change the -fx-text-fill
+     * property if change the background color to something else.  See also:
+     *
+     * -fx-text-base-color for text on top of -fx-base, -fx-color, and -fx-body-color
+     * -fx-text-background-color for text on top of -fx-background
+     * -fx-text-inner-color for text on top of -fx-control-inner-color
+     * -fx-selection-bar-text for text on top of -fx-selection-bar
+     */
+    -fx-text-fill: -fx-text-background-color;
+
+    /* A little darker than -fx-color and used to draw boxes around objects such
+     * as progress bars, scroll bars, scroll panes, trees, tables, and lists.
+     */
+    -fx-box-border: ladder(
+        -fx-color,
+        black 20%,
+        derive(-fx-color,-30%) 30%
+    );
+
+    /* Darker than -fx-background and used to draw boxes around text boxes and
+     * password boxes.
+     */
+    -fx-text-box-border: ladder(
+        -fx-background,
+        black 10%,
+        derive(-fx-background, -15%) 30%
+    );
+
+    /* Typically lighter than -fx-background and used to provide a small
+     * highlight under controls and tick marks for checkboxes and radio buttons.
+     * Often used with an insets of 0 0 -1 0, and is also often the first
+     * color in a -fx-background-color list.  Also is typically replaced by
+     * -fx-focus-color with an insets of -1.4 in the "focused" pseudoclass.
+     */
+    -fx-shadow-highlight-color: ladder(
+        -fx-background,
+        transparent 0%,
+        derive(-fx-background,40%)   5%,
+        derive(-fx-background,60%)  70%,
+        derive(-fx-background,100%) 85%,
+        derive(-fx-background,100%) 97%,
+        derive(-fx-background,-10%) 97.5%
+      );
+
+    /* A gradient that goes from a little darker than -fx-color on the top to
+     * even more darker than -fx-color on the bottom.  Typically is the second
+     * color in the -fx-background-color list as the small thin border around
+     * a control. It is typically the same size as the control (i.e., insets
+     * are 0).
+     */
+    -fx-outer-border: linear-gradient(
+        to bottom,
+        derive(-fx-color,-9%) 0%,
+        derive(-fx-color,-33%) 100%
+    );
+
+    /* A gradient that goes from a bit lighter than -fx-color on the top to
+     * a little darker at the bottom.  Typically is the third color in the
+     * -fx-background-color list as a thin highlight inside the outer border.
+     * Insets are typically 1.
+     */
+    -fx-inner-border: linear-gradient(
+        to bottom,
+        ladder(-fx-color,
+               derive(-fx-color,80%) 60%,
+               white 82%) 0%,
+        ladder(-fx-color,
+               derive(-fx-color,20%) 10%,
+               derive(-fx-color,-10%) 80%) 100%
+    );
+
+    -fx-inner-border-horizontal: linear-gradient(
+        to right,
+        ladder(-fx-color,
+               derive(-fx-color,80%) 60%,
+               white 82%) 0%,
+        ladder(-fx-color,
+               derive(-fx-color,20%) 10%,
+               derive(-fx-color,-10%) 80%) 100%
+    );
+
+    -fx-inner-border-bottomup: linear-gradient(
+        to top,
+        ladder(-fx-color,
+               derive(-fx-color,80%) 60%,
+               white 82%) 0%,
+        ladder(-fx-color,
+               derive(-fx-color,20%) 10%,
+               derive(-fx-color,-10%) 80%) 100%);
+
+    /* A gradient that goes from a little lighter than -fx-color at the top to
+     * a little darker than -fx-color at the bottom and is used to fill the
+     * body of many controls such as buttons.  Typically is the fourth color
+     * in the -fx-background-color list and represents main body of the control.
+     * Insets are typically 2.
+     */
+    -fx-body-color: linear-gradient(
+        to bottom,
+        derive(-fx-color,34%) 0%,
+        derive(-fx-color,-18%) 100%
+    );
+
+    -fx-body-color-bottomup:  linear-gradient(
+        to top,
+        derive(-fx-color,34%) 0%,
+        derive(-fx-color,-18%) 100%
+    );
+
+    /* The color to use as -fx-text-fill when painting text on top of
+     * backgrounds filled with -fx-base, -fx-color, and -fx-body-color.
+     */
+    -fx-text-base-color: ladder(
+        -fx-color,
+        -fx-light-text-color 45%,
+        -fx-dark-text-color  46%,
+        -fx-dark-text-color  59%,
+        -fx-mid-text-color   60%
+    );
+
+    /* The color to use as -fx-text-fill when painting text on top of
+     * backgrounds filled with -fx-control-inner-background.
+     */
+    -fx-text-inner-color: ladder(
+        -fx-control-inner-background,
+        -fx-light-text-color 45%,
+        -fx-dark-text-color  46%,
+        -fx-dark-text-color  59%,
+        -fx-mid-text-color   60%
+    );
+
+    /* The color to use for small mark-like objects such as checks on check
+     * boxes, filled in circles in radio buttons, arrows on scroll bars, etc.
+     */
+    -fx-mark-color: ladder(
+        -fx-color,
+        white 30%,
+        derive(-fx-color,-63%) 31%
+    );
+
+    /* The small thin light "shadow" for mark-like objects. Typically used in
+     * conjunction with -fx-mark-color with an insets of 1 0 -1 0.
+     */
+    -fx-mark-highlight-color: ladder(
+        -fx-color,
+        derive(-fx-color,80%) 60%,
+        white 70%
+    );
+
+    /* Background for items in list like things such as menus, lists, trees,
+     * and tables.
+     *
+     * TODO: it seems like this should be based upon -fx-accent and we should
+     * remove the setting -fx-background in all the sections that use
+     * -fx-selection-bar.
+     */
+    -fx-selection-bar: linear-gradient(
+        to bottom,
+        derive(-fx-background,-7%) 0%,
+        derive(-fx-background,-34%) 100%
+    );
+
+    /* The color to use as -fx-text-fill when painting text on top of
+     * backgrounds filled with -fx-selection-bar.
+     *
+     * TODO: it seems like this should be derived from -fx-selection-bar.
+     */
+    -fx-selection-bar-text: ladder(
+        -fx-background,
+        -fx-light-text-color 50%,
+        -fx-mid-text-color   51%
+    );
+
+    /* The default border color for a tab.
+     *
+     * TODO: should this be -fx-box-border or derived from some other color?
+     */
+    -fx-tab-border-color: -fx-box-border;
+
+    /* These are needed for Popup */
+    -fx-background-color: inherit;
+    -fx-background-radius: inherit;
+    -fx-background-insets: inherit;
+    -fx-padding: inherit;
+
+    /* The color to use in ListView/TreeView/TableView to indicate hover. */
+    -fx-cell-hover-color: #cce3f4;
+
+    -fx-cell-focus-inner-border: #85b9de;
+
+    /* The colors to use in Pagination */
+    -fx-page-bullet-border: #acacac;
+    -fx-page-indicator-hover-border: #accee5;
+
+
+}
+
+.mnemonic-underline {
+    -fx-stroke: transparent;
+}
+
+.text {
+    -fx-font-smoothing-type: lcd;
+}
+
+
+/*******************************************************************************
+ *******************************************************************************
+ **                                                                           **
+ ** CSS Sections for each control.  In general, each control will have a main **
+ ** section that defines the following:                                       **
+ **                                                                           **
+ ** .control-name {                                                           **
+ **     -fx-background-color: a, b, c, d                                      **
+ **     -fx-background-insets: e, f, g, h                                     **
+ **     -fx-background-radius: i, j, k, l                                     **
+ **     -fx-padding: m                                                        **
+ **     -fx-text-fill: n                                                      **
+ ** }                                                                         **
+ **                                                                           **
+ ** where:                                                                    **
+ **                                                                           **
+ ** -fx-background-color, -fx-background-insets, and -fx-background-radius    **
+ ** are parallel arrays that specify background colors for the control.       **
+ **                                                                           **
+ ** -fx-background represents a sequence of colors for regions that will be   **
+ ** drawn, one on top of the other.                                           **
+ **                                                                           **
+ ** -fx-background-insets is a comma separated list of insets that represent  **
+ ** the top right bottom left insets from the edge of the control for each    **
+ ** color specified in the -fx-background-color list.  A single size for      **
+ ** an inset means the same inset will be used for the top right bottom left  **
+ ** values.  A negative inset will draw outside the bounds of the control.    **
+ **                                                                           **
+ ** -fx-background-radius is a comma separated list of values that represent  **
+ ** the radii of the top right, bottom right, bottom left, and top left       **
+ ** corners of the rectangle associated with the rectangle from the           **
+ ** -fx-background-color list.  As with insets, a single size for a radius    **
+ ** means the same radius will be used for all corners.                       **
+ **                                                                           **
+ ** Typically, the following values will be used:                             **
+ **                                                                           **
+ **    a/e/i = -fx-shadow-highlight-color, 0 0 -1 0, 5                        **
+ **            Draws a background highlight dropped 1 pixel down with         **
+ **            corners with a 5 pixel radius.                                 **
+ **    b/f/j = -fx-outer-border, 0, 5                                         **
+ **            Draws an outer border the size of the control (insets = 0) and **
+ **            with corners with a 5 pixel radius.                            **
+ **    c/g/k = -fx-inner-border, 1, 4                                         **
+ **            Draws an inner border inset 1 pixel from the control edge and  **
+ **            with corners with a smaller radius (radius = 4).               **
+ **    d/h/l = -fx-body-color, 2, 3                                           **
+ **            Draws the body last, inset 2 pixels from the control edge and  **
+ **            with corners with an even smaller radius (radius = 3).         **
+ **    m     = Padding from the edge of the control to the outer edge of the  **
+ **            skin content.                                                  **
+ **    n     = If specified, the color chosen for -fx-text-fill should match  **
+ **            the innermost color from -fx-background-colors (e.g., 'd').    **
+ **            See the -fx-text-fill entry in .scene for more information.    **
+ **                                                                           **
+ ** The control will also typically define pseudoclass sections for when it   **
+ ** is focused, when the mouse is hovering over it ("hover") and when the     **
+ ** mouse button is being held down on it (e.g., "armed").                    **
+ **                                                                           **
+ ** For example, in the "focused" pseudoclass, -fx-focus-color will typically **
+ ** just replace -fx-shadow-highlight-color and will be drawn so it extents   **
+ ** outside the control with a glowing effect.  The glowing effect is         **
+ ** achieved by using a non-integer insets value of -1.4 and the radius       **
+ ** is adjusted accordingly.                                                  **
+ **                                                                           **
+ ** .control-name:focused {                                                   **
+ **     -fx-background-color: -fx-focus-color, b, c, d                        **
+ **     -fx-background-insets: -1.4, f, g, h                                  **
+ **     -fx-background-radius: 6.4, j, k, l                                   **
+ **  }                                                                        **
+ **                                                                           **
+ ** In the "hover" pseudoclass, the -fx-color is replaced with -fx-hover-base **
+ ** which will result in a re-derivation of the other colors in               **
+ ** -fx-background-colors:                                                    **
+ **                                                                           **
+ ** .control-name:hover {                                                     **
+ **     -fx-color: -fx-hover-base;                                            **
+ ** }                                                                         **
+ **                                                                           **
+ ** In the "armed" pseudoclass, the -fx-color is replaced with                **
+ ** -fx-pressed-base, which will result in a rederivation of the other colors **
+ ** in -fx-background-colors:                                                 **
+ **                                                                           **
+ ** .control-name:armed {                                                     **
+ **     -fx-color: -fx-pressed-base;                                          **
+ ** }                                                                         **
+ **                                                                           **
+ ** The control will also typically include a  "disabled" pseudoclass which   **
+ ** makes the component transparent:                                          **
+ **                                                                           **
+ ** .control-name:disabled {                                                  **
+ **     -fx-opacity: -fx-disabled-opacity;                                    **
+ ** }                                                                         **
+ **                                                                           **
+ *******************************************************************************
+ ******************************************************************************/
+
+/*******************************************************************************
+ *******************************************************************************
+ **                                                                           **
+ ** NOTE on em values:  em values are used for padding and other sizing       **
+ ** throughout this file.  Size values in ems represent fraction of the       **
+ ** font size in use.  As used in this file, each 1/12th represents a pixel   **
+ ** based upon the default size of 12px.  Here's a table for quick reference: **
+ **                                                                           **
+ ** 1px:    0.083333em                                                       **
+ ** 2px:    0.166667em                                                        **
+ ** 3px:    0.25em                                                            **
+ ** 4px:    0.333333em                                                        **
+ ** 5px:    0.416667em                                                        **
+ ** 6px:    0.5em                                                             **
+ ** 7px:    0.583333em                                                        **
+ ** 8px:    0.666667em                                                        **
+ ** 9px:    0.75em                                                            **
+ ** 10px:   0.833333em                                                        **
+ ** 11px:   0.916667em                                                        **
+ ** 12px:   1.0em                                                             **
+ **                                                                           **
+ *******************************************************************************
+ ******************************************************************************/
+
+/*******************************************************************************
+ *                                                                             *
+ * Label                                                                       *
+ *                                                                             *
+ ******************************************************************************/
+
+.label {
+    -fx-text-fill: -fx-text-background-color;
+}
+
+.label:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.label:show-mnemonics > .mnemonic-underline {
+    -fx-stroke: -fx-text-fill;
+}
+
+/* The opacity of the parent is applied to the children.  So we make the
+ * opacity 1.0 here to avoid double translucency.
+ */
+/*:disabled > * > .label {
+    -fx-opacity: 1.0;
+}*/
+
+/*******************************************************************************
+ *                                                                             *
+ * Button                                                                      *
+ *                                                                             *
+ ******************************************************************************/
+
+.button {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0 0 -1 0, 0, 1, 2;
+    -fx-background-radius: 5, 5, 4, 3;
+    -fx-padding: 0.166667em 0.833333em 0.25em 0.833333em; /* 2 10 3 10 */
+    -fx-text-fill: -fx-text-base-color;
+    -fx-alignment: CENTER;
+    -fx-content-display: LEFT;
+}
+
+.button:focused {
+    -fx-color: -fx-focused-base;
+    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: -1.4, 0, 1, 2;
+    -fx-background-radius:  6.4, 5, 4, 3;
+}
+
+.button:hover {
+    -fx-color: -fx-hover-base;
+}
+
+.button:armed {
+    -fx-color: -fx-pressed-base;
+}
+
+.button:default {
+    -fx-base: -fx-accent;
+}
+
+.button:cancel {
+}
+
+.button:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.button:show-mnemonics > .mnemonic-underline {
+    -fx-stroke: -fx-text-fill;
+}
+/*******************************************************************************
+ *                                                                             *
+ * ToggleButton                                                                *
+ *                                                                             *
+ ******************************************************************************/
+
+.toggle-button {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0 0 -1 0, 0, 1, 2;
+    -fx-background-radius: 5, 5, 4, 3;
+    -fx-padding: 0.166667em 0.833333em 0.25em 0.833333em; /* 2 10 3 10 */
+    -fx-text-fill: -fx-text-base-color;
+    -fx-alignment: CENTER;
+    -fx-content-display: LEFT;
+}
+
+.toggle-button:focused {
+    -fx-color: -fx-focused-base;
+    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: -1.4, 0, 1, 2;
+    -fx-background-radius: 6.4, 5, 4, 3;
+}
+
+.toggle-button:hover {
+    -fx-color: -fx-hover-base;
+}
+
+.toggle-button:armed {
+    -fx-color: -fx-pressed-base;
+}
+
+.toggle-button:selected {
+    -fx-background-color:
+        -fx-shadow-highlight-color,
+        linear-gradient(to bottom, derive(-fx-color,-90%) 0%, derive(-fx-color,-60%) 100%),
+        linear-gradient(to bottom, derive(-fx-color,-60%) 0%, derive(-fx-color,-35%) 50%, derive(-fx-color,-30%) 98%, derive(-fx-color,-50%) 100%),
+        linear-gradient(to right, rgba(0,0,0,0.3) 0%, rgba(0,0,0,0) 10%, rgba(0,0,0,0) 90%, rgba(0,0,0,0.3) 100%);
+    -fx-background-insets: 0 0 -1 0, 0, 1, 1;
+    /* TODO: -fx-text-fill should be derived */
+    -fx-text-fill: -fx-light-text-color;
+}
+
+.toggle-button:selected:focused {
+    -fx-color: -fx-focused-base;
+    -fx-background-color:
+        -fx-focus-color,
+        linear-gradient(to bottom, derive(-fx-color,-90%) 0%, derive(-fx-color,-60%) 100%),
+        linear-gradient(to bottom, derive(-fx-color,-60%) 0%, derive(-fx-color,-35%) 50%, derive(-fx-color,-30%) 98%, derive(-fx-color,-50%) 100%),
+        linear-gradient(to right, rgba(0,0,0,0.3) 0%, rgba(0,0,0,0) 10%, rgba(0,0,0,0) 90%, rgba(0,0,0,0.3) 100%);
+    -fx-background-insets: -1.4, 0, 1, 1;
+}
+
+.toggle-button:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.toggle-button:show-mnemonics > .mnemonic-underline {
+    -fx-stroke: -fx-text-fill;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * RadioButton                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+
+.radio-button {
+    -fx-label-padding: 0.0em 0.0em 0.0em 0.416667em; /* 0 0 0 5 */
+    -fx-text-fill: -fx-text-background-color;
+}
+
+.radio-button:focused {
+    -fx-color: -fx-focused-base;
+}
+
+.radio-button > .radio  {
+   -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+   -fx-background-insets: 0 0 -1 0,  0,  1,  2;
+   -fx-background-radius: 1.0em; /* large value to make sure this remains circular */
+   -fx-padding: 0.333333em; /* 4 -- padding from outside edge to the inner black dot */
+}
+
+.radio-button:focused > .radio {
+    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-radius: 1.0em; /* large value to make sure this remains circular */
+    -fx-background-insets: -1.4, 0, 1, 2;
+}
+
+.radio-button:hover > .radio {
+    -fx-color: -fx-hover-base;
+}
+.radio-button:armed > .radio {
+    -fx-color: -fx-pressed-base;
+}
+
+.radio-button > .radio > .dot {
+   -fx-background-color: transparent;
+   -fx-background-insets: 0;
+   -fx-background-radius: 1.0em; /* large value to make sure this remains circular */
+   -fx-padding: 0.25em; /* 3 -- radius of the inner black dot when selected */
+}
+
+.radio-button:selected > .radio > .dot {
+   -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+   -fx-background-insets: 0 0 -1 0, 0;
+}
+
+.radio-button:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.radio-button:show-mnemonics > .mnemonic-underline {
+    -fx-stroke: -fx-text-fill;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * CheckBox                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+
+.check-box {
+    -fx-label-padding: 0.0em 0.0em 0.0em 0.416667em; /* 0 0 0 5 */
+    -fx-text-fill: -fx-text-background-color;
+}
+
+.check-box:focused {
+    -fx-color: -fx-focused-base;
+}
+
+.check-box > .box {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0 0 -1 0, 0, 1, 2;
+    -fx-background-radius: 2, 2, 1, 1;
+    -fx-padding: 0.25em; /* 3 -- padding from the outside edge to the mark */
+}
+
+.check-box:focused > .box {
+    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: -1.4, 0, 1, 2;
+    -fx-background-radius: 3.4, 2, 1, 1;
+}
+
+.check-box:hover > .box {
+    -fx-color: -fx-hover-base;
+}
+
+.check-box:armed > .box {
+    -fx-color: -fx-pressed-base;
+}
+
+.check-box > .box > .mark {
+    -fx-background-color: transparent;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.333333em; /* 4 -- this is half the size of the mark */
+    -fx-shape: "M0,4H2L3,6L6,0H8L4,8H2Z";
+}
+
+/* TODO: scale the shape - the problem is that it is not within a square
+ * boundary.
+ */
+.check-box:indeterminate > .box > .mark {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-shape: "M0,0H8V2H0Z";
+    -fx-scale-shape: false;
+}
+
+.check-box:selected > .box > .mark {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+}
+
+.check-box:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.check-box:show-mnemonics > .mnemonic-underline {
+    -fx-stroke: -fx-text-fill;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Hyperlink                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.hyperlink {
+    -fx-padding: 0.166667em; /* 2 */
+    -fx-cursor: hand;
+    -fx-content-display: LEFT;
+    -fx-text-fill: -fx-text-background-color;
+    -fx-border-color: transparent;
+    -fx-border-width: 1px;
+}
+
+.hyperlink:visited {
+    -fx-text-fill: -fx-accent;
+}
+
+.hyperlink:focused {
+    -fx-color: -fx-focused-base;
+    -fx-border-color: -fx-focus-color;
+    -fx-border-style: segments(0.166667em, 0.166667em);
+    -fx-border-width: 1px;
+}
+
+.hyperlink:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.hyperlink:hover {
+    -fx-underline: true;
+}
+
+.hyperlink:show-mnemonics > .mnemonic-underline {
+    -fx-stroke: -fx-text-fill;
+}
+
+
+/*******************************************************************************
+ *                                                                             *
+ * PopupMenu                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.context-menu {
+    -fx-color: -fx-base;
+    -fx-background-color:
+        derive(-fx-color,-40%),
+        derive(-fx-color,100%),
+        linear-gradient(to bottom, derive(-fx-color,100%) 0%, derive(-fx-color,50%) 12%, derive(-fx-color,65%) 88%, derive(-fx-color,23%) 100%);
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 0 6 6 6, 0 5 5 5, 0 4 4 4;
+/*    -fx-padding: 0.666667em 0.083333em 0.666667em 0.083333em;  8 1 8 1 */
+    -fx-padding: 0.333333em 0.083333em 0.666667em 0.083333em; /* 4 1 8 1 */
+}
+
+.context-menu > .separator {
+    -fx-padding: 0.0em 0.333333em 0.0em 0.333333em; /* 0 4 0 4 */
+}
+
+.context-menu > .scroll-arrow {
+    -fx-padding: 0.416667em 0.416667em 0.416667em 0.416667em; /* 5 */
+    -fx-background-color: transparent;
+}
+
+.context-menu > .scroll-arrow:hover {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-selection-bar;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+.context-menu:show-mnemonics > .mnemonic-underline {
+    -fx-stroke: -fx-text-fill;
+}
+
+/*
+ * RT-33312 - if the context-menu is belongs to a menu-button, then set the context-menu's -fx-color to -fx-base
+ * effectively overriding the menu-button:armed, menu-button:hover styling of -fx-color
+ */
+.menu-button > * > .context-menu {
+    -fx-color: -fx-base;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Menu                                                                        *
+ *                                                                             *
+ ******************************************************************************/
+
+.menu {
+    -fx-background-color: transparent;
+    -fx-padding: 0.333333em 0.666667em 0.333333em 0.666667em; /* 4 8 4 8 */
+}
+
+.menu:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.menu:show-mnemonics > .mnemonic-underline {
+    -fx-stroke: -fx-text-fill;
+}
+.menu > .right-container > .arrow {
+    -fx-padding: 0.458em 0.167em 0.458em 0.167em; /* 4.5 2 4.5 2 */
+    -fx-background-color: -fx-mark-color;
+    -fx-shape: "M0,-4L4,0L0,4Z";
+    -fx-scale-shape: false;
+}
+
+.menu:focused > .right-container > .arrow {
+    -fx-background-color: white;
+}
+
+/* This hides the down arrow that would show on a menu placed in a menubar */
+.menu-bar > .container > .menu > .arrow-button > .arrow {
+    -fx-padding: 0;
+    -fx-background-color: transparent;
+    -fx-shape: null;
+}
+
+.menu-bar > .container > .menu > .arrow-button {
+    -fx-padding: 0;
+}
+
+.menu-up-arrow {
+    -fx-padding: 0.666667em 0.416667em 0.0em 0.416667em;  /* 8 5 0 5 */
+    -fx-background-color: derive(-fx-color,-2%);
+    -fx-shape: "M0 1 L1 1 L.5 0 Z";
+    -fx-effect: innershadow( two-pass-box , rgba(0,0,0,0.6) , 4, 0.0 , 0 , 1 );
+}
+
+.menu-down-arrow {
+    -fx-background-color: derive(-fx-color,-2%);
+    -fx-padding: 0.666667em 0.416667em 0.0em 0.416667em;  /* 8 5 0 5 */
+    -fx-shape: "M0 0 L1 0 L.5 1 Z";
+    -fx-effect: innershadow( two-pass-box , rgba(0,0,0,0.6) , 4, 0.0 , 0 , 1 );
+}
+
+
+/*******************************************************************************
+ *                                                                             *
+ * MenuBar                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+
+/* Corresponding hex values for the color derivations used below are: *
+ * derive(-fx-base,-30%); #929292                                     *
+ * derive(-fx-base,-50%); #686868                                     *
+ * derive(-fx-base,-70%); #3e3e3e                                     */
+
+.menu-bar {
+    -fx-padding: 0.0em 0.666667em 0.0em 0.666667em; /* 0 8 0 8 */
+    -fx-spacing: 0.166667em; /* 2 */
+    -fx-base: derive(#d0d0d0,-70%);
+    -fx-background-color: linear-gradient(to bottom, derive(-fx-color,50%), derive(-fx-color,-30%)), -fx-body-color;
+    -fx-background-insets: 0, 1 0 1 0;
+    -fx-background-radius: 0, 0 ;
+}
+
+/* Show nothing for background of normal menu button in a menu bar */
+.menu-bar > .container > .menu-button {
+    -fx-background-radius: 0;
+    -fx-background-color: transparent;
+    -fx-background-insets: 0;
+}
+/* Change padding of menu buttons when in menu bar */
+.menu-bar > .container > .menu-button > .label {
+    -fx-padding: 0.333em 0.5em 0.333em 0.5em; /* 4 6 4 6*/
+}
+
+.menu-bar > .container > .menu-button:hover, .menu-bar > .container > .menu-button:focused, .menu-bar > .container > .menu-button:showing {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-selection-bar;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+/*.menu-bar .menu:focused:showing, .menu-bar .menu:showing, .menu-bar .menu:focused, .menu:focused:showing, .menu:showing, .menu:focused {*/
+/*.menu-bar .menu-button:showing, .menu-button:showing {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-selection-bar;
+    -fx-text-fill: -fx-selection-bar-text;
+}*/
+
+.menu-bar > .container > .menu-button:hover {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-selection-bar;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+.menu-bar:show-mnemonics > .mnemonic-underline {
+    -fx-stroke: -fx-text-fill;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * MenuItem                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+
+.menu-item {
+    -fx-background-color: transparent;
+    -fx-padding: 0.333333em 0.41777em 0.333333em 0.41777em;  /* 4 5 4 5 */
+}
+
+.menu-item > .left-container {
+    -fx-padding: 0.458em 0.791em 0.458em 0.458em;
+}
+
+.menu-item > .graphic-container {
+    -fx-padding: 0em 0.333em 0em 0em;
+}
+
+.menu-item >.label {
+    -fx-padding: 0em 0.5em 0em 0em;
+    -fx-text-fill: -fx-text-base-color;
+}
+
+.menu-item:disabled > .label {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.menu-item:focused {
+     -fx-background: -fx-accent;
+     -fx-background-color: -fx-selection-bar;
+     -fx-text-fill: -fx-selection-bar-text;
+}
+
+.menu-item:focused > .label {
+    -fx-text-fill: white;
+}
+.menu-item > .right-container {
+    -fx-padding: 0em 0em 0em 0.5em;
+}
+
+.menu-item:show-mnemonics > .mnemonic-underline {
+    -fx-stroke: -fx-text-fill;
+}
+
+.radio-menu-item:checked > .left-container > .radio {
+    -fx-background-color: -fx-mark-color;
+    -fx-shape: "M0,5H2L4,8L8,0H10L5,10H3Z";
+    -fx-scale-shape: false;
+}
+
+.radio-menu-item:focused:checked > .left-container > .radio {
+    -fx-background-color: white;
+}
+
+.check-menu-item:checked > .left-container > .check {
+    -fx-background-color: -fx-mark-color;
+    -fx-shape: "M0,5H2L4,8L8,0H10L5,10H3Z";
+    -fx-scale-shape: false;
+}
+
+.check-menu-item:focused:checked > .left-container > .check {
+    -fx-background-color: white;
+}
+
+/*.radio.selected {
+    -fx-background-color: -fx-mark-color;
+    -fx-padding: 0.666667em;  8
+    -fx-shape: "M7,3.5C7,5.433,5.433,7,3.5,7C1.567,7,0,5.433,0,3.5C0,1.567,1.63,0,3.5,0C5.433,0,7,1.567,7,3.5z";
+    -fx-scale-shape: false;
+}*/
+
+/*.check.checked {
+    -fx-background-color: -fx-mark-color;
+    -fx-padding: 0.666667em;  8
+    -fx-shape: "M0,5H2L4,8L8,0H10L5,10H3Z";
+    -fx-scale-shape: false;
+}*/
+
+/*
+.menu-item:hover:selected .menu-item-check, .menu-item:focused:selected .menu-item-check,.menu-item:hover:selected .menu-item-radio, .menu-item:focused:selected .menu-item-radio {
+    -fx-background-color: -fx-selection-bar-text;
+}
+*/
+.menu-item:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ChoiceBox                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.choice-box {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0 0 -1 0, 0, 1, 2;
+    -fx-background-radius: 5, 5, 4, 3;
+    -fx-padding: 0;
+    -fx-alignment: CENTER;
+    -fx-content-display: LEFT;
+}
+
+.choice-box:focused {
+    -fx-color: -fx-focused-base;
+    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: -1.4, 0, 1, 2;
+    -fx-background-radius: 6.4, 5, 4, 3;
+}
+
+.choice-box:hover {
+    -fx-color: -fx-hover-base;
+}
+
+.choice-box:showing {
+    -fx-color: -fx-pressed-base;
+}
+
+.choice-box > .label {
+    -fx-padding: 0.166667em 0.333333em 0.25em 0.5em; /* 2 4 3 6 */
+    -fx-text-fill: -fx-text-base-color;
+}
+
+.choice-box > .open-button {
+    -fx-background-color: null;
+    -fx-padding: 0.083333em 0.666667em 0 0; /* 1 0 0 8 */
+}
+
+.choice-box > .open-button > .arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    /* padding determines the size of the arrow;
+       this should match the design size in the SVG */
+    -fx-padding: 0.166667em 0.333333em 0.166667em 0.333333em; /* 2 3.5 2 3.5 */
+    -fx-shape: "M 0 0 h 7 l -3.5 4 z";
+}
+
+.choice-box > .context-menu {
+    -fx-background-radius: 6, 5, 4;
+}
+
+/*.choice-box > .context-menu > .menu-item {
+    -fx-accelerator-gutter: 0;
+}*/
+
+/* TODO: need to use the ID here.  For some reason, the other form does not
+ * work.  This might be related to popup issues.
+ */
+/*.choice-box > * > .menu-item-radio {*/
+#choice-box-menu-item > * > .menu-item-radio {
+    /* When we show RadioMenuItems in ChoiceBox, we replace the radio shape with
+       a check mark, which looks much better */
+    -fx-shape: "M0,5H2L4,8L8,0H10L5,10H3Z";
+    -fx-scale-shape: false;
+}
+
+.choice-box:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+
+/*******************************************************************************
+ *                                                                             *
+ * Slider                                                                      *
+ *                                                                             *
+ ******************************************************************************/
+
+.slider > .thumb {
+    -fx-background-color:
+        derive(-fx-color,-36%),
+        derive(-fx-color,73%),
+        linear-gradient(to bottom, derive(-fx-color,-19%),derive(-fx-color,61%));
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 1.0em; /* makes sure this remains circular */
+    -fx-padding: 0.583333em; /* 7 */
+}
+
+.slider:focused > .thumb {
+    -fx-color: -fx-focused-base;
+    -fx-background-color:
+        -fx-focus-color,
+        derive(-fx-color,-36%),
+        derive(-fx-color,73%),
+        linear-gradient(to bottom, derive(-fx-color,-19%),derive(-fx-color,61%));
+    -fx-background-insets: -1.4, 0, 1, 2;
+    -fx-background-radius: 1.0em; /* makes sure this remains circular */
+}
+
+.slider > .thumb:hover {
+    -fx-color: -fx-hover-base;
+}
+
+/* Uncomment when RT-10521 is fixed.
+.slider .thumb:pressed {
+    -fx-color: -fx-pressed-base;
+}
+*/
+
+.slider > .track {
+    -fx-background-color:
+        -fx-shadow-highlight-color,
+        derive(-fx-color,-22%),
+        linear-gradient(to bottom, derive(-fx-color,-15.5%), derive(-fx-color,34%) 30%, derive(-fx-color,68%));
+    -fx-background-insets: 1 0 -1 0, 0, 1;
+    -fx-background-radius: 2.5, 2.5, 1.5;
+    -fx-padding: 0.208333em; /* 2.5 */
+}
+
+.slider:vertical > .track {
+    -fx-background-color:
+        -fx-shadow-highlight-color,
+        derive(-fx-color,-22%),
+        linear-gradient(to right, derive(-fx-color,-15.5%), derive(-fx-color,34%) 30%, derive(-fx-color,68%));
+    -fx-background-insets: 0 -1 0 1, 0, 1;
+}
+
+.slider > .axis {
+    -fx-tick-mark-stroke: ladder(-fx-background, derive(-fx-background,30%) 40%, derive(-fx-background,-30%) 41%);
+    -fx-tick-label-font-size: 0.833333em;
+    -fx-tick-label-fill: -fx-text-background-color;
+}
+
+.slider:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ScrollBar                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.scroll-bar:horizontal {
+    -fx-background-color:
+        -fx-box-border,
+        linear-gradient(to bottom, derive(-fx-color,30%) 5%, derive(-fx-color,-17%) 100%);
+    -fx-background-insets: 0, 1;
+}
+
+.scroll-bar:horizontal:focused {
+    -fx-background-color:
+        -fx-focus-color,
+        -fx-box-border,
+        linear-gradient(to bottom, derive(-fx-color,30%) 5%, derive(-fx-color,-17%) 100%);
+    -fx-background-insets: -1.4, 0, 1;
+}
+
+.scroll-bar:vertical {
+    -fx-background-color:
+        -fx-box-border,
+        linear-gradient(to top, derive(-fx-color,30%) 5%, derive(-fx-color,-17%) 100%);
+    -fx-background-insets: 0, 1;
+}
+
+.scroll-bar:vertical:focused {
+    -fx-background-color:
+        -fx-focus-color,
+        -fx-box-border,
+        linear-gradient(to top, derive(-fx-color,30%) 5%, derive(-fx-color,-17%) 100%);
+    -fx-background-insets: -1.4, 0, 1;
+}
+
+.scroll-bar:horizontal > .thumb {
+    -fx-background-color:
+        -fx-box-border,
+        linear-gradient(to bottom, derive(-fx-color,95%), derive(-fx-color,10%)),
+        linear-gradient(to bottom, derive(-fx-color,38%), derive(-fx-color,-16%));
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 0.5em; /* makes sure this remains circular */
+}
+
+.scroll-bar:vertical > .thumb {
+    -fx-background-color:
+        -fx-box-border,
+        linear-gradient(to right, derive(-fx-color,95%), derive(-fx-color,10%)),
+        linear-gradient(to right, derive(-fx-color,38%), derive(-fx-color,-16%));
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 0.5em; /* makes sure this remains circular */
+}
+
+.scroll-bar:focused > .thumb {
+    -fx-color: -fx-focused-base;
+}
+
+.scroll-bar > .thumb:hover {
+    -fx-color: -fx-hover-base;
+}
+
+/* Uncomment when RT-10521 is fixed.
+.scroll-bar .thumb:pressed {
+    -fx-color: -fx-pressed-base;
+}
+*/
+
+.scroll-bar:horizontal > .track {
+     -fx-background-color:
+        -fx-box-border,
+        linear-gradient(to bottom, derive(-fx-color,-15%), derive(-fx-color,2.2%) 20%, derive(-fx-color,60%));
+    -fx-background-insets:  0, 1;
+    -fx-background-radius: 0.5em; /* makes sure this remains circular */
+}
+.scroll-bar:horizontal > .track-background {
+     -fx-background-color:
+        -fx-box-border,
+        linear-gradient(to top, derive(-fx-color,-15%), derive(-fx-color,2.2%) 20%, derive(-fx-color,60%));
+    -fx-background-insets:  0, 1;
+}
+
+.scroll-bar:vertical > .track {
+     -fx-background-color:
+        -fx-box-border,
+        linear-gradient(to right, derive(-fx-color,-15%), derive(-fx-color,2.2%) 20%, derive(-fx-color,60%));
+    -fx-background-insets:  0, 1;
+    -fx-background-radius: 0.5em; /* makes sure this remains circular */
+}
+
+.scroll-bar:vertical > .track-background {
+     -fx-background-color:
+        -fx-box-border,
+        linear-gradient(to left, derive(-fx-color,-15%), derive(-fx-color,2.2%) 20%, derive(-fx-color,60%));
+    -fx-background-insets:  0, 1;
+}
+
+.scroll-bar > .increment-button {
+    -fx-background-color: transparent;
+    -fx-background-insets:  0;
+    -fx-padding: 0.25em; /* 3 */
+}
+
+.scroll-bar > .decrement-button {
+    -fx-background-color: transparent;
+    -fx-background-insets:  0;
+    -fx-padding: 0.25em; /* 3 */
+}
+
+.scroll-bar:horizontal > .increment-button > .increment-arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.5em 0.333333em 0.0em 0.0em; /* 6 4 0 0 */
+    -fx-shape: "M 4 0 L 0 -3 L 0 3 z";
+}
+
+.scroll-bar:vertical > .increment-button > .increment-arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.333333em 0.5em 0.0em 0.0em; /* 4 6 0 0 */
+    -fx-shape: "M -3 0 L 0 4 L 3 0 z";
+}
+
+.scroll-bar:horizontal > .decrement-button > .decrement-arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.5em 0.333333em 0.0em 0.0em; /* 6 4 0 0 */
+    -fx-shape: "M 0 0 L 4 -3 L 4 3 z";
+}
+
+.scroll-bar:vertical > .decrement-button > .decrement-arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.333333em 0.5em 0.0em 0.0em; /* 4 6 0 0 */
+    -fx-shape: "M -3 0 L 0 -4 L 3 0 z";
+}
+
+.scroll-bar:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+/* The opacity of the parent is applied to the children.  So we make the
+ * opacity 1.0 here to avoid double translucency.
+ */
+/*:disabled > * > .scroll-bar {
+    -fx-opacity: 1.0;
+}*/
+
+/*******************************************************************************
+ *                                                                             *
+ * ScrollPane                                                                  *
+ *                                                                             *
+ ******************************************************************************/
+
+.scroll-pane {
+    -fx-background-color: -fx-box-border,-fx-background;
+    -fx-background-insets: 0, 1;
+    -fx-padding: 1.0;
+}
+
+.scroll-pane:focused {
+    -fx-background-color: -fx-focus-color, -fx-box-border, -fx-background;
+    -fx-background-insets: -1.4, 0, 1;
+}
+
+.scroll-pane > * > .scroll-bar:horizontal {
+    -fx-background-insets: 0, 1 0 0 0;
+    -fx-padding: 0.0 0.0 0.0 0.0;
+}
+
+.scroll-pane > * > .scroll-bar:vertical {
+    -fx-background-insets: 0, 0 0 0 1;
+    -fx-padding: 0.0 0.0 0.0 0.0;
+}
+
+.scroll-pane > .corner {
+    -fx-background-color: -fx-box-border, -fx-base;
+    -fx-background-insets: 0, 1 0 0 1;
+}
+
+.scroll-pane:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Separator                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.separator > .line {
+    -fx-border-style: segments(0.166667em, 0.166667em);
+    -fx-border-width: 0.083333em; /* 1 */
+}
+
+.separator:horizontal > .line {
+    -fx-background-color: null;
+    -fx-padding: 0.083333em 0.0em 0.0em 0.0em; /* 1 0 0 0 */
+    -fx-border-color: derive(-fx-background,-20%) transparent transparent transparent;
+}
+
+.separator:vertical > .line {
+    -fx-background-color: null;
+    -fx-padding: 0.0em 0.083333em 0.0em 0.0em; /* 0 1 0 0 */
+    -fx-border-color:  transparent derive(-fx-background,-20%) transparent transparent;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * TextInput                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.text-input {
+    -fx-text-fill: -fx-text-inner-color;
+    -fx-highlight-fill: derive(-fx-control-inner-background,-20%);
+    -fx-highlight-text-fill: -fx-text-inner-color;
+}
+
+.text-input:focused {
+    -fx-highlight-fill: -fx-accent;
+    -fx-highlight-text-fill: white;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * TextField                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.text-field {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 3, 2, 2;
+    -fx-padding: 0.25em 0.416667em  0.333333em 0.416667em; /* 3 5 4 5 */
+    -fx-text-fill: -fx-text-inner-color;
+    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);
+    -fx-cursor: text;
+}
+
+.text-field:focused {
+    -fx-background-color: -fx-focus-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-background-insets: -0.4, 1, 2;
+    -fx-background-radius: 3.4, 2, 2;
+    -fx-prompt-text-fill: transparent;
+}
+
+.text-field:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * PasswordField                                                               *
+ *                                                                             *
+ ******************************************************************************/
+
+.password-field {
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * TextArea                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+
+.text-area {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 3, 2, 2;
+    -fx-padding: 1;
+    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);
+}
+
+.text-area > .scroll-pane {
+    -fx-background-color: transparent;
+}
+
+.text-area .content {
+    -fx-padding: 3 5 3 5;
+    -fx-cursor: text;
+}
+
+.text-area:focused {
+    -fx-background-color: -fx-focus-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-background-insets: -0.4, 1, 2;
+    -fx-background-radius: 3.4, 2, 2;
+    -fx-prompt-text-fill: transparent;
+}
+
+.text-area:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Customised CSS for controls placed directly within cells                    *
+ *                                                                             *
+ ******************************************************************************/
+
+.cell > .choice-box {
+    -fx-background-color: transparent;
+    -fx-background-insets: 0;
+    -fx-background-radius: 0;
+    -fx-padding: 0.0em 0.5em 0.0em 0.0em; /* 0 6 0 0 */
+    -fx-alignment: CENTER_LEFT;
+    -fx-content-display: LEFT;
+}
+
+.cell > .choice-box > .label {
+    -fx-padding: 0em 0.333333em 0.0em 0.333333; /* 2 4 3 6 */
+}
+
+.cell:focused:selected > .choice-box > .label {
+    -fx-text-fill: white;
+}
+
+.cell:focused:selected > .choice-box > .open-button > .arrow {
+    -fx-background-color: -fx-mark-highlight-color, white;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ListView and ListCell                                                       *
+ *                                                                             *
+ ******************************************************************************/
+
+.list-view {
+    -fx-background-color: -fx-box-border, -fx-control-inner-background;
+    -fx-background-insets: 0, 1;
+
+     /* There is some oddness if padding is in em values rather than pixels,
+        in particular, the left border of the control doesn't show. */
+    -fx-padding: 1; /* 0.083333em; */
+}
+
+.list-view:focused {
+    -fx-background-color: -fx-focus-color,-fx-box-border,-fx-control-inner-background;
+    -fx-background-insets: -1.4, 0, 1;
+    -fx-background-radius: 1.4, 0, 0;
+
+    /* There is some oddness if padding is in em values rather than pixels,
+       in particular, the left border of the control doesn't show. */
+    -fx-padding: 1; /* 0.083333em; */
+}
+
+.list-view > .virtual-flow > .scroll-bar:vertical{
+    -fx-background-insets: 0, 0 0 0 1;
+    -fx-padding: -1 -1 -1 0;
+}
+
+.list-view > .virtual-flow > .scroll-bar:horizontal{
+    -fx-background-insets: 0, 1 0 0 0;
+    -fx-padding: 0 -1 -1 -1;
+}
+
+.list-view:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.list-view > .virtual-flow > .corner {
+    -fx-background-color: -fx-box-border, -fx-base;
+    -fx-background-insets: 0, 1 0 0 1;
+}
+
+.list-cell {
+    -fx-background-color: -fx-control-inner-background;
+    -fx-padding: 0.25em; /* 3 */
+    -fx-text-fill: -fx-text-inner-color;
+    -fx-opacity: 1;
+}
+
+.list-cell:odd {
+    -fx-background-color: derive(-fx-control-inner-background,-5%);
+}
+
+.list-view:focused > .virtual-flow > .clipped-container > .sheet > .list-cell:focused {
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-control-inner-background;
+    -fx-background-insets: 0, 1, 2;
+}
+
+.list-view:focused > .virtual-flow > .clipped-container > .sheet > .list-cell:focused:odd {
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, derive(-fx-control-inner-background,-5%);
+    -fx-background-insets: 0, 1, 2;
+}
+
+/* When the list-cell is selected and focused */
+.list-view:focused > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:focused:selected {
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-selection-bar;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background: -fx-accent;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+.list-view:focused > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:selected,
+.list-view:focused > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:selected:hover {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-selection-bar;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+.list-view:focused > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:focused:selected:hover {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-selection-bar;
+    -fx-background-insets: 0, 1, 2;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+/* When the ListView is _not_ focused, we show alternate selection colors */
+.list-cell:filled:selected:focused,
+.list-cell:filled:selected,
+.list-view:horizontal > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:selected {
+    -fx-background-color: lightgray;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+.list-cell:filled:selected:focused:disabled,
+.list-cell:filled:selected:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.list-cell:filled:hover {
+    -fx-background-color: -fx-cell-hover-color;
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+.list-view:focused > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:focused:hover {
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-cell-hover-color;
+    -fx-background-insets: 0, 1, 2;
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+.list-view:horizontal > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:selected,
+.list-view:horizontal > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:selected:hover {
+    -fx-background-color: linear-gradient(to right, derive(-fx-accent,-7%), derive(-fx-accent,-25%));
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * TreeView and TreeCell                                                       *
+ *                                                                             *
+ ******************************************************************************/
+
+.tree-view {
+    -fx-background-color: -fx-box-border, -fx-control-inner-background;
+    -fx-background-insets: 0, 1;
+
+    /* There is some oddness if padding is in em values rather than pixels,
+       in particular, the left border of the control doesn't show. */
+    -fx-padding: 1; /* 0.083333em; */
+}
+
+.tree-view:focused {
+    -fx-background-color: -fx-focus-color,-fx-box-border,-fx-control-inner-background;
+    -fx-background-insets: -1.4, 0, 1;
+    -fx-background-radius: 1.4, 0, 0;
+
+    /* There is some oddness if padding is in em values rather than pixels,
+       in particular, the left border of the control doesn't show. */
+    -fx-padding: 1; /* 0.083333em; */
+}
+
+.tree-view > .virtual-flow > .scroll-bar:vertical{
+    -fx-background-insets: 0, 0 0 0 1;
+    -fx-padding: -1 -1 -1 0;
+}
+
+.tree-view > .virtual-flow > .scroll-bar:horizontal{
+    -fx-background-insets: 0, 1 0 0 0;
+    -fx-padding: 0 -1 -1 -1;
+}
+
+.tree-view:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.tree-view > .virtual-flow > .corner {
+    -fx-background-color: -fx-box-border, -fx-base;
+    -fx-background-insets: 0, 1 0 0 1;
+}
+
+.tree-cell {
+    -fx-background-color: -fx-control-inner-background;
+    -fx-padding: 0.25em; /* 3 */
+    -fx-text-fill: -fx-text-inner-color;
+    -fx-indent: 10;
+}
+
+.tree-cell .label {
+    -fx-padding: 0.0em 0.0em 0.0em 0.25em; /* 0 0 0 3 */
+}
+
+.tree-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-cell:focused {
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-control-inner-background;
+    -fx-background-insets: 0, 1, 2;
+}
+
+.tree-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-cell:filled:focused:selected {
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-selection-bar;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background: -fx-accent;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+.tree-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-cell:filled:selected,
+.tree-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-cell:filled:selected:hover {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-selection-bar;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+.tree-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-cell:filled:focused:selected:hover {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-selection-bar;
+    -fx-background-insets: 0, 1, 2;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+/* When the TreeView is _not_ focused, we show alternate selection colors */
+.tree-cell:filled:selected:focused,
+.tree-cell:filled:selected {
+    -fx-background-color: lightgray;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+.tree-cell:filled:selected:focused:disabled,
+.tree-cell:filled:selected:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.tree-cell > .tree-disclosure-node,
+.tree-table-row-cell > .tree-disclosure-node {
+    -fx-padding: 4 2 4 8;
+    -fx-background-color: transparent;
+}
+
+.tree-cell > .tree-disclosure-node:disabled,
+.tree-table-row-cell > .tree-disclosure-node:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.tree-cell > .tree-disclosure-node > .arrow,
+.tree-table-row-cell > .tree-disclosure-node > .arrow {
+    -fx-background-color: -fx-mark-color;
+    -fx-padding: 0.333333em; /* 4 */
+    -fx-shape: "M 0 -4 L 8 0 L 0 4 z";
+}
+
+.tree-cell:expanded > .tree-disclosure-node > .arrow,
+.tree-table-row-cell:expanded > .tree-disclosure-node > .arrow {
+    -fx-rotate: 90;
+}
+
+.tree-cell:filled:selected > .tree-disclosure-node > .arrow,
+.tree-table-row-cell:filled:selected > .tree-disclosure-node > .arrow {
+    -fx-background-color: -fx-selection-bar-text;
+}
+
+.tree-cell:filled:hover,
+.tree-table-row-cell:filled:hover {
+    -fx-background-color: -fx-cell-hover-color;
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+.tree-cell:filled:hover > .tree-disclosure-node > .arrow,
+.tree-table-row-cell:filled:hover > .tree-disclosure-node > .arrow {
+    -fx-background-color: -fx-mark-color;
+}
+
+.tree-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-cell:filled:focused:hover,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:focused:hover {
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-cell-hover-color;
+    -fx-background-insets: 0, 1, 2;
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+.tree-cell:filled:selected:hover > .tree-disclosure-node > .arrow,
+.tree-table-row-cell:filled:selected:hover > .tree-disclosure-node > .arrow {
+    -fx-background-color: -fx-selection-bar-text;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * MenuButton                                                                  *
+ *                                                                             *
+ ******************************************************************************/
+
+.menu-button {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0 0 -1 0, 0, 1, 2;
+    -fx-background-radius: 5, 5, 4, 3;
+    -fx-padding: 0.0em; /* 0 */
+    -fx-text-fill: -fx-text-base-color;
+}
+
+.menu-button > .label {
+    /* TODO workaround for RT-19062 */
+    -fx-text-fill: -fx-text-base-color;
+
+    /* The MenuButton skin uses an inner Label part */
+    -fx-padding: 0.166667em 0.667em 0.25em 0.833333em; /* 2 8 3 10 */
+}
+
+.menu-button:focused {
+    -fx-color: -fx-focused-base;
+    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: -1.4, 0, 1, 2;
+    -fx-background-radius: 6.4, 4, 5, 3;
+}
+
+.menu-button:hover {
+    -fx-color: -fx-hover-base;
+}
+
+.menu-button:armed {
+    -fx-color: -fx-pressed-base;
+}
+
+.menu-button > .arrow-button {
+    -fx-background-insets: 0;
+    -fx-background-radius: 0;
+    -fx-padding: 0.5em 0.667em 0.5em 0.0em; /* 6 8 6 0 */
+}
+
+.menu-button > .arrow-button > .arrow {
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-padding: 0.25em; /* 3 */
+    -fx-shape: "M 0 -3.5 v 7 l 4 -3.5 z";
+}
+
+.menu-button:openvertically > .arrow-button > .arrow {
+    -fx-padding: 0.166667em 0.333333em 0.166667em 0.333333em; /* 2 4 2 4 */
+    -fx-shape: "M 0 0 h 7 l -3.5 4 z";
+}
+
+.menu-button:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.menu-button:show-mnemonics > .mnemonic-underline {
+    -fx-stroke: -fx-text-fill;
+}
+
+
+
+/*******************************************************************************
+ *                                                                             *
+ * SplitMenuButton                                                             *
+ *                                                                             *
+ ******************************************************************************/
+
+.split-menu-button {
+    -fx-background-color: -fx-shadow-highlight-color;
+    -fx-background-insets: 0 0 -1 0;
+    -fx-background-radius: 5;
+    -fx-padding: 0.0em; /* 0 */
+    -fx-text-fill: -fx-text-base-color;
+}
+
+.split-menu-button:focused {
+    -fx-color: -fx-focused-base;
+    -fx-background-color: -fx-focus-color;
+    -fx-background-insets: -1.4;
+    -fx-background-radius: 6.4;
+}
+
+.split-menu-button > .label:hover {
+    -fx-color: -fx-hover-base;
+}
+
+.split-menu-button:armed > .label {
+    -fx-color: -fx-pressed-base;
+}
+
+/* The SplitMenuButton skin uses an inner Label part */
+.split-menu-button > .label {
+    -fx-background-color:  -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 1 0 1 1, 2 1 2 2;
+    -fx-background-radius: 5 0 0 5, 4 0 0 4, 3 0 0 3;
+    -fx-padding: 0.166667em 0.667em 0.25em 0.833333em; /* 2 8 3 10 */
+}
+
+.split-menu-button > .arrow-button {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 0 5 5 0, 0 4 4 0, 0 3 3 0;
+    -fx-padding: 0.5em 0.667em 0.5em 0.667em; /* 6 8 6 8 */
+}
+
+.split-menu-button > .arrow-button:hover {
+    -fx-color: -fx-hover-base;
+}
+
+.split-menu-button > .arrow-button:pressed {
+    -fx-color: -fx-pressed-base;
+}
+
+.split-menu-button > .arrow-button > .arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.25em; /* 3 */
+    -fx-shape: "M 0 -3.5 v 7 l 4 -3.5 z";
+}
+
+.split-menu-button:openvertically > .arrow-button > .arrow {
+    -fx-padding: 0.166667em 0.333333em 0.166667em 0.333333em; /* 2 4 2 4 */
+    -fx-shape: "M 0 0 h 7 l -3.5 4 z";
+}
+
+.split-menu-button:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.split-menu-button:show-mnemonics > .mnemonic-underline {
+    -fx-stroke: -fx-text-fill;
+}
+
+
+
+/*******************************************************************************
+ *                                                                             *
+ * Tooltip                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+
+.tooltip {
+    -fx-background-color:
+        linear-gradient(#cec340, #a59c31),
+        linear-gradient(#fefefc, #e6dd71),
+        linear-gradient(#fef592, #e5d848);
+    -fx-background-insets: 0,1,2;
+    -fx-padding: 0.333333em 0.666667em 0.333333em 0.666667em; /* 4 8 4 8 */
+    -fx-effect: dropshadow( three-pass-box , rgba(0,0,0,0.6) , 8, 0.0 , 0 , 0 );
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Toolbar                                                                     *
+ *                                                                             *
+ * Corresponding hex values for the color derivations used below are:          *
+ * derive(-fx-base,-20%); #a6a6a6                                              *
+ * derive(-fx-base,-30%); #929292                                              *
+ * derive(-fx-base,-35%); #878787                                              *
+ * derive(-fx-base,-50%); #686868                                              *
+ * derive(-fx-base,-60%); #535353                                              *
+ * derive(-fx-base,65%); #efefef                                               *
+ *                                                                             *
+ ******************************************************************************/
+
+.tool-bar:vertical {
+    -fx-background: derive(-fx-base,-20%);
+    -fx-background-color:
+        linear-gradient(to right, derive(-fx-base,-30%), derive(-fx-base,-60%)),
+        linear-gradient(to right, derive(-fx-base,65%) 2%, derive(-fx-base,-20%) 95%);
+    -fx-background-insets: 0, 0 1 0 1;
+    -fx-background-radius: 0 ;
+    -fx-padding: 0.833em 0.416667em 0.833em 0.416667em; /* 10 5 10 5 */
+    -fx-spacing: 0.333em; /* 4 */
+    -fx-alignment: TOP_LEFT;
+}
+
+.tool-bar > .container > .separator:vertical > .line {
+    -fx-border-style: solid;
+    -fx-background-color: null;
+    -fx-border-color:  transparent derive(-fx-base,-35%) transparent transparent;
+}
+
+.tool-bar > .container > .separator:horizontal > .line {
+    -fx-border-style: solid;
+    -fx-background-color: null;
+    -fx-border-color:  transparent transparent derive(-fx-base,-35%) transparent;
+}
+
+.tool-bar:vertical > .container > .separator {
+    -fx-orientation: horizontal;
+    -fx-padding: 0.0em 0.0835em 0.0em 0.0835em; /* 0 1 0 1 */
+}
+
+.tool-bar:horizontal {
+    -fx-background: derive(-fx-base,-30%);
+    -fx-background-color:
+        linear-gradient(to bottom, derive(-fx-base,-30%), derive(-fx-base,-60%)),
+        linear-gradient(to bottom, derive(-fx-base,65%) 2%, derive(-fx-base,-20%) 95%);
+    -fx-background-insets: 0, 1 0 1 0;
+    -fx-background-radius: 0, 0 ;
+    -fx-padding: 0.416667em 0.833em 0.416667em 0.833em; /* 5 10 5 10 */
+    -fx-spacing: 0.333em; /* 4 */
+    -fx-alignment: CENTER_LEFT;
+}
+
+.tool-bar:horizontal > .container > .separator {
+    -fx-orientation: vertical;
+    -fx-padding: 0.0835em 0.0em 0.0835em 0.0em; /* 1 0 1 0 */
+}
+
+.tool-bar-overflow-button {
+    -fx-background-color: transparent;
+    -fx-padding: 0.666667em 0.916667em 0em 0em; /* 8 11 0 0 */
+}
+
+.tool-bar-overflow-button > .arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.666667em 0.916667em 0em 0em; /* 8 11 0 0 */
+    -fx-shape: "M337.273,297.622l-0.016,1.069l2.724,2.639l-2.723,2.628l0.015,1.048h0.881l3.81-3.685l-3.788-3.699H337.273z M343.783,297.622h-0.902l-0.015,1.069l2.724,2.639l-2.724,2.628l0.015,1.048h0.882l3.809-3.685L343.783,297.622z" ;
+}
+
+.tool-bar-overflow-button:focused > .arrow {
+   -fx-background-color: -fx-mark-highlight-color, derive(-fx-accent, -15%);
+   -fx-background-insets: 1 0 -1 0, 0;
+}
+
+.tool-bar-overflow-button:hover > .arrow {
+   -fx-background-color: -fx-mark-highlight-color, derive(-fx-hover-base, -35%);
+   -fx-background-insets: 1 0 -1 0, 0;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ProgressBar                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+
+.progress-bar {
+    -fx-background-color:
+        -fx-box-border,
+        linear-gradient(to bottom, derive(-fx-color,30%) 5%, derive(-fx-color,-17%));
+    -fx-background-insets: 0, 1;
+    -fx-indeterminate-bar-length: 60;
+    -fx-indeterminate-bar-escape: true;
+    -fx-indeterminate-bar-flip: true;
+    -fx-indeterminate-bar-animation-time: 2;
+}
+
+.progress-bar > .bar {
+    -fx-background-color:
+        -fx-box-border,
+        linear-gradient(to bottom, derive(-fx-accent,95%), derive(-fx-accent,10%)),
+        linear-gradient(to bottom, derive(-fx-accent,38%), -fx-accent);
+    -fx-background-insets: 0, 1, 2;
+    -fx-padding: 0.416667em; /* 5 */
+}
+
+.progress-bar:indeterminate > .bar {
+    -fx-background-color: linear-gradient(to left, transparent, -fx-accent);
+}
+
+.progress-bar > .track {
+     -fx-background-color:
+        -fx-box-border,
+        linear-gradient(to bottom, derive(-fx-color,-15%), derive(-fx-color,2.2%) 20%, derive(-fx-color,60%));
+    -fx-background-insets:  0, 1;
+}
+
+.progress-bar:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ProgressIndicator                                                           *
+ *                                                                             *
+ ******************************************************************************/
+
+.progress-indicator {
+    -fx-indeterminate-segment-count: 8;
+    -fx-spin-enabled: true;
+}
+
+.progress-indicator > .determinate-indicator > .indicator {
+    -fx-background-color:
+        -fx-box-border,
+        -fx-outer-border,
+        -fx-inner-border,
+        -fx-body-color;
+    -fx-background-insets: 1 0 -1 0, 0, 1, 2;
+    -fx-padding: 1px;
+}
+
+.progress-indicator > .determinate-indicator > .progress {
+    -fx-background-color:
+        linear-gradient(to bottom, derive(-fx-accent,38%), derive(-fx-accent,-60%)),
+        linear-gradient(to bottom, derive(-fx-accent,20%), -fx-accent);
+    -fx-background-insets: 0, 1;
+    -fx-padding: 0.25em; /* 3px */
+}
+
+/* TODO: scaling the shape seems to make it disappear */
+.progress-indicator > .determinate-indicator > .tick {
+    -fx-background-color: -fx-mark-color, white;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.416667em; /* 5 */
+    -fx-shape: "M 0,5 L 2.5,5 L 3.7,7.5 L 7.5,0 L 10,0 L 5,10 L 2.5,10 Z";
+    -fx-scale-shape: false;
+}
+
+.progress-indicator:indeterminate > .spinner {
+    -fx-padding: 0.833333em; /* 10 */
+}
+
+.progress-indicator > .percentage {
+    -fx-font-size: 0.916667em; /* 11pt - 1 less than the default font */
+    -fx-fill: -fx-text-background-color;
+}
+
+.progress-indicator:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.progress-indicator:indeterminate .segment {
+    -fx-background-color: -fx-accent;
+}
+.progress-indicator:indeterminate .segment0 {
+    -fx-shape:"M18.191,4.264l-2.457,1.721l0,0C16.559,7.161,17,8.564,17,10h3C20,7.948,19.369,5.946,18.191,4.264z";
+}
+.progress-indicator:indeterminate .segment1 {
+    -fx-shape:"M11.736,0.152l-0.521,2.955l0,0c1.416,0.249,2.719,0.928,3.734,1.943l2.122-2.121C15.62,1.478,13.758,0.508,11.736,0.152z";
+}
+.progress-indicator:indeterminate .segment2 {
+    -fx-shape:"M10,0C7.947,0,5.945,0.631,4.264,1.809l1.72,2.457l0,0C7.162,3.442,8.563,3,10,3V0z";
+}
+.progress-indicator:indeterminate .segment3 {
+    -fx-shape:"M2.929,2.929C1.478,4.38,0.508,6.242,0.152,8.264l2.955,0.521l0,0C3.356,7.369,4.035,6.066,5.05,5.05l0,0L2.929,2.929z";
+}
+.progress-indicator:indeterminate .segment4 {
+    -fx-shape:"M0,10c0,2.052,0.631,4.055,1.809,5.735l2.458-1.721C3.442,12.838,3,11.437,3,10H0z";
+}
+.progress-indicator:indeterminate .segment5 {
+    -fx-shape:"M8.785,16.894c-1.416-0.25-2.719-0.929-3.735-1.944l0,0l-2.122,2.122c1.451,1.45,3.313,2.42,5.335,2.776L8.785,16.894z";
+}
+.progress-indicator:indeterminate .segment6 {
+    -fx-shape:"M14.016,15.734C12.838,16.558,11.437,17,10,17v3c2.053,0,4.055-0.632,5.736-1.809L14.016,15.734z";
+}
+.progress-indicator:indeterminate .segment7 {
+    -fx-shape:"M16.894,11.215c-0.249,1.415-0.929,2.719-1.944,3.734l2.122,2.122c1.45-1.451,2.421-3.314,2.776-5.335L16.894,11.215z";
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * TableView                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.table-view {
+    -fx-background-color: -fx-box-border, -fx-control-inner-background;
+    -fx-background-insets: 0,1;
+
+    /* There is some oddness if padding is in em values rather than pixels,
+       in particular, the left border of the control doesn't show. */
+    -fx-padding: 1; /* 0.083333em; */
+
+    /* Constants used throughout the tableview.
+     * TODO: Should these be derived from the palette in .scene?
+     */
+    -fx-table-header-border-color: #959595;
+/*    -fx-table-header-background-color: linear (0%,0%) to (0%,100%) stops (80%, #bbbbbb) (10%, #f6f6f6);*/
+    -fx-table-cell-border-color: #bbbbbb;
+}
+
+/** Draws focus border around tableview */
+.table-view:focused,
+.tree-table-view:focused {
+    -fx-background-color: -fx-focus-color,-fx-box-border,-fx-control-inner-background;
+    -fx-background-insets: -1.4, 0, 1;
+    -fx-background-radius: 1.4, 0, 0;
+
+    /* There is some oddness if padding is in em values rather than pixels,
+       in particular, the left border of the control doesn't show. */
+    -fx-padding: 1; /* 0.083333em; */
+}
+
+.table-view:disabled,
+.tree-table-view:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.table-view > .virtual-flow > .scroll-bar:vertical,
+.tree-table-view > .virtual-flow > .scroll-bar:vertical {
+    -fx-background-insets: 0, 0 0 0 1;
+    -fx-padding: -1 -1 -1 0;
+}
+
+.table-view > .virtual-flow > .scroll-bar:horizontal,
+.tree-table-view > .virtual-flow > .scroll-bar:horizontal {
+    -fx-background-insets: 0, 1 0 0 0;
+    -fx-padding: 0 -1 -1 -1;
+}
+
+.table-view > .virtual-flow > .corner,
+.tree-table-view > .virtual-flow > .corner {
+    -fx-background-color: -fx-box-border, -fx-base;
+    -fx-background-insets: 0, 1 0 0 1;
+}
+
+/* Each row in the table is a table-row-cell. Inside a table-row-cell is any
+   number of table-cell. */
+.table-row-cell {
+    -fx-background-color: -fx-table-cell-border-color, -fx-control-inner-background;
+    -fx-background-insets: 0, 0 0 1 0;
+    -fx-padding: 0.0em; /* 0 */
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+.table-row-cell:odd {
+    -fx-background-color: -fx-table-cell-border-color, derive(-fx-control-inner-background,-5%);
+    -fx-background-insets: 0, 0 0 1 0;
+}
+
+.table-row-cell:focused,
+.tree-table-row-cell:focused {
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-control-inner-background;
+    -fx-background-insets: 0, 1, 2;
+}
+
+.table-row-cell:focused:odd {
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, derive(-fx-control-inner-background,-5%);
+    -fx-background-insets: 0, 1, 2;
+}
+
+/* When the table-row-cell is selected and focused */
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:focused:selected,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:focused:selected {
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-selection-bar;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background: -fx-accent;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:selected > .table-cell,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:selected > .tree-table-cell {
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:selected,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:selected {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-selection-bar;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+.table-view:row-selection:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:focused:selected:hover,
+.tree-table-view:row-selection:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:focused:selected:hover{
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-selection-bar;
+    -fx-background-insets: 0, 1, 2;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+/* When the TableView is _not_ focused, we show alternate selection colors */
+.table-row-cell:filled:selected:focused,
+.table-row-cell:filled:selected,
+.tree-table-row-cell:filled:selected:focused,
+.tree-table-row-cell:filled:selected {
+    -fx-background-color: lightgray;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+.table-row-cell:selected:disabled,
+.tree-table-row-cell:selected:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.table-view:row-selection > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:hover {
+    -fx-background-color: -fx-table-cell-border-color, -fx-cell-hover-color;
+    -fx-background-insets: 0, 0 0 1 0;
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+.tree-table-view:row-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:hover {
+    /* No 1-pixel bottom border for the TreeTableView (unlike the TableView above) */
+    -fx-background-color: -fx-cell-hover-color;
+    -fx-background-insets: 0;
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+.table-view:row-selection > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled:focused:hover,
+.tree-table-view:row-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:focused:hover {
+    -fx-background-color: -fx-table-cell-border-color, -fx-focus-color, -fx-cell-focus-inner-border, -fx-cell-hover-color;
+    -fx-background-insets: 0, 0 0 1 0, 1 1 2 1, 2 2 3 2, 3 3 4 3;
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+.table-cell {
+    -fx-padding: 0.166667em; /* 2px, plus border adds 1px */
+
+    -fx-background-color: transparent;
+    -fx-border-color: transparent -fx-table-cell-border-color transparent transparent;
+    -fx-border-width: 0.083333em; /* 1 */
+    -fx-cell-size: 2.0em; /* 24 */
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+/* When in constrained resize mode, the right-most visible cell should not have
+   a right-border, as it is not possible to get this cleanly out of view without
+   introducing horizontal scrollbars (see RT-14886). */
+.table-view:constrained-resize > .virtual-flow > .clipped-container > .sheet > .table-row-cell > .table-cell:last-visible,
+.tree-table-view:constrained-resize > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell > .tree-table-cell:last-visible {
+    -fx-border-color: transparent;
+}
+.table-view:constrained-resize > .column-header:last-visible,
+.tree-table-view:constrained-resize > .column-header:last-visible {
+    -fx-border-width: 0.083333em 0.0em 0.083333em 0.083333em, 0.083333em 0.0em 0.083333em 0.083333em;
+}
+.table-view:constrained-resize .filler,
+.tree-table-view:constrained-resize .filler {
+    -fx-border-color:
+        derive(-fx-base, 80%)
+        linear-gradient(to bottom, derive(-fx-base,80%) 20%, derive(-fx-base,-10%) 90%)
+        derive(-fx-base, 10%)
+        linear-gradient(to bottom, derive(-fx-base,80%) 20%, derive(-fx-base,-10%) 90%),
+        /* Outer border: */
+        transparent -fx-table-header-border-color -fx-table-header-border-color -fx-table-header-border-color;
+    -fx-border-insets: 0 1 1 1, 0 0 0 0;
+}
+
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell > .table-cell:focused,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell > .tree-table-cell:focused {
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-control-inner-background;
+    -fx-background-insets: 0 1 0 0, 1 2 1 1, 2 3 2 2;
+}
+
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled .table-cell:focused:selected,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled .tree-table-cell:focused:selected {
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-selection-bar;
+    -fx-background-insets: 0 1 0 0, 1 2 1 1, 2 3 2 2;
+    -fx-background: -fx-accent;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled > .table-cell:selected,
+.table-view:cell-selection > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled > .table-cell:hover:selected,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled > .tree-table-cell:selected,
+.tree-table-view:cell-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled > .tree-table-cell:hover:selected {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-selection-bar;
+    -fx-text-fill: -fx-selection-bar-text;
+    -fx-background-insets: 0 0 1 0;
+}
+
+.table-view:focused > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled > .table-cell:focused:selected:hover,
+.tree-table-view:focused > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled > .tree-table-cell:focused:selected:hover{
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-selection-bar;
+    -fx-background-insets: 0 1 0 0, 1 2 1 1, 2 3 2 2;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+/* When the TableView is _not_ focused, we show alternate selection colors */
+ .table-row-cell:filled > .table-cell:selected:focused,
+ .table-row-cell:filled > .table-cell:selected,
+ .tree-table-row-cell:filled > .tree-table-cell:selected:focused,
+ .tree-table-row-cell:filled > .tree-table-cell:selected {
+    -fx-background-color: lightgray;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+.table-cell:selected:disabled,
+.tree-table-cell:selected:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+/*.table-cell:focused {
+    -fx-background-color: -fx-focus-color, -fx-control-inner-background;
+    -fx-background-insets: 0, 1.4;
+}*/
+
+.table-view:cell-selection > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled > .table-cell:hover,
+.tree-table-view:cell-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled > .tree-table-cell:hover {
+    -fx-background-color: -fx-cell-hover-color;
+    -fx-text-fill: -fx-text-inner-color;
+    -fx-background-insets: 0 0 1 0;
+}
+
+.table-view:cell-selection > .virtual-flow > .clipped-container > .sheet > .table-row-cell:filled > .table-cell:focused:hover,
+.tree-table-view:cell-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled > .tree-table-cell:focused:hover {
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-cell-hover-color;
+    -fx-background-insets: 0 1 0 0, 1 2 1 1, 2 3 2 2;
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+/* The column-resize-line is shown when the user is attempting to resize a column. */
+.table-view .column-resize-line,
+.tree-table-view .column-resize-line {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-selection-bar;
+    -fx-padding: 0.0em 0.0416667em 0.0em 0.0416667em; /* 0 0.571429 0 0.571429 */
+}
+
+/* This is the area behind the column headers. An ideal place to specify background
+   and border colors for the whole area (not individual column-header's). */
+.table-view .column-header-background,
+.tree-table-view .column-header-background {
+    -fx-background-color: -fx-body-color;
+    -fx-padding: 0;
+}
+
+/* The column header row is made up of a number of column-header, one for each
+   TableColumn, and a 'filler' area that extends from the right-most column
+   to the edge of the tableview, or up to the 'column control' button. */
+.table-view .column-header,
+.tree-table-view .column-header {
+    -fx-text-fill: -fx-selection-bar-text;
+
+    /* TODO: for some reason, this doesn't scale. */
+    -fx-font-size: 1.083333em; /* 13pt - 1 more than the default font */
+    -fx-size: 25;
+    -fx-border-style: solid;
+    -fx-border-color:
+        /*
+          Inner border: we have different colours along the top, right, bottom and left.
+          Refer to RT-12298 for the spec.
+        */
+        derive(-fx-base, 80%)
+        linear-gradient(to bottom, derive(-fx-base,80%) 20%, derive(-fx-base,-10%) 90%)
+        derive(-fx-base, 10%)
+        linear-gradient(to bottom, derive(-fx-base,80%) 20%, derive(-fx-base,-10%) 90%),
+        /* Outer border: */
+        transparent -fx-table-header-border-color -fx-table-header-border-color transparent;
+    -fx-border-insets: 0 1 1 0, 0 0 0 0;
+    -fx-border-width: 0.083333em, 0.083333em;
+}
+
+.table-view .filler,
+.tree-table-view .filler {
+    -fx-size: 25;
+    -fx-border-style: solid;
+    -fx-border-color:
+        /*
+          Inner border: we have different colours along the top, right, bottom and left.
+          Refer to RT-12298 for the spec.
+        */
+        derive(-fx-base, 80%)
+        linear-gradient(to bottom, derive(-fx-base,80%) 20%, derive(-fx-base,-10%) 90%)
+        derive(-fx-base, 10%)
+        linear-gradient(to bottom, derive(-fx-base,80%) 20%, derive(-fx-base,-10%) 90%),
+        /* Outer border: */
+        transparent transparent -fx-table-header-border-color transparent;
+    -fx-border-insets: 0 0 1 0, 0 0 0 0;
+    -fx-border-width: 0.083333em, 0.083333em 0 0.083333em 0.083333em;
+}
+
+.table-view .column-header .sort-order-dots-container,
+.tree-table-view .column-header .sort-order-dots-container{
+    -fx-padding: 2 0 2 0;
+}
+
+.table-view .column-header .sort-order,
+.tree-table-view .column-header .sort-order{
+    -fx-font-size: 0.916667em; /* 11pt - 1 less than the default font */
+}
+
+.table-view .column-header .sort-order-dot,
+.tree-table-view .column-header .sort-order-dot {
+    -fx-background-color: derive(-fx-mark-highlight-color, 40%), -fx-mark-color;
+    -fx-padding: 0.0625em 0.104em 0.0625em 0.104em;
+}
+
+.table-view .column-header .sort-order-dot.ascending,
+.tree-table-view .column-header .sort-order-dot.ascending {
+    -fx-background-insets: -1 0 1 0, 0;
+}
+
+.table-view .column-header .sort-order-dot.descending,
+.tree-table-view .column-header .sort-order-dot.descending {
+    -fx-background-insets: 1 0 -1 0, 0;
+}
+
+.table-view .column-header .label,
+.tree-table-view .column-header .label {
+    -fx-alignment: center;
+}
+
+.table-view > .column-header-background > .show-hide-columns-button,
+.tree-table-view > .column-header-background > .show-hide-columns-button{
+    -fx-background-color: -fx-body-color;
+
+    -fx-border-color:
+        /* inner border: A copy of the inner border used above in the general column header area. */
+        derive(-fx-base, 80%)
+        linear-gradient(to bottom, derive(-fx-base,80%) 20%, derive(-fx-base,-10%) 90%),
+        derive(-fx-base, 10%)
+        linear-gradient(to bottom, derive(-fx-base,80%) 20%, derive(-fx-base,-10%) 90%),
+        /* outer border: Slightly different to the above*/
+        transparent transparent -fx-table-header-border-color -fx-table-header-border-color;
+    -fx-border-insets: 0 0 0 1, 0 0 0 0;
+}
+
+.table-view .show-hide-column-image,
+.tree-table-view .show-hide-column-image {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+
+    -fx-padding: 0.25em; /* 3px */
+    -fx-shape: "M398.902,298.045c0.667,0,1.333,0,2,0c0,0.667,0,1.333,0,2c0.667,0,1.333,0,2,0c0,0.667,0,1.333,0,2c-0.667,0-1.333,0-2,0c0,0.666,0,1.332,0,1.999c-0.667,0-1.333,0-2,0c0-0.667,0-1.333,0-1.999c-0.666,0-1.333,0-1.999,0c0-0.667,0-1.334,0-2c0.666,0,1.333,0,1.999,0C398.902,299.378,398.902,298.711,398.902,298.045z";
+}
+
+/*.nested-column-header .column-header {
+    -fx-background-color: transparent;
+}*/
+
+/* When a column is being 'dragged' to be placed in a different position, there
+   is a region that follows along the column header area to indicate where the
+   column will be dropped. This region can be styled using the .column-drag-header
+   name. */
+.table-view .column-drag-header,
+.tree-table-view .column-drag-header {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-selection-bar;
+    -fx-border-color: transparent;
+    -fx-opacity: 0.6;
+}
+
+/* Semi-transparent overlay to indicate the column that is currently being moved */
+.table-view .column-overlay,
+.tree-table-view .column-overlay {
+    -fx-background-color: darkgray;
+    -fx-opacity: 0.3;
+}
+
+.table-view /*> column-header-background > nested-column-header >*/ .arrow,
+.tree-table-view /*> column-header-background > nested-column-header >*/ .arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.25em 0.3125em 0.25em 0.3125em; /* 3 3.75 3 3.75 */
+    -fx-shape: "M 0 0 h 7 l -3.5 4 z";
+}
+
+/* This is shown when the table has no rows and/or no columns. */
+.table-view .empty-table,
+.tree-table-view .empty-table {
+    -fx-background-color: white;
+    -fx-font-size: 1.166667em; /* 14pt - 2 more than the default font */
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * TitledPane                                                                  *
+ *                                                                             *
+ ******************************************************************************/
+
+.titled-pane {
+    -fx-text-fill: -fx-text-base-color;
+}
+
+.titled-pane:focused {
+    -fx-text-fill: white;
+}
+
+.titled-pane > .title {
+    -fx-background-color: -fx-box-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 5 5 0 0, 4 4 0 0, 3 3 0 0;
+    -fx-padding: 0.166667em 0.833333em 0.25em 0.833333em; /* 2 10 3 10 */
+}
+
+.titled-pane:focused > .title {
+    -fx-color: -fx-focus-color;
+}
+
+.titled-pane > .title > .arrow-button {
+    -fx-background-color: null;
+    -fx-background-insets: 0;
+    -fx-background-radius: 0;
+    -fx-padding: 0.0em 0.25em 0.0em 0.0em; /* 0 3 0 0 */
+}
+
+.titled-pane > .title > .arrow-button > .arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.25em 0.3125em 0.25em 0.3125em; /* 3 3.75 3 3.75 */
+    -fx-shape: "M 0 0 h 7 l -3.5 4 z";
+}
+
+.titled-pane > *.content {
+    -fx-background-color:
+        -fx-box-border,
+        linear-gradient(to bottom, derive(-fx-color,-02%), derive(-fx-color,65%) 12%, derive(-fx-color,23%) 88%, derive(-fx-color,50%) 99%, -fx-box-border);
+    -fx-background-insets: 0, 0 1 1 1;
+    -fx-padding: 0.167em;
+}
+
+.titled-pane:focused > .title > .arrow-button > .arrow {
+    -fx-background-color: white;
+}
+
+
+/*******************************************************************************
+ *                                                                             *
+ * Accordion                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.accordion > .titled-pane > .title {
+    -fx-background-color:
+        -fx-box-border,
+        -fx-inner-border,
+        -fx-body-color;
+    -fx-background-insets: -1 0 0 0, 0 1 1 1, 1 2 2 2;
+    -fx-background-radius: 0, 0, 0;
+}
+
+.accordion > .first-titled-pane > .title {
+    -fx-background-insets: 0, 1, 2;
+}
+
+.accordion > .titled-pane:focused > .title {
+    -fx-color: -fx-focus-color;
+}
+
+.accordion > .titled-pane:focused {
+    -fx-text-fill: white;
+}
+
+.accordion > .titled-pane:focused > .title > .arrow-button > .arrow {
+    -fx-background-color: white;
+}
+
+.accordion > .titled-pane:focused > .titled-pane:collapsed > .title > .arrow-button > .arrow {
+    -fx-background-color: white;
+}
+
+.accordion > .titled-pane:collapsed:focused > .title {
+    -fx-color: -fx-focus-color;
+}
+
+.accordion > .titled-pane:expanded:focused > .title {
+    -fx-color: -fx-focus-color;
+}
+
+.accordion > .titled-pane:hover > .title {
+    -fx-color: -fx-hover-base;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * SplitPane                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.tab-pane > * > .tab-pane,
+.tab-pane > * > .table-view,
+.tab-pane > * > .list-view,
+.tab-pane > * > .tree-view,
+.tab-pane > * > .scroll-pane,
+.tab-pane > * > .split-pane,
+.split-pane > * > .tab-pane,
+.split-pane > * > .table-view,
+.split-pane > * > .list-view,
+.split-pane > * > .tree-view,
+.split-pane > * > .scroll-pane,
+.split-pane > * > .split-pane {
+    -fx-background-insets: 0, 0;
+    -fx-padding: 0;
+ }
+
+.split-pane {
+    -fx-background-color: -fx-box-border, -fx-control-inner-background;
+    -fx-background-insets: 0, 1;
+    -fx-padding: 1;
+}
+
+.split-pane > .split-pane-divider {
+    -fx-padding: 0 2 0 2; /* 0 3 0 3 */
+}
+
+/* horizontal the two nodes are placed to the left/right of each other. */
+.split-pane:horizontal > .split-pane-divider {
+   -fx-border-color: transparent -fx-box-border transparent #BBBBBB;
+   -fx-background-color: transparent, -fx-inner-border-horizontal;
+   -fx-background-insets: 0, 0 1 0 1;
+}
+
+/* vertical the two nodes are placed on top of each other. */
+.split-pane:vertical > .split-pane-divider {
+   -fx-border-color:  #BBBBBB transparent -fx-box-border transparent;
+   -fx-background-color: transparent, -fx-inner-border;
+   -fx-background-insets: 0, 1 0 1 0;
+}
+
+.split-pane > .split-pane-divider > .horizontal-grabber {
+    -fx-padding: 5 1 5 1;
+    -fx-background-color: #FFFFFF, -fx-box-border;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-shape: "M0 0 L0 0 L2 0 L2 2 L0 2 Z M0 4 L0 4 L2 4 L2 6 L0 6 Z M0 8 L0 8 L2 8 L2 10 L0 10 Z";
+}
+
+.split-pane > .split-pane-divider > .vertical-grabber {
+    -fx-padding: 1 5 1 5;
+    -fx-background-color: #FFFFFF, -fx-box-border;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-shape: "M0 0 L0 0 L2 0 L2 2 L0 2 Z M4 0 L4 0 L4 2 L6 2 L6 0 Z M8 0 L8 0 L8 2 L10 2 L10 0 Z";
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * TabPane                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+
+.tab-pane {
+    /* -fx-tab-min-width: 4.583em;  55 */
+    /* -fx-tab-max-width: 4.583em; 55 */
+    -fx-tab-min-height: 1.75em; /* 21 */
+    -fx-tab-max-height: 1.75em; /* 21 */
+}
+
+.tab-pane > .tab-header-area > .headers-region > .tab > .tab-container > .tab-label {
+    -fx-background-color: transparent;
+    -fx-alignment: CENTER;
+    -fx-text-fill: -fx-text-base-color;
+}
+/*
+.tab *.tab-label Text {
+    -fx-effect: dropshadow(two-pass-box , rgba(255, 255, 255, 0.4), 1, 0.0 , 0, 1);
+}*/
+
+.tab-pane > .tab-content-area {
+    -fx-background-color: -fx-control-inner-background;
+    -fx-padding: 0.0em; /* 0 */
+    /* -fx-opacity: -fx-disabled-opacity;*/
+}
+
+.tab-pane > .tab-header-area > .headers-region > .tab {
+    /* This is how it is done in Button, but the -1 inset caused a white line  */
+    /* to appear beneath the tab, which looks bad, so it's taken out below.    */
+/*    -fx-background-color: -fx-shadow-highlight-color, -fx-tab-border-color, -fx-inner-border, -fx-body-color;
+    -fx-background-radius: 5 5 0 0, 5 5 0 0, 4 4 0 0, 3 3 0 0;
+    -fx-background-insets: 0 0 -1 0, 0, 1, 2;*/
+    /*-fx-background-insets: 0, 1, 2;*/
+    -fx-background-insets: 0 1 1 0, 1 2 1 1, 2 3 1 2;
+    -fx-background-radius: 5 5 0 0, 4 4 0 0, 3 3 0 0;
+    -fx-padding: 0.083333em 0.5em 0.083333em 0.5em; /* 1 6 1 6 */
+/*    -fx-text-fill: -fx-text-base-color;*/
+}
+
+.tab-pane > .tab-header-area > .headers-region > .tab:top {
+    -fx-background-color: -fx-tab-border-color, -fx-inner-border, -fx-body-color;
+}
+
+.tab-pane > .tab-header-area > .headers-region > .tab:right {
+    -fx-background-color: -fx-tab-border-color, -fx-inner-border-bottomup, -fx-body-color-bottomup;
+}
+
+.tab-pane > .tab-header-area > .headers-region > .tab:bottom {
+    -fx-background-color: -fx-tab-border-color, -fx-inner-border-bottomup, -fx-body-color-bottomup;
+}
+
+.tab-pane > .tab-header-area > .headers-region > .tab:left {
+    -fx-background-color: -fx-tab-border-color, -fx-inner-border, -fx-body-color;
+}
+
+.tab-pane > .tab-header-area > .headers-region > .tab:hover {
+    -fx-color: -fx-hover-base;
+}
+
+.tab-pane > .tab-header-area > .headers-region > .tab:selected {
+/*    -fx-background-color: white;*/
+
+/*    -fx-background-color: -fx-tab-border-color, -fx-inner-border, -fx-body-color;
+    -fx-background-radius: 5 5 0 0, 4 4 0 0, 3 3 0 0;
+    -fx-background-insets: 0, 1 1 0 1, 2 2 0 2;*/
+    -fx-background-color: -fx-tab-border-color, -fx-control-inner-background;
+    -fx-background-insets: 0 1 0 0, 1 2 0 1;
+    -fx-background-radius: 5 5 0 0, 4 4 0 0;
+}
+
+.tab-pane:focused > .tab-header-area > .headers-region > .tab:selected .focus-indicator {
+    -fx-border-style: segments(0.166667em, 0.166667em);
+    -fx-border-width: 1;
+    -fx-border-color: -fx-focus-color;
+}
+
+.tab-pane > .tab-header-area > .headers-region > .tab:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.tab-pane > .tab-header-area > .headers-region > .tab:disabled:hover {
+    -fx-color: -fx-base;
+    -fx-opacity: -fx-disabled-opacity;
+}
+
+.tab-pane > .tab-header-area > .tab-header-background {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, derive(-fx-color, -20%);
+    -fx-effect: innershadow(two-pass-box , rgba(0,0,0,0.6) , 4, 0.0 , 0 , 0);
+}
+
+/*.tab-pane *.tab-header-area {*/
+    /* I would like to use -fx-tab-border-color here, but for some reason it */
+    /* just isn't the correct color, even though it works in :top above */
+/*    -fx-background-color: -fx-tab-border-color, lightgray;*/
+/*}*/
+
+.tab-pane:top > .tab-header-area {
+    -fx-background-insets: 0, 0 0 1 0;
+    -fx-padding: 0.416667em 0.166667em 0.0em 0.833em; /* 5 2 0 10 */
+}
+
+.tab-pane:bottom > .tab-header-area {
+    -fx-background-insets: 0, 1 0 0 0;
+    -fx-padding: 0 0.166667em 0.416667em 0.833em; /* 0 2 5 0 */
+}
+
+.tab-pane:left > .tab-header-area {
+    -fx-background-insets: 0, 0 1 0 0;
+    -fx-padding: 0.833em 0.0em 0.166667em 0.416667em; /* 10 0 2 5 */
+}
+
+.tab-pane:right > .tab-header-area {
+    -fx-background-insets: 0, 0 0 0 1;
+    -fx-padding: 0.833em 0.416667em 0.166667em 0.0em; /* 10 5 2 0 */
+}
+
+/* TODO: scaling the shape seems to make it way too large */
+.tab-pane > .tab-header-area > .headers-region > .tab > .tab-container > .tab-close-button {
+    -fx-background-color: -fx-mark-color;
+    -fx-shape: "M 0,0 H1 L 4,3 7,0 H8 V1 L 5,4 8,7 V8 H7 L 4,5 1,8 H0 V7 L 3,4 0,1 Z";
+    -fx-scale-shape: false;
+    -fx-effect: dropshadow(two-pass-box , rgba(255, 255, 255, 0.4), 1, 0.0 , 0, 1);
+}
+
+.tab-pane > .tab-header-area > .headers-region > .tab > .tab-container > .tab-close-button:hover {
+    -fx-background-color: derive(-fx-mark-color, -30%);
+}
+
+/* CONTROL BUTTONS */
+.tab-pane > .tab-header-area > .control-buttons-tab {
+    -fx-background-color: -fx-tab-border-color, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 5 5 0 0, 4 4 0 0, 3 3 0 0;
+    -fx-padding: 0.083333em 0.25em 0.083333em 0.25em; /* 1 3 1 3 */
+}
+
+.tab-pane > .tab-header-area > .control-buttons-tab > .container > .tab-down-button {
+    -fx-background-color: transparent;
+    -fx-padding: 0.0em 0.416667em 0.0em 0.416667em; /* 0 5 0 5 */
+}
+
+.tab-pane > .tab-header-area > .control-buttons-tab > .container > .tab-down-button:hover {
+    -fx-background-color: -fx-body-color;
+    -fx-color: -fx-hover-base;
+}
+
+.tab-pane > .tab-header-area > .control-buttons-tab > .container > .tab-down-button .arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.238083em 0.416667em 0.238083em 0.416667em; /* 2.857 5 2.857 5 */
+    -fx-shape: "M 0 0 H 7 L 3.5 4 z";
+}
+
+/* FLOATING TABS CUSTOMISATION */
+.tab-pane.floating > .tab-header-area > .tab-header-background {
+    -fx-background-color: null;
+}
+
+.tab-pane.floating > .tab-header-area {
+    -fx-background-color: null;
+}
+
+.tab-pane.floating > .tab-content-area {
+    -fx-background-color: -fx-tab-border-color, -fx-control-inner-background;
+    -fx-background-insets: 0, 1;
+    -fx-background-radius: 5, 4;
+    -fx-padding: 2;
+}
+
+.tab-pane.floating > .tab-header-area > .headers-region > .tab {
+    -fx-background-color: -fx-tab-border-color, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0 1 1 0, 1 2 1 1, 2 3 1 2;
+    -fx-background-radius: 5 5 0 0, 4 4 0 0, 3 3 0 0;
+}
+
+.tab-pane.floating  > .tab-header-area > .headers-region > .tab:selected {
+    -fx-background-color: -fx-tab-border-color, -fx-control-inner-background;
+    -fx-background-insets: 0 1 -1 0, 1 2 -1 1;
+    -fx-background-radius: 5 5 0 0, 4 4 0 0;
+}
+
+/*.tab-pane:floating *.control-buttons-tab {
+    -fx-padding: 0.083333em 0.25em 0.083333em 0.25em;
+    -fx-background-color: -fx-tab-border-color, -fx-inner-border, -fx-body-color;
+    -fx-background-radius: 5 5 0 0, 4 4 0 0, 3 3 0 0;
+    -fx-background-insets: 0, 1 1 0 1, 2 2 0 2;
+}*/
+
+
+
+
+/* ====== CHART TOP LEVEL ITEMS =========================================================== */
+.chart {
+    -fx-padding: 5px;
+}
+.chart-content {
+    -fx-padding: 10px;
+}
+.chart-title {
+    -fx-font-size: 1.4em;
+}
+.chart-legend {
+   -fx-background-color: ladder(-fx-background, derive(-fx-box-border, -10%) 50%, derive(-fx-box-border, 10%) 51%),
+                         ladder(-fx-background, derive(-fx-control-inner-background, 5%) 50%, derive(-fx-control-inner-background, -5%) 51%);
+   -fx-background-insets: 0,1;
+   -fx-background-radius: 6,5;
+   -fx-padding: 6px;
+}
+
+/* ====== AXIS ============================================================================ */
+.axis {
+    -fx-tick-label-font-size: 0.833333em;  /* 10 pix */
+    -fx-tick-label-fill: -fx-text-background-color;
+}
+.axis:top {
+    -fx-border-color: transparent transparent #666666 transparent;
+}
+.axis:right {
+    -fx-border-color: transparent transparent transparent #666666;
+}
+.axis:bottom {
+    -fx-border-color: #666666 transparent transparent transparent;
+}
+.axis:left {
+    -fx-border-color: transparent #666666 transparent transparent;
+}
+.axis-tick-mark {
+    -fx-fill: null;
+    -fx-stroke: #666666;
+}
+.axis-minor-tick-mark {
+    -fx-fill: null;
+    -fx-stroke: #AAAAAA;
+}
+
+.axis .text {
+  -fx-font-smoothing-type: lcd;
+}
+
+/* ====== CHART PLOT BACKGROUND =========================================================== */
+.chart-plot-background {
+    -fx-background-color: #f5f5f5;
+}
+.chart-vertical-grid-lines {
+    -fx-stroke: #dddddd;
+}
+.chart-horizontal-grid-lines {
+    -fx-stroke: #dddddd;
+}
+.chart-alternative-column-fill {
+    -fx-fill: #eeeeee;
+    -fx-stroke: transparent;
+    -fx-stroke-width: 0;
+}
+.chart-alternative-row-fill {
+    -fx-fill: #eeeeee;
+    -fx-stroke: transparent;
+    -fx-stroke-width: 0;
+}
+.chart-vertical-zero-line {
+    -fx-stroke: #999999;
+}
+.chart-horizontal-zero-line {
+    -fx-stroke: #999999;
+}
+/* ====== SCATTER CHART =========================================================== */
+.chart-symbol { /* solid circle */
+    -fx-background-color: #f9d900;
+    -fx-background-radius: 5px;
+    -fx-padding: 5px;
+}
+.default-color1.chart-symbol { /* solid square */
+    -fx-background-color: #a9e200;
+    -fx-background-radius: 0;
+}
+.default-color2.chart-symbol { /* solid diamond */
+    -fx-background-color: #22bad9;
+    -fx-background-radius: 0;
+    -fx-padding: 7px 5px 7px 5px;
+    -fx-shape: "M5,0 L10,9 L5,18 L0,9 Z";
+}
+.default-color3.chart-symbol { /* cross */
+    -fx-background-color: #0181e2;
+    -fx-background-radius: 0;
+    -fx-background-insets: 0;
+    -fx-shape: "M2,0 L5,4 L8,0 L10,0 L10,2 L6,5 L10,8 L10,10 L8,10 L5,6 L2,10 L0,10 L0,8 L4,5 L0,2 L0,0 Z";
+}
+.default-color4.chart-symbol { /* solid triangle */
+    -fx-background-color: #2f357f;
+    -fx-background-radius: 0;
+    -fx-background-insets: 0;
+    -fx-shape: "M5,0 L10,8 L0,8 Z";
+}
+.default-color5.chart-symbol { /* hollow circle */
+    -fx-background-color: #860061, white;
+    -fx-background-insets: 0, 2;
+    -fx-background-radius: 5px;
+    -fx-padding: 5px;
+}
+.default-color6.chart-symbol { /* hollow square */
+    -fx-background-color: #c62b00, white;
+    -fx-background-insets: 0, 2;
+    -fx-background-radius: 0;
+}
+.default-color7.chart-symbol { /* hollow diamond */
+    -fx-background-color: #ff5700, white;
+    -fx-background-radius: 0;
+    -fx-background-insets: 0, 2.5;
+    -fx-padding: 7px 5px 7px 5px;
+    -fx-shape: "M5,0 L10,9 L5,18 L0,9 Z";
+}
+
+/* ====== LINE CHART =========================================================== */
+.chart-line-symbol {
+    -fx-background-color: #f9d900, white;
+    -fx-background-insets: 0, 2;
+    -fx-background-radius: 5px;
+    -fx-padding: 5px;
+}
+.chart-series-line {
+    -fx-stroke: #f9d900;
+    -fx-stroke-width: 4px;
+    -fx-effect: dropshadow( two-pass-box , rgba(0,0,0,0.3) , 8, 0.0 , 0 , 3 );
+}
+.default-color0.chart-line-symbol { -fx-background-color: #f9d900, white; }
+.default-color1.chart-line-symbol { -fx-background-color: #a9e200, white; }
+.default-color2.chart-line-symbol { -fx-background-color: #22bad9, white; }
+.default-color3.chart-line-symbol { -fx-background-color: #0181e2, white; }
+.default-color4.chart-line-symbol { -fx-background-color: #2f357f, white; }
+.default-color5.chart-line-symbol { -fx-background-color: #860061, white; }
+.default-color6.chart-line-symbol { -fx-background-color: #c62b00, white; }
+.default-color7.chart-line-symbol { -fx-background-color: #ff5700, white; }
+.default-color0.chart-series-line { -fx-stroke: #f9d900; }
+.default-color1.chart-series-line { -fx-stroke: #a9e200; }
+.default-color2.chart-series-line { -fx-stroke: #22bad9; }
+.default-color3.chart-series-line { -fx-stroke: #0181e2; }
+.default-color4.chart-series-line { -fx-stroke: #2f357f; }
+.default-color5.chart-series-line { -fx-stroke: #860061; }
+.default-color6.chart-series-line { -fx-stroke: #c62b00; }
+.default-color7.chart-series-line { -fx-stroke: #ff5700; }
+
+/* ====== AREA CHART =========================================================== */
+.chart-area-symbol {
+    -fx-background-color: #f9d900, white;
+    -fx-background-insets: 0, 1;
+    -fx-background-radius: 4px; /* makes sure this remains circular */
+    -fx-padding: 3px;
+}
+.default-color0.chart-area-symbol { -fx-background-color: #f9d900, white; }
+.default-color1.chart-area-symbol { -fx-background-color: #a9e200, white; }
+.default-color2.chart-area-symbol { -fx-background-color: #22bad9, white; }
+.default-color3.chart-area-symbol { -fx-background-color: #0181e2, white; }
+.default-color4.chart-area-symbol { -fx-background-color: #2f357f, white; }
+.default-color5.chart-area-symbol { -fx-background-color: #860061, white; }
+.default-color6.chart-area-symbol { -fx-background-color: #c62b00, white; }
+.default-color7.chart-area-symbol { -fx-background-color: #ff5700, white; }
+.chart-series-area-line {
+    -fx-stroke: #f9d900;
+    -fx-stroke-width: 1px;
+}
+.default-color0.chart-series-area-line { -fx-stroke: #c2a902; }
+.default-color1.chart-series-area-line { -fx-stroke: #88b501; }
+.default-color2.chart-series-area-line { -fx-stroke: #22bad9; }
+.default-color3.chart-series-area-line { -fx-stroke: #0181e2; }
+.default-color4.chart-series-area-line { -fx-stroke: #2f357f; }
+.default-color5.chart-series-area-line { -fx-stroke: #860061; }
+.default-color6.chart-series-area-line { -fx-stroke: #c62b00; }
+.default-color7.chart-series-area-line { -fx-stroke: #ff5700; }
+.chart-series-area-fill {
+    -fx-stroke: null;
+    -fx-fill: #f9d90044;
+}
+.default-color0.chart-series-area-fill { -fx-fill: #f9d90044; }
+.default-color1.chart-series-area-fill { -fx-fill: #a9e20044; }
+.default-color2.chart-series-area-fill { -fx-fill: #22bad944; }
+.default-color3.chart-series-area-fill { -fx-fill: #0181e244; }
+.default-color4.chart-series-area-fill { -fx-fill: #2f357f44; }
+.default-color5.chart-series-area-fill { -fx-fill: #86006144; }
+.default-color6.chart-series-area-fill { -fx-fill: #c62b0044; }
+.default-color7.chart-series-area-fill { -fx-fill: #ff570044; }
+.area-legend-symbol {
+    -fx-padding: 6px;
+    -fx-background-radius: 6px; /* makes sure this remains circular */
+    -fx-background-insets: 0, 3;
+}
+/* ====== BUBBLE CHART =========================================================== */
+.bubble-legend-symbol {
+    -fx-background-radius: 8px;
+    -fx-padding: 8px;
+}
+.chart-bubble {
+    -fx-bubble-fill: #f9d900;
+    -fx-background-color: radial-gradient(center 50% 50%, radius 80%, derive(-fx-bubble-fill,20%), derive(-fx-bubble-fill,-30%));
+}
+.default-color0.chart-bubble { -fx-bubble-fill: #f9d900aa; }
+.default-color1.chart-bubble { -fx-bubble-fill: #a9e200aa; }
+.default-color2.chart-bubble { -fx-bubble-fill: #22bad9aa; }
+.default-color3.chart-bubble { -fx-bubble-fill: #0181e2aa; }
+.default-color4.chart-bubble { -fx-bubble-fill: #2f357faa; }
+.default-color5.chart-bubble { -fx-bubble-fill: #860061aa; }
+.default-color6.chart-bubble { -fx-bubble-fill: #c62b00aa; }
+.default-color7.chart-bubble { -fx-bubble-fill: #ff5700aa; }
+
+/* ====== BAR CHART =========================================================== */
+/* TODO flip gradient vertical for negative bars */
+.chart-bar {
+    -fx-bar-fill: #22bad9;
+    -fx-background-color: linear-gradient(derive(-fx-bar-fill,-30%), derive(-fx-bar-fill,-40%)),
+                          linear-gradient(derive(-fx-bar-fill,80%), derive(-fx-bar-fill, 0%)),
+                          linear-gradient(derive(-fx-bar-fill,30%), derive(-fx-bar-fill,-10%));
+    -fx-background-insets: 0,1,2;
+    -fx-background-radius: 5 5 0 0, 4 4 0 0, 3 3 0 0;
+}
+
+.negative.chart-bar {
+   -fx-background-color: linear-gradient(to top, derive(-fx-bar-fill,-30%), derive(-fx-bar-fill,-40%)),
+                          linear-gradient(to top, derive(-fx-bar-fill, 80%), derive(-fx-bar-fill,0%)),
+                          linear-gradient(to top, derive(-fx-bar-fill,30%), derive(-fx-bar-fill,-10%));
+   -fx-background-radius: 0 0 5 5, 0 0 4 4, 0 0 3 3;
+}
+.bar-chart:horizontal .chart-bar, .stacked-bar-chart:horizontal .chart-bar {
+    -fx-background-color: linear-gradient(to left, derive(-fx-bar-fill,-30%), derive(-fx-bar-fill,-40%)),
+                          linear-gradient(to left, derive(-fx-bar-fill,80%), derive(-fx-bar-fill, 0%)),
+                          linear-gradient(to left, derive(-fx-bar-fill,30%), derive(-fx-bar-fill,-10%));
+    -fx-background-radius: 0 5 5 0, 0 4 4 0, 0 3 3 0;
+}
+.bar-chart:horizontal .negative.chart-bar, .stacked-bar-chart:horizontal .negative.chart-bar {
+    -fx-background-color: linear-gradient(to right, derive(-fx-bar-fill,-30%), derive(-fx-bar-fill,-40%)),
+                          linear-gradient(to right, derive(-fx-bar-fill, 80%), derive(-fx-bar-fill, 0%)),
+                          linear-gradient(to right, derive(-fx-bar-fill,30%), derive(-fx-bar-fill,-10%));
+    -fx-background-radius: 5 0 0 5, 4 0 0 4, 3 0 0 3;
+}
+.default-color0.chart-bar { -fx-bar-fill: #f9d900; }
+.default-color1.chart-bar { -fx-bar-fill: #a9e200; }
+.default-color2.chart-bar { -fx-bar-fill: #22bad9; }
+.default-color3.chart-bar { -fx-bar-fill: #0181e2; }
+.default-color4.chart-bar { -fx-bar-fill: #2f357f; }
+.default-color5.chart-bar { -fx-bar-fill: #860061; }
+.default-color6.chart-bar { -fx-bar-fill: #c62b00; }
+.default-color7.chart-bar { -fx-bar-fill: #ff5700; }
+.bar-legend-symbol {
+    -fx-padding: 8px;
+}
+/* ====== PIE CHART ============================================================== */
+.chart-pie {
+    -fx-pie-color: #2f357f;
+    -fx-background-color: radial-gradient(radius 100%, derive(-fx-pie-color,55%), derive(-fx-pie-color,-20%));
+    -fx-background-insets: 0;
+    -fx-border-color: derive(-fx-pie-color,-30%);
+}
+.chart-pie-label {
+    -fx-padding: 3px;
+    -fx-fill: -fx-text-base-color;
+}
+.chart-pie-label-line {
+    -fx-stroke: #aaaaaa;
+    -fx-fill: #aaaaaa;
+}
+.default-color0.chart-pie { -fx-pie-color: #f9d900; }
+.default-color1.chart-pie { -fx-pie-color: #a9e200; }
+.default-color2.chart-pie { -fx-pie-color: #22bad9; }
+.default-color3.chart-pie { -fx-pie-color: #0181e2; }
+.default-color4.chart-pie { -fx-pie-color: #2f357f; }
+.default-color5.chart-pie { -fx-pie-color: #860061; }
+.default-color6.chart-pie { -fx-pie-color: #c62b00; }
+.default-color7.chart-pie { -fx-pie-color: #ff5700; }
+.negative.chart-pie {
+    -fx-pie-color: transparent;
+    -fx-background-color: white;
+}
+.pie-legend-symbol.chart-pie {
+    -fx-background-radius: 8px;
+    -fx-padding: 8px;
+    -fx-border-color: null;
+}
+
+/* -------------- CODE  FOR THE NON-EDITABLE COMBO-BOX -------------- */
+
+/* ------- MAIN BUTTON ------- */
+.combo-box-base  {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-radius: 5, 5, 4, 3;
+    -fx-background-insets: 0 0 -1 0, 0, 1, 2;
+    -fx-padding: 0;
+}
+
+.combo-box-base:hover {
+    -fx-color: -fx-hover-base;
+}
+
+/*------- THIS SPECIFIES THE BUTTON COLOR WHEN THE POPUP MENU IS SHOWING -------*/
+.combo-box-base:showing {
+    -fx-color: -fx-pressed-base;
+}
+
+.combo-box-base:focused {
+    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-radius: 6.4, 4, 5, 3;
+    -fx-background-insets: -1.4, 0, 1, 2;
+}
+
+.combo-box-base:disabled {
+    -fx-opacity: .4;
+}
+
+/* ------- OPEN BUTTON ------- */
+.combo-box-base > .arrow-button {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 0 5 5 0, 0 4 4 0, 0 3 3 0;
+    -fx-padding: 0 0.667em 0 0.667em; /* 6 8 6 8 */
+    /*-fx-padding: 0; *//* 6 8 6 8 */
+}
+
+.combo-box-base:hover > .arrow-button,
+.date-picker:hover > .arrow-button {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 0 5 5 0, 0 4 4 0, 0 3 3 0;
+}
+
+.combo-box-base:showing > .arrow-button,
+.date-picker:showing > .arrow-button {
+    -fx-color: -fx-pressed-base;
+}
+
+/* ------- ARROW* ------- */
+.combo-box-base > .arrow-button > .arrow,
+.web-view .form-select-button .arrow {
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-padding: 0.166667em 0.333333em 0.166667em 0.333333em; /* 2 4 2 4 */
+    -fx-shape: "M 0 0 h 7 l -3.5 4 z";
+}
+
+.web-view .form-select-button {
+    -fx-background-radius: 2, 2, 1, 0;
+    -fx-background-insets: 2 2 1 2, 2, 3, 4;
+}
+
+/* ------- POPUP MENU ------- */
+/* --- .combo-box .popup-menu, .combo-box .menu-item, .combo-box .popup-menu .menu-item-radio
+all inherit from Menu Control's popup-menu. --- */
+
+
+/* -------------- CODE  FOR THE EDITABLE COMBO-BOX -------------- */
+
+/* ------- TEXTBOX SEGMENT OF COMBO BOX ------- */
+/*--- The editable ComboBox TextBox inherits its properties from the TextBox Control.
+Only the properties with values that are different from the TextBox are specified here. ---*/
+
+.combo-box-base:editable > .text-field,
+.date-picker > .text-field {
+    -fx-padding: 0.166667em 0.416667em 0.25em 0.416667em; /* 2 5 3 5 */
+    /*-fx-padding: 0px;*/
+    /*-fx-background-color: yellow;*/
+    -fx-background-radius: 4 0 0 4, 3 0 0 3, 2 0 0 2;
+    -fx-background-insets: 0 0 -1 0, 0, 1 0 1 1;
+}
+
+.combo-box-base:editable:focused,
+.date-picker:focused {
+    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-control-inner-background;
+    -fx-background-radius: 5.4, 3, 2;
+    -fx-background-insets: -1.4, 0, 1;
+}
+
+/* -------------- STYLES FOR THE DEFAULT LISTVIEW-BASED COMBOBOX ------------- */
+
+/* Customise the ListCell that appears in the ComboBox button itself */
+.combo-box > .list-cell {
+    -fx-background: transparent;
+    -fx-background-color: transparent;
+    -fx-text-fill: -fx-text-base-color;
+    -fx-padding: 0.25em 0 0.166667em 0.583333em; /* 3 0 2 7 */
+    -fx-cell-size: 1.7500em; /* 21 */
+}
+
+.combo-box-popup > .list-view {
+    -fx-background-color: -fx-box-border, -fx-control-inner-background;
+    -fx-background-insets: 0, 1;
+    -fx-effect: dropshadow( three-pass-box , rgba(0,0,0,0.6) , 8, 0.0 , 0 , 0 );
+}
+
+.combo-box-popup > .list-view > .virtual-flow > .clipped-container > .sheet > .list-cell {
+    -fx-padding: 4 0 4 5;
+
+    /* No alternate highlighting */
+    -fx-background-color: -fx-control-inner-background;
+}
+
+.combo-box-popup > .list-view > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:selected,
+.combo-box-popup  > .list-view > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:selected:hover {
+    -fx-background: -fx-accent;
+    -fx-background-color: -fx-selection-bar;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+.combo-box-popup  > .list-view > .virtual-flow > .clipped-container > .sheet > .list-cell:filled:hover {
+    -fx-background-color: -fx-cell-hover-color;
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+.combo-box-popup > .list-view > .placeholder > .label {
+    -fx-text-fill: derive(-fx-control-inner-background,-30%);
+}
+
+/* -------------------------- STYLES FOR THE COLOR-PICKER CONTROL ----- */
+
+.color-picker {
+    -fx-color-rect-width: 0.916667em; /* 11px */
+    -fx-color-rect-height: 0.916667em; /* 11px */
+}
+.color-picker > .arrow-button {
+    -fx-background-color: null;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 0 5 5 0, 0 4 4 0, 0 3 3 0;
+}
+
+.combo-box-base.color-picker.split-button > .arrow-button {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 0 5 5 0, 0 4 4 0, 0 3 3 0;
+    -fx-padding: 0.5em 0.416667em 0.5em 0.416667em; /* 6 5 6 5 */
+}
+
+.color-picker:hover {
+    -fx-color: -fx-base;
+}
+
+/** Fix for RT-35422 where border was being shown incorrectly on non-split-buttons */
+.combo-box-base.color-picker:hover > .arrow-button {
+    -fx-background-insets: 0, 1 1 1 0, 2 2 2 0;
+}
+
+.color-picker.button {
+    -fx-padding: 0 5 0 0;
+}
+
+.color-picker.button > .arrow-button {
+    -fx-background-color: -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 1;
+    -fx-background-radius: 0 5 5 0, 0 4 4 0;
+}
+
+.color-picker > .split-button > .arrow-button:hover {
+    -fx-color: -fx-hover-base;
+}
+
+.color-picker > .split-button > .color-picker-label:hover {
+     -fx-color: -fx-hover-base;
+}
+
+.color-picker > .color-picker-label > .picker-color {
+    -fx-padding: 0.416667em 0.333333em 0.416667em 0.333333em; /* 5 4 5 4 */
+    -fx-background-color: null;
+}
+
+.color-picker > .color-picker-label > .picker-color > .picker-color-rect {
+    -fx-stroke: -fx-pressed-base;
+    -fx-stroke-type: inside;
+}
+
+.color-palette {
+    -fx-spacing: 15px;
+     -fx-background-color:
+        derive(-fx-color,-40%),
+        derive(-fx-color,100%),
+        linear-gradient(to bottom,
+        derive(-fx-color,100%) 0%,
+        derive(-fx-color,50%) 12%,
+        derive(-fx-color,65%) 88%,
+        derive(-fx-color,23%) 100%);
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 0 6 6 6, 0 5 5 5, 0 4 4 4;
+    -fx-padding: 15 15 15 15;
+    -fx-effect: dropshadow( three-pass-box , rgba(0,0,0,0.6) , 8, 0.0 , 0 , 0 );
+}
+
+.color-palette > .color-picker-grid > .color-square > .color-rect {
+    -fx-stroke: black;
+    -fx-stroke-width: 0.4;
+    -fx-border-color: black;
+}
+
+.color-palette > .color-picker-grid {
+    -fx-border-color: transparent;
+}
+
+.color-palette > .color-picker-grid > .color-square {
+    -fx-background-color: transparent;
+    -fx-background-insets: -1, 0;
+    -fx-padding: 0.5;
+    -fx-border: black;
+}
+
+/* the color over which the user is hovering */
+.color-palette-region > .color-square.hover-square {
+    -fx-background-color: black;
+    -fx-background-insets: -1;
+    -fx-padding: 1;
+}
+
+.color-palette > .separator > .line {
+    -fx-border-color: -fx-text-box-border transparent transparent transparent,
+        -fx-shadow-highlight-color transparent transparent transparent;
+    -fx-border-insets: 0, 1 0 0 0;
+    -fx-border-style: none;
+    -fx-padding: 0;
+}
+
+
+/* ------- CUSTOM COLOR DIALOG ------- */
+.custom-color-dialog > .color-rect-pane {
+    -fx-spacing: 0.75em;
+    -fx-pref-height: 16.666667em;
+    -fx-alignment: top-left;
+    -fx-fill-height: true;
+}
+
+.custom-color-dialog .color-rect-pane .color-rect {
+    -fx-min-width: 16.666667em;
+    -fx-min-height: 16.666667em;
+}
+
+.custom-color-dialog .color-rect-pane .color-rect-border {
+    -fx-border-color: derive(-fx-base, -20%);
+}
+
+.custom-color-dialog > .color-rect-pane #color-rect-indicator {
+    -fx-background-color: null;
+    -fx-border-color: white;
+    -fx-border-radius: 0.4166667em;
+    -fx-translate-x: -0.4166667em;
+    -fx-translate-y: -0.4166667em;
+    -fx-pref-width: 0.833333em;
+    -fx-pref-height: 0.833333em;
+    -fx-effect: dropshadow(three-pass-box, black, 2, 0.0, 0, 1);
+}
+
+.custom-color-dialog > .color-rect-pane > .color-bar {
+    -fx-min-width: 1.666667em;
+    -fx-min-height: 16.666667em;
+    -fx-max-width: 1.666667em;
+    -fx-border-color: derive(-fx-base, -20%);
+}
+
+.custom-color-dialog > .color-rect-pane > .color-bar > #color-bar-indicator {
+    -fx-border-radius: 0.333333em;
+    -fx-border-color: white;
+    -fx-effect: dropshadow(three-pass-box, black, 2, 0.0, 0, 1);
+    -fx-pref-width: 2em;
+    -fx-pref-height: 0.833333em;
+    -fx-translate-x: -0.1666667em;
+    -fx-translate-y: -0.4166667em;
+}
+
+.custom-color-dialog  {
+    -fx-background-color: -fx-background;
+    -fx-padding: 1.25em;
+    -fx-spacing: 1.25em;
+}
+
+/* The fix for RT-37494 forces the web color text's major direction to
+ * LTR. The following keeps the text right-aligned when in RTL mode. */
+.custom-color-dialog .webcolor-field:dir(rtl) > .text-field:dir(ltr) {
+    -fx-alignment: baseline-right;
+}
+
+
+/* -------- Toggle Button ---------------- */
+.custom-color-dialog .controls-pane .toggle-button {
+    -fx-background-radius: 0.333333em, 0.333333em, 0.25em, 0.1666667em;
+    -fx-padding: 0.25em 0.5em 0.25em 0.5em;
+}
+
+.custom-color-dialog .controls-pane .toggle-button:focused {
+    -fx-background-color:
+        rgba(23,134,248,0.2),
+        -fx-focus-color,
+        -fx-inner-border,
+        -fx-body-color;
+}
+.custom-color-dialog .controls-pane .toggle-button:selected Text {
+    -fx-effect: dropshadow( one-pass-box , rgba(0,0,0,0.9) , 2, 0.0 , 0 , 1 );
+}
+
+.custom-color-dialog .controls-pane .toggle-button:selected {
+    -fx-background-color:
+        -fx-shadow-highlight-color,
+        linear-gradient( to bottom, derive(-fx-color,-90%) 0%, derive(-fx-color,-60%) 100% ),
+        linear-gradient( to bottom, derive(-fx-color,-60%) 0%, derive(-fx-color,-35%) 50%, derive(-fx-color,-30%) 98%, derive(-fx-color,-50%) 100% ),
+        linear-gradient( to right, rgba(0,0,0,0.3) 0%, rgba(0,0,0,0) 10%, rgba(0,0,0,0) 90%, rgba(0,0,0,0.3) 100% );
+    -fx-background-insets: 0 0 -0.083333em 0, 0, 0.083333em, 0.083333em;
+    /* TODO: -fx-text-fill should be derived */
+    -fx-text-fill: -fx-light-text-color;
+}
+.custom-color-dialog .controls-pane .left-pill {
+    -fx-background-radius: 0.25em 0 0 0.25em;
+    -fx-background-insets: 0 0 -0.083333em 0, 0, 0.083333em 0 0.083333em 0.083333em, 0.1666667em 0 0.1666667em 0.1666667em;
+    -fx-border-color: transparent -fx-outer-border transparent transparent;
+    -fx-border-insets: 0.333333em 0 0.333333em 0;
+    -fx-padding: -0.1666667em 0.666667em -0.1666667em 0.666667em;
+}
+.custom-color-dialog .controls-pane .left-pill:focused {
+    -fx-background-radius: 0.25em 0 0 0.25em;
+    -fx-background-insets: -0.11666667em 0 -0.11666667em -0.11666667em, 0 0 0 0, 0.083333em, 0.1666667em;
+    -fx-border-color: transparent;
+}
+.custom-color-dialog .controls-pane .left-pill:selected, .controls-pane .left-pill:selected:focused {
+    -fx-background-insets: 0 0 -0.083333em 0, 0, 0.083333em 0 0.083333em 0.083333em, 0.083333em 0 0.083333em 0.083333em;
+    -fx-border-color: transparent;
+}
+.custom-color-dialog .controls-pane .center-pill {
+    -fx-background-radius: 0;
+    -fx-background-insets: 0;
+    -fx-background-insets: 0 0 -0.083333em 0, 0, 0.083333em 0 0.083333em 0, 0.1666667em 0 0.1666667em 0;
+    -fx-border-color: transparent -fx-outer-border transparent transparent;
+    -fx-border-insets: 0.333333em 0 0.333333em 0;
+    -fx-padding: -0.1666667em 0.666667em -0.1666667em 0.666667em;
+}
+.custom-color-dialog .controls-pane .center-pill:focused {
+    -fx-background-radius: 0;
+    -fx-background-insets: -0.11666667em 0 -0.11666667em -0.083333em, 0 0 0 -0.083333em, 0.083333em 0.083333em 0.083333em 0, 0.1666667em 0.1666667em 0.1666667em 0.083333em;
+    -fx-border-color: transparent;
+}
+.custom-color-dialog .controls-pane .center-pill:selected, .controls-pane .center-pill:selected:focused {
+    -fx-background-insets: -0.11666667em 0 -0.11666667em -0.083333em, 0 0 0 -0.083333em, 0.083333em 0.083333em 0.083333em 0, 0.083333em 0.083333em 0.083333em 0;
+    -fx-border-color: transparent;
+}
+
+.custom-color-dialog .controls-pane .right-pill {
+    -fx-background-radius: 0 0.25em 0.25em 0;
+    -fx-background-insets: 0 0 -0.083333em 0, 0, 0.083333em 0.083333em 0.083333em 0, 0.1666667em 0.1666667em 0.1666667em 0;
+    -fx-padding: 0.25em 0.666667em 0.25em 0.666667em;
+}
+.custom-color-dialog .controls-pane .right-pill:focused {
+    -fx-background-radius: 0 0.25em 0.25em 0;
+    -fx-background-insets: -0.11666667em -0.11666667em -0.11666667em -0.083333em, 0 0 0 -0.083333em, 0.083333em 0.083333em 0.083333em 0, 0.1666667em 0.1666667em 0.1666667em 0.083333em;
+}
+.custom-color-dialog .controls-pane .right-pill:selected, .controls-pane .right-pill:selected:focused {
+    -fx-background-insets: -0.11666667em -0.11666667em -0.11666667em -0.083333em, 0 0 0 -0.083333em, 0.083333em 0.083333em 0.083333em 0, 0.083333em 0.083333em 0.083333em 0;
+}
+
+.custom-color-dialog .controls-pane .current-new-color-grid #current-new-color-border {
+    -fx-border-color: derive(-fx-base, -20%);
+    -fx-border-width: 2px;
+}
+
+.custom-color-dialog .controls-pane .current-new-color-grid .color-rect {
+    -fx-min-width: 10.666667em;
+    -fx-min-height: 1.75em;
+    -fx-pref-width: 10.666667em;
+    -fx-pref-height: 1.75em;
+}
+
+.custom-color-dialog .transparent-pattern {
+    -fx-background-image: url("pattern-transparent.png");
+    -fx-background-repeat: repeat;
+    -fx-background-size: auto;
+}
+
+.custom-color-dialog .controls-pane #spacer1 {
+    -fx-min-height: 0.1666667em;
+    -fx-max-height: 0.1666667em;
+    -fx-pref-height: 0.1666667em;
+}
+
+.custom-color-dialog .controls-pane #spacer2 {
+    -fx-min-height: 1em;
+    -fx-max-height: 1em;
+    -fx-pref-height: 1em;
+}
+
+.custom-color-dialog .controls-pane #settings-pane {
+    -fx-hgap: 0.4166667em;
+    -fx-vgap: 0.3333333em;
+}
+
+.custom-color-dialog .controls-pane #settings-pane .settings-label {
+    -fx-min-width: 5.75em;
+}
+
+.custom-color-dialog .controls-pane #settings-pane .settings-unit {
+    -fx-max-width: 1.5em;
+    -fx-min-width: 1.5em;
+    -fx-pref-width: 1.5em;
+}
+
+.custom-color-dialog .controls-pane #settings-pane .slider {
+    -fx-pref-width: 8.25em;
+}
+
+.custom-color-dialog .controls-pane .color-input-field {
+    -fx-pref-column-count: 3;
+    -fx-max-width: 3.25em;
+    -fx-min-width: 3.25em;
+    -fx-pref-width: 3.25em;
+}
+
+.custom-color-dialog .controls-pane .web-field {
+    -fx-pref-column-count: 6;
+    -fx-pref-width: 8.25em;
+}
+
+.custom-color-dialog .controls-pane #spacer-side {
+    -fx-min-width: 0.5em;
+    -fx-pref-width: 0.5em;
+}
+
+.custom-color-dialog .controls-pane #spacer-bottom {
+    -fx-pref-height: 0.833333em;
+    -fx-min-height: 0.833333em;
+}
+
+.custom-color-dialog .controls-pane .customcolor-controls-background {
+    -fx-background-color: -fx-text-box-border, -fx-control-inner-background;
+    -fx-background-insets:
+        0.8333333em 0 0.4166667em 0,
+        1em 0.166667em 0.5833333em 0.166667em;
+    -fx-background-radius: 0.3333333em, 0.166667em;
+}
+
+.custom-color-dialog .controls-pane .current-new-color-grid .label {
+    -fx-padding: 0 0 0 0.4166667em;
+}
+
+.custom-color-dialog .controls-pane #buttons-hbox {
+    -fx-spacing: 0.333333em;
+    -fx-padding: 1em 0 0 0;
+    -fx-alignment: bottom-right;
+}
+
+
+
+
+/*******************************************************************************
+ *                                                                             *
+ * DatePicker                                                                  *
+ *                                                                             *
+ ******************************************************************************/
+
+.date-picker > .arrow-button > .arrow {
+    -fx-shape: "M0,0v9h9V0H0z M2,8H1V7h1V8z M2,6H1V5h1V6z M2,4H1V3h1V4z M4,8H3V7h1V8z M4,6H3V5h1V6z M4,4H3V3h1V4z M6,8H5V7h1V8z M6,6H5 V5h1V6z M6,4H5V3h1V4z M8,8H7V7h1V8z M8,6H7V5h1V6z M8,4H7V3h1V4z";
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.416667em 0.416667em 0.333333em 0.333333em; /*5 5 4 4 */
+    -fx-scale-shape: true;
+}
+
+.date-picker-popup {
+    -fx-background-color: -fx-box-border, -fx-control-inner-background;
+    -fx-background-insets: 0, 1;
+    /*-fx-background-radius: 0 6 6 6, 0 5 5 5;*/
+    -fx-background-radius: 0;
+    -fx-padding: 0;
+    -fx-alignment: CENTER; /* VBox */
+    -fx-spacing: 0; /* VBox */
+    -fx-effect: dropshadow( three-pass-box , rgba(0,0,0,0.6) , 8, 0.0 , 0 , 0 );
+}
+.date-picker-popup > .month-year-pane {
+    -fx-padding: 0.5em; /* 6 6 6 6 */
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 0;
+}
+.date-picker-popup > * > .spinner {
+    -fx-spacing: 0.25em;
+    -fx-alignment: CENTER;
+    -fx-fill-height: false;
+}
+.date-picker-popup > * > .spinner > .button {
+    -fx-background-color: transparent;
+    -fx-background-radius: 0;
+}
+.date-picker-popup > * > .spinner > .button:hover {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-radius: 3, 2, 1;
+}
+.date-picker-popup > * > .spinner > .button:focused {
+    -fx-background-color: -fx-focus-color, -fx-outer-border, -fx-inner-border, -fx-focus-color, -fx-body-color;
+    -fx-background-radius: 3, 2, 1;
+}
+.date-picker-popup > * > .spinner > .left-button {
+    -fx-padding: 0 0.333333em 0 0.25em; /* 0 4 0 3 */
+}
+.date-picker-popup > * > .spinner > .right-button {
+    -fx-padding: 0 0.25em 0 0.333333em; /* 0 3 0 4 */
+}
+.date-picker-popup > * > .spinner > .button > .right-arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.5em 0.333333em 0 0; /* 6 4 0 0 */
+    -fx-shape: "M 4 0 L 0 -3 L 0 3 z";
+    -fx-scale-shape: true;
+}
+.date-picker-popup > * > .spinner > .button > .left-arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.5em 0.333333em 0 0; /* 6 4 0 0 */
+    -fx-shape: "M 0 0 L 4 -3 L 4 3 z";
+    -fx-scale-shape: true;
+}
+.date-picker-popup > * > .spinner > .label {
+    -fx-alignment: CENTER;
+}
+.date-picker-popup > .month-year-pane > .secondary-label {
+    -fx-alignment: BASELINE_CENTER;
+    -fx-padding: 0.5em 0 0 0; /* 6 0 0 0 */
+    -fx-text-fill: firebrick;
+}
+.date-picker-popup > .calendar-grid {
+    -fx-background-color: derive(-fx-base, 6.8%);
+    -fx-background-insets: 1;
+    -fx-padding: 1;
+}
+.date-picker-popup > * > .date-cell {
+    -fx-background-color: transparent;
+    -fx-background-insets: 1, 2;
+    -fx-padding: 0.166667em;
+    -fx-alignment: BASELINE_CENTER;
+    -fx-opacity: 1.0;
+}
+.date-cell:disabled > * {
+    -fx-opacity: -fx-disabled-opacity;
+}
+.date-picker-popup > * > .day-name-cell,
+.date-picker-popup > * > .week-number-cell {
+    -fx-font-size: 0.916667em;
+}
+.date-picker-popup > * > .week-number-cell {
+    /* Add one pixel to the top padding to
+     * compensate for the smaller font size. */
+    -fx-padding: 0.416667em 0.583333em 0.333333em 0.583333em; /* 5 7 4 7 */
+    -fx-border-color: -fx-background;
+    -fx-border-width: 1px;
+    -fx-background: -fx-control-inner-background;
+    -fx-background-color: -fx-background;
+    -fx-text-fill: -fx-accent;
+}
+.date-picker-popup > * > .day-cell {
+    -fx-padding: 0.333333em 0.583333em 0.333333em 0.583333em; /* 4 7 4 7 */
+    -fx-border-color: derive(-fx-control-inner-background,-10%);
+    -fx-border-width: 1px;
+    -fx-background: -fx-control-inner-background;
+    -fx-background-color: -fx-background;
+    -fx-text-fill: -fx-text-background-color;
+}
+.date-picker-popup > * > .hijrah-day-cell {
+    -fx-alignment: TOP_LEFT;
+    -fx-padding: 0.083333em 0.333333em 0.083333em 0.333333em; /* 1 4 1 4 */
+    -fx-cell-size: 2.75em;
+}
+.date-picker-popup > * > .day-cell > .secondary-text {
+    -fx-fill: firebrick;
+}
+.date-picker-popup > * > .today {
+    -fx-background-color: -fx-control-inner-background, derive(-fx-base, -10%), -fx-control-inner-background;
+    -fx-background-insets: 1, 2, 3;
+}
+.date-picker-popup > * > .day-cell:hover,
+.date-picker-popup > * > .selected,
+.date-picker-popup > * > .previous-month.selected,
+.date-picker-popup > * > .next-month.selected {
+    -fx-background-color: -fx-selection-bar;
+    -fx-background: -fx-accent;
+}
+.date-picker-popup > * > .today:hover,
+.date-picker-popup > * > .today.selected {
+    -fx-background-color: -fx-selection-bar, derive(-fx-base, -10%),-fx-selection-bar;
+}
+.date-picker-popup > * > .day-cell:focused,
+.date-picker-popup > * > .today:focused {
+    -fx-background-color: -fx-control-inner-background, -fx-cell-focus-inner-border, -fx-control-inner-background;
+    -fx-background-insets: 1, 2, 3;
+}
+.date-picker-popup > * > .day-cell:focused:hover,
+.date-picker-popup > * > .today:focused:hover,
+.date-picker-popup > * > .today.selected:focused,
+.date-picker-popup > * > .selected:focused {
+    -fx-background-color: -fx-selection-bar, -fx-cell-focus-inner-border, -fx-selection-bar;
+}
+.date-picker-popup > * > .previous-month,
+.date-picker-popup > * > .next-month {
+    -fx-background: derive(-fx-control-inner-background,-5%);
+}
+.date-picker-popup > * > .previous-month:hover,
+.date-picker-popup > * > .next-month:hover {
+    -fx-background: lightgrey;
+    -fx-text-fill: -fx-dark-text-color;
+}
+.date-picker-popup > * > .day-cell:hover > .secondary-text,
+.date-picker-popup > * > .previous-month > .secondary-text,
+.date-picker-popup > * > .next-month > .secondary-text,
+.date-picker-popup > * > .selected > .secondary-text {
+    -fx-fill: -fx-text-background-color;
+}
+.date-picker-popup > * > .previous-month.today,
+.date-picker-popup > * > .next-month.today {
+    -fx-background-color: derive(-fx-control-inner-background,-5%), derive(-fx-base, -10%), derive(-fx-control-inner-background,-5%);
+}
+.date-picker-popup > * > .previous-month.today:hover,
+.date-picker-popup > * > .next-month.today:hover {
+    -fx-background-color: lightgrey, derive(-fx-base, -10%), lightgrey;
+}
+
+
+
+/* -------------------------- STYLES FOR PAGINATION CONTROL ----- */
+.pagination {
+    -fx-padding: 0;
+    -fx-arrows-visible: true;
+    -fx-tooltip-visible: true;
+    -fx-page-information-visible: true;
+    -fx-page-information-alignment: bottom;
+}
+.pagination > .page {
+    -fx-background-color: transparent;
+}
+
+.pagination > .pagination-control {
+    -fx-background-color: transparent;
+    -fx-padding: 0.833333em 0em 0.833333em 0em;
+}
+
+.pagination > .pagination-control > .control-box {
+    -fx-spacing: 4;
+    -fx-alignment: center;
+}
+
+.pagination > .pagination-control > .control-box > .left-arrow-button{
+    -fx-background-radius: 0;
+    -fx-padding: 0.166667em 0.416em 0.25em 0.333em;
+}
+.pagination > .pagination-control > .control-box > .right-arrow-button {
+    -fx-background-radius: 0;
+    -fx-padding: 0.166667em 0.333em 0.25em 0.416em;
+}
+
+.pagination > .pagination-control .left-arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.375em 0.291em 0.375em 0.291em;
+    -fx-shape: "M 0 0 L -13 7 L 0 13 z";
+    -fx-scale-shape: true;
+}
+
+.pagination > .pagination-control .right-arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.375em 0.291em 0.375em 0.291em;
+    -fx-shape: "M 0 0 L 13 7 L 0 13 z";
+    -fx-scale-shape: true;
+}
+
+.pagination > .pagination-control > .control-box > .bullet-button {
+   -fx-background-radius: 0, 4em, 4em, 4em, 4em;
+   -fx-padding: 0.333em;
+
+   -fx-background-color: transparent, -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+   -fx-background-insets: 0, 4 4 3 4,  5,  6,  7;
+}
+
+.pagination > .pagination-control > .control-box > .bullet-button:selected {
+    -fx-base: -fx-selection-bar-text;
+}
+.pagination:focused > .pagination-control > .control-box > .bullet-button:selected {
+    -fx-base: -fx-accent;
+}
+
+.pagination.bullet > .pagination-control > .control-box > .left-arrow-button,
+.pagination.bullet > .pagination-control > .control-box > .right-arrow-button {
+    -fx-background-radius: 4em;
+}
+
+.pagination > .pagination-control > .control-box > .number-button {
+    -fx-background-radius: 0;
+    -fx-padding: 0.166667em 0.25em 0.25em 0.333em;
+    -fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, -fx-body-color;
+}
+
+.pagination > .pagination-control > .control-box > .number-button:selected {
+    -fx-base: -fx-selection-bar-text;
+}
+.pagination:focused > .pagination-control > .control-box > .number-button:selected {
+    -fx-base: -fx-accent;
+}
+.pagination > .pagination-control > .page-information {
+    -fx-padding: 0.416em 0 0 0;
+}
+
+
+/*******************************************************************************
+ *                                                                             *
+ * TreeTableView                                                               *
+ * Note: A lot of the CSS for TreeTableView is included with the TreeView and  *
+ * TableView CSS styles elsewhere in caspian.css (as they are the same, just   *
+ * targeting different CSS style classes).                                     *
+ ******************************************************************************/
+.tree-table-view {
+    -fx-background-color: -fx-box-border, -fx-control-inner-background;
+    -fx-background-insets: 0,1;
+
+    /* There is some oddness if padding is in em values rather than pixels,
+       in particular, the left border of the control doesn't show. */
+    -fx-padding: 1; /* 0.083333em; */
+
+    /* Constants used throughout the tableview.
+     * TODO: Should these be derived from the palette in .scene?
+     */
+    -fx-table-header-border-color: #959595;
+/*    -fx-table-header-background-color: linear (0%,0%) to (0%,100%) stops (80%, #bbbbbb) (10%, #f6f6f6);*/
+    -fx-table-cell-border-color: #bbbbbb;
+}
+
+.tree-table-row-cell {
+    -fx-background-color: -fx-control-inner-background;
+    -fx-padding: 0.0em; /* 0 */
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+.tree-table-cell {
+    -fx-padding: 0.166667em; /* 2px, plus border adds 1px */
+
+    -fx-background-color: transparent;
+    -fx-border-color: transparent -fx-table-cell-border-color transparent transparent;
+    -fx-border-width: 0.083333em; /* 1 */
+    -fx-cell-size: 2.0em; /* 24 */
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+
+/*******************************************************************************
+ *                                                                             *
+ * TreeTableView cell spanning                                                 *
+ *                                                                             *
+ ******************************************************************************/
+
+.cell-span-tree-table-view > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell {
+    -fx-background-color: transparent;
+}
+
+/* All table-row-cells - we don't care if they are even or odd */
+.cell-span-tree-table-view > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell > .tree-table-cell {
+    -fx-background-color: -fx-table-cell-border-color, -fx-control-inner-background;
+    -fx-background-insets: 0, 0 1 0 0;
+    -fx-alignment: center;
+}
+
+/** Selection styles */
+/*.cell-span-table-view > .virtual-flow > .clipped-container > .sheet > .table-row-cell > .table-cell:focused:selected, */
+.cell-span-tree-table-view:row-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:selected > .tree-table-cell,
+.cell-span-tree-table-view:row-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:focused:selected > .tree-table-cell,
+.cell-span-tree-table-view:row-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:focused:selected:hover > .tree-table-cell,
+.cell-span-tree-table-view:cell-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell > .tree-table-cell:filled:selected,
+.cell-span-tree-table-view:cell-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell > .tree-table-cell:filled:focused:selected,
+.cell-span-tree-table-view:cell-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell > .tree-table-cell:filled:focused:selected:hover{
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-selection-bar;
+    -fx-background-insets: 0 1 0 0, 1 2 1 1, 2 3 2 2;
+    -fx-background: -fx-accent;
+    -fx-text-fill: -fx-selection-bar-text;
+}
+
+/** Hover styles */
+/** --- Row selection mode hover */
+.cell-span-tree-table-view:row-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:hover > .tree-table-cell {
+    -fx-background-color: -fx-table-cell-border-color, -fx-cell-hover-color;
+    -fx-background-insets: 0, 0 0 1 0;
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+.cell-span-tree-table-view:row-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled:focused:hover > .tree-table-cell {
+    -fx-background-color: -fx-table-cell-border-color, -fx-focus-color, -fx-cell-focus-inner-border, -fx-cell-hover-color;
+    -fx-background-insets: 0, 0 0 1 0, 1 1 2 1, 2 2 3 2, 3 3 4 3;
+    -fx-text-fill: -fx-text-inner-color;
+}
+
+/** --- Cell selection mode hover */
+.cell-span-tree-table-view:cell-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled > .tree-table-cell:hover{
+    -fx-background-color: -fx-table-cell-border-color, -fx-cell-hover-color;
+    -fx-text-fill: -fx-text-inner-color;
+    -fx-background-insets: 0, 0 0 1 0;
+}
+
+.cell-span-tree-table-view:cell-selection > .virtual-flow > .clipped-container > .sheet > .tree-table-row-cell:filled > .tree-table-cell:focused:hover{
+    -fx-background-color: -fx-focus-color, -fx-cell-focus-inner-border, -fx-cell-hover-color;
+    -fx-background-insets: 0 1 0 0, 1 2 1 1, 2 3 2 2;
+    -fx-text-fill: -fx-text-inner-color;
+}
+/** End of hover styles */
+
+/********************************************************************************
+ *                                                                              *
+ * HTMLEditor                                                                   *
+ *                                                                              *
+ ********************************************************************************/
+
+.html-editor {
+    -fx-border-width: 1;
+    -fx-border-style: solid;
+    -fx-padding: 0;
+    -fx-border-color: derive(-fx-base,-35%);
+}
+.html-editor .button,
+.html-editor .toggle-button {
+    -fx-padding: 0.333333em 0.833333em 0.416667em 0.833333em; /* 2 10 3 10 */
+}
+.html-editor .combo-box > .list-cell {
+    -fx-cell-size: 2.0833em; /* 21 */
+}
+/* Each Toolbar is constructed of two stacked shapes */
+.html-editor > * > .top-toolbar {
+    -fx-background-color:
+        linear-gradient(to bottom, white 10%, derive(-fx-base, 50%) 90%),
+        linear-gradient(to bottom, derive(-fx-base, 65%) 0%, derive(-fx-base, 5%) 90%);
+    -fx-background-insets: 0, 1;
+    -fx-border-color: transparent transparent derive(-fx-base,-20%) transparent, transparent;
+    -fx-border-width: 1, 0;
+    -fx-padding: 0.333em 0.5em 0.333em 0.5em; /* 4 6 4 6;*/
+}
+
+.html-editor > * > .bottom-toolbar {
+    -fx-background-color:
+        linear-gradient(to bottom,  derive(-fx-base, 50%) 10%, derive(-fx-base, -60%) 90%),
+        linear-gradient(to bottom,  derive(-fx-base, 5%) 0%, derive(-fx-base, -15%) 90%);
+    -fx-background-insets: 0, 1;
+    -fx-border-color: transparent derive(-fx-base,50%) transparent derive(-fx-base,50%),
+    transparent transparent derive(-fx-base,-60%) transparent;
+    -fx-border-width: 1, 0;
+    -fx-padding: 0.166667em 0.5em 0.166667em 1.5em; /* 2 6 2 6;*/
+}
+
+.html-editor-foreground, .html-editor-background {
+    -fx-color-label-visible: false;
+    -fx-color-rect-x: 0;
+    -fx-color-rect-y: 10;
+    -fx-color-rect-width: 16;
+    -fx-color-rect-height: 5;
+    -fx-padding: 0;
+}
+.html-editor-foreground > .color-picker-label,
+.html-editor-background > .color-picker-label {
+    -fx-padding: 0 0 -0.083333em 0;
+}
+/* Note: The Separator is constructed of a 1-pixel shape
+whose borders are styled.  Only the right border is specified
+with a color; the other three borders are transparent.*/
+
+/* Note: This first section of CSS (below) specifies the Separator's color.
+Specifying the color here ensures the same color for both .top-toolbar
+and .bottom-toolbar Separators, as they will inherit the color. */
+
+.html-editor > * > * > .separator:vertical > .line{
+    -fx-border-style: solid;
+    -fx-background-color: null;
+    -fx-border-color: transparent derive(-fx-base,-35%) transparent transparent; /* #878787 */
+}
+
+/* Note: This next section of CSS (below) specifies the Separator's length.
+The length of the Separator is determined by adding its -fx-padding values
+to the top and bottom -fx-padding values of the parent toolbar. */
+
+.html-editor > * > .top-toolbar > .separator {
+    -fx-padding: 1 0 1 0;
+}
+
+.html-editor > * > .bottom-toolbar:horizontal {
+    -fx-padding: 0.417em; /* 5px */
+}
+
+.html-editor > * > .bottom-toolbar > .separator {
+    -fx-padding:  1 2 1 2;
+}
+
+.html-editor > * > * > .button {
+    -fx-background-color: null;
+    -fx-background-insets: -1, 0, 1;
+    -fx-background-radius: 0.25em; /* 3 */
+    -fx-padding: 0.25em;  /* 3 */
+    -fx-alignment: CENTER;
+    -fx-graphic-vpos: CENTER;
+}
+
+.html-editor > * > .top-toolbar > .button:hover {
+    -fx-background-color: transparent, derive(-fx-base,-10%), derive(-fx-base,65%);
+}
+
+.html-editor > * > .bottom-toolbar > .button:hover {
+    -fx-background-color: transparent, derive(-fx-base,-25%), derive(-fx-base,15%);
+}
+
+.html-editor > * > * > .toggle-button {
+    -fx-background-color: transparent;
+    -fx-background-insets: -1, 0, 1;
+    -fx-background-radius: 3;
+    -fx-padding: 0.25em;  /* 3 */
+    -fx-alignment: CENTER;
+    -fx-graphic-vpos: CENTER;
+}
+
+.html-editor > * > .top-toolbar > .toggle-button:hover {
+    -fx-background-color: transparent, derive(-fx-base,-10%), derive(-fx-base,65%);
+}
+
+.html-editor > * > .bottom-toolbar > .toggle-button:hover {
+    -fx-background-color: transparent, derive(-fx-base,-25%), derive(-fx-base,15%);
+}
+
+.html-editor > * > .toggle-button:focused {
+    -fx-color: transparent;
+    -fx-background-color: -fx-focus-color, derive(-fx-base,-25%), derive(-fx-base,15%);
+    -fx-background-insets: -1.2, 0, 1;
+    -fx-background-radius: 3.2, 3, 3;
+}
+
+.html-editor > * > * > .toggle-button:selected {
+    -fx-background-color: transparent,
+    linear-gradient(to bottom,  derive(-fx-base, -70%) 10%, derive(-fx-base, -40%) 90%),
+    linear-gradient(to bottom,  derive(-fx-base, -40%) 0%, derive(-fx-base, -20%) 50%, derive(-fx-base, -10%) 98%, derive(-fx-base, -35%) 100%);
+}
+
+.html-editor > * > * > .font-menu-button {
+    -fx-background-radius: 5, 5, 4, 3;
+}
+
+.html-editor > * > * > .font-menu-button .label{
+    -fx-padding: 0.166667em 0.5em 0.25em 0.5em; /* 2 6 3 6 */
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Spinner                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+
+.spinner {
+    -fx-background-color: -fx-shadow-highlight-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-background-insets: 0, 0 0 1 0, 1 1 2 1;
+    -fx-background-radius: 3, 3, 2;
+}
+.spinner:focused,
+.spinner:contains-focus {
+    -fx-background-color: -fx-focus-color, -fx-text-box-border, -fx-control-inner-background;
+    -fx-background-insets: -1.4 -1.4 -0.4 -1.4, 0 0 1 0, 1 1 2 1;
+    -fx-background-radius: 4, 3, 2;
+}
+.spinner:disabled {
+    -fx-opacity: -fx-disabled-opacity;
+}
+.spinner > .text-field {
+    -fx-background-color: -fx-text-box-border, -fx-control-inner-background;
+    -fx-background-insets: 0 0 1 0, 1 0 2 1;
+    -fx-background-radius: 3 0 0 3, 2 0 0 2;
+}
+
+.spinner .increment-arrow-button {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: 0, 1, 2;
+    -fx-background-radius: 0 3 0 0, 0 2 0 0, 0 1 0 0;
+    -fx-padding: 0.333em 0.666em 0.333em 0.666em; /* 4 8 4 8 */
+}
+.spinner .decrement-arrow-button {
+    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
+    -fx-background-insets: -1 0 1 0, 0 1 2 1, 0 2 3 2;
+    -fx-background-radius: 0 0 3 0, 0 0 2 0, 0 0 1 0;
+    -fx-padding: 0.250em 0.666em 0.5em 0.666em; /* 3 8 6 8 */
+}
+
+.spinner .increment-arrow-button .increment-arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: -0.6 0 1 0, 0;
+    -fx-padding: 0.167em 0.333em 0.167em 0.333em; /* 2 4 2 4 */
+    -fx-shape: "M 0 0 h 7 l -3.5 4 z";
+    -fx-rotate: 180;
+}
+.spinner .decrement-arrow-button .decrement-arrow {
+    -fx-background-color: -fx-mark-highlight-color, -fx-mark-color;
+    -fx-background-insets: 1 0 -1 0, 0;
+    -fx-padding: 0.167em 0.333em 0.167em 0.333em; /* 2 4 2 4 */
+    -fx-shape: "M 0 0 h 7 l -3.5 4 z";
+}
+
+/* Spinner - Horizontal arrows */
+.spinner.split-arrows-horizontal .increment-arrow-button .increment-arrow,
+.spinner.arrows-on-right-horizontal .increment-arrow-button .increment-arrow,
+.spinner.arrows-on-left-horizontal .increment-arrow-button .increment-arrow,
+.spinner.split-arrows-horizontal .decrement-arrow-button .decrement-arrow,
+.spinner.arrows-on-right-horizontal .decrement-arrow-button .decrement-arrow,
+.spinner.arrows-on-left-horizontal .decrement-arrow-button .decrement-arrow{
+    -fx-padding: 0.333em 0.166em 0.333em 0.166em; /* 4 2 4 2 */
+    -fx-shape: "M 4 0 v 7 l -4 -3.5 z";
+}
+
+/* Spinner - STYLE_CLASS_ARROWS_ON_RIGHT_HORIZONTAL */
+.spinner.arrows-on-right-horizontal .increment-arrow-button {
+    -fx-background-insets: 0 0 1 0, 1 1 2 0, 2 2 3 1;
+    -fx-background-radius: 0 3 3 0, 0 2 2 0, 0 1 1 0;
+    -fx-padding: 0.333em 0.666em 0.333em 0.583em; /* 4 8 4 7 */
+
+}
+.spinner.arrows-on-right-horizontal .decrement-arrow-button {
+    -fx-background-insets: 0 0 1 0, 1 1 2 1, 2 2 3 2;
+    -fx-background-radius: 0, 0, 0;
+    -fx-padding: 0.333em 0.666em 0.333em 0.666em; /* 4 8 4 8 */
+}
+
+/* Spinner - STYLE_CLASS_ARROWS_ON_LEFT_VERTICAL */
+.spinner.arrows-on-left-vertical > .text-field {
+    -fx-background-insets: 0 0 1 0, 1 1 2 0;
+    -fx-background-radius: 0 3 3 0, 0 2 2 0;
+}
+.spinner.arrows-on-left-vertical .increment-arrow-button {
+    -fx-background-radius: 3 0 0 0, 2 0 0 0, 1 0 0 0;
+}
+.spinner.arrows-on-left-vertical .decrement-arrow-button {
+    -fx-background-radius: 0 0 0 3, 0 0 0 2, 0 0 0 1;
+}
+
+/* Spinner - STYLE_CLASS_ARROWS_ON_LEFT_HORIZONTAL */
+.spinner.arrows-on-left-horizontal > .text-field {
+    -fx-background-insets: 0 0 1 -1, 1 1 2 -1;
+    -fx-background-radius: 0 3 3 0, 0 2 2 0;
+}
+.spinner.arrows-on-left-horizontal .increment-arrow-button {
+    -fx-background-insets: 0 0 1 0, 1 1 2 0, 2 2 3 1;
+    -fx-background-radius: 0, 0, 0;
+    -fx-padding: 0.333em 0.666em 0.333em 0.583em; /* 4 8 4 7 */
+}
+.spinner.arrows-on-left-horizontal .decrement-arrow-button {
+    -fx-background-insets: 0 0 1 0, 1 1 2 1, 2 2 3 2;
+    -fx-background-radius: 3 0 0 3, 2 0 0 2, 1 0 0 1;
+    -fx-padding: 0.333em 0.666em 0.333em 0.666em; /* 4 8 4 8 */
+}
+
+/* Spinner - STYLE_CLASS_SPLIT_ARROWS_VERTICAL */
+.spinner.split-arrows-vertical > .text-field {
+    -fx-background-insets: 0, 0 1 0 1;
+    -fx-background-radius: 0, 0;
+}
+.spinner.split-arrows-vertical .increment-arrow-button {
+    -fx-background-radius: 3 3 0 0, 2 2 0 0, 1 1 0 0;
+}
+.spinner.split-arrows-vertical .decrement-arrow-button {
+    -fx-background-insets: -1 0 1 0, 0 1 2 1, 1 2 3 2;
+    -fx-background-radius: 0 0 3 3, 0 0 2 2, 0 0 1 1;
+    -fx-padding: 0.25em 0.666em 0.417em 0.666em; /* 3 8 5 8 */
+}
+
+/* Spinner - STYLE_CLASS_SPLIT_ARROWS_HORIZONTAL */
+.spinner.split-arrows-horizontal > .text-field {
+    -fx-background-insets: 0 0 1 0, 1 0 2 0;
+    -fx-background-radius: 0, 0;
+}
+.spinner.split-arrows-horizontal .increment-arrow-button {
+    -fx-background-insets: 0 0 1 0, 1 1 2 1, 2 2 3 2;
+    -fx-background-radius: 0 3 3 0, 0 2 2 0, 0 1 1 0;
+    -fx-padding: 0.333em 0.666em 0.333em 0.666em; /* 4 8 4 8 */
+}
+.spinner.split-arrows-horizontal .decrement-arrow-button {
+    -fx-background-insets: 0 0 1 0, 1 1 2 1, 2 2 3 2;
+    -fx-background-radius: 3 0 0 3, 2 0 0 2, 1 0 0 1;
+    -fx-padding: 0.333em 0.666em 0.333em 0.666em; /* 4 8 4 8 */
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Dialog                                                                      *
+ *                                                                             *
+ ******************************************************************************/
+
+.dialog-pane {
+    -fx-background-color: -fx-background;
+    -fx-padding: 0;
+}
+
+.dialog-pane > .expandable-content {
+    -fx-padding: 0.666em; /* 8px */
+}
+
+.dialog-pane > .button-bar > .container {
+    -fx-padding: 0.833em; /* 10px */
+}
+
+.dialog-pane > .content.label {
+    -fx-alignment: top-left;
+    -fx-padding: 1.333em 0.833em 0 0.833em; /* 16px 10px 0px 10px */
+}
+
+.dialog-pane > .content {
+    -fx-padding: 0.833em; /* 10 */
+}
+
+.dialog-pane:no-header .graphic-container {
+    -fx-padding: 0.833em 0 0 0.833em; /* 10px 0px 0px 10px */
+}
+
+.dialog-pane:header .header-panel {
+    /*-fx-padding: 0.833em 1.166em 0.833em 1.166em; *//* 10px 14px 10px 14px */
+    -fx-padding: 0.833em; /* 10px */
+    -fx-background-color: -fx-box-border, linear-gradient(-fx-background, derive(-fx-background, 30%));
+    -fx-background-insets: 0, 0 0 1 0;
+}
+
+.dialog-pane:header .header-panel .label {
+    -fx-font-size: 1.167em; /* 14px */
+    -fx-wrap-text: true;
+}
+
+.dialog-pane:header .header-panel .graphic-container {
+    /* This prevents the text in the header running directly into the graphic */
+    -fx-padding: 0 0 0 0.833em; /* 0px 0px 0px 10px */
+}
+
+.dialog-pane > .button-bar > .container > .details-button {
+    -fx-alignment: baseline-left;
+    -fx-focus-traversable: false;
+    -fx-padding: 0.416em; /* 5px */
+    -fx-font-size: 0.833em; /* 10px */
+}
+
+.dialog-pane > .button-bar > .container > .details-button.more {
+    -fx-graphic: url("dialog-more-details.png");
+}
+
+.dialog-pane > .button-bar > .container > .details-button.less {
+    -fx-graphic: url("dialog-fewer-details.png");
+}
+
+.dialog-pane > .button-bar > .container > .details-button:hover {
+    -fx-underline: true;
+}
+
+.alert.confirmation.dialog-pane,
+.text-input-dialog.dialog-pane,
+.choice-dialog.dialog-pane {
+    -fx-graphic: url("dialog-confirm.png");
+}
+
+.alert.information.dialog-pane {
+    -fx-graphic: url("dialog-information.png");
+}
+
+.alert.error.dialog-pane {
+    -fx-graphic: url("dialog-error.png");
+}
+
+.alert.warning.dialog-pane {
+    -fx-graphic: url("dialog-warning.png");
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/no.tornado/tornadofx/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/no.tornado/tornadofx/pom.xml	(date 1580448792000)
+++ build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/no.tornado/tornadofx/pom.xml	(date 1580448792000)
@@ -0,0 +1,303 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>no.tornado</groupId>
+    <artifactId>tornadofx</artifactId>
+    <version>1.7.20</version>
+    <packaging>jar</packaging>
+    <name>TornadoFX</name>
+    <description>Lightweight JavaFX Framework for Kotlin</description>
+    <url>https://github.com/edvin/tornadofx</url>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.glassfish</groupId>
+            <artifactId>javax.json</artifactId>
+            <version>${org.glassfish.javax.json.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpclient</artifactId>
+            <version>${org.apache.httpcomponents.httpclient.version}</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.felix</groupId>
+            <artifactId>org.apache.felix.framework</artifactId>
+            <version>${org.apache.felix.framework.version}</version>
+            <scope>provided</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.jetbrains.kotlin</groupId>
+            <artifactId>kotlin-stdlib-jdk8</artifactId>
+            <version>${kotlin.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.jetbrains.kotlin</groupId>
+            <artifactId>kotlin-reflect</artifactId>
+            <version>${kotlin.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <version>${junit.version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.jetbrains.kotlin</groupId>
+            <artifactId>kotlin-test-junit</artifactId>
+            <version>${kotlin.version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.testfx</groupId>
+            <artifactId>testfx-core</artifactId>
+            <version>${org.testfx.testfx-core.version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.testfx</groupId>
+            <artifactId>testfx-junit</artifactId>
+            <version>${org.testfx.testfx-junit.version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>de.jensd</groupId>
+            <artifactId>fontawesomefx</artifactId>
+            <version>${de.jensd.fontawesomefx.version}</version>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
+    <distributionManagement>
+        <repository>
+            <id>sonatype-nexus</id>
+            <name>Nexus Release Repository</name>
+            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
+        </repository>
+        <snapshotRepository>
+            <id>sonatype-nexus</id>
+            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
+        </snapshotRepository>
+    </distributionManagement>
+
+    <organization>
+        <name>SYSE</name>
+        <url>https://www.syse.no/</url>
+    </organization>
+
+    <licenses>
+        <license>
+            <name>The Apache License, Version 2.0</name>
+            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
+        </license>
+    </licenses>
+
+    <developers>
+        <developer>
+            <name>Edvin Syse</name>
+            <email>es@syse.no</email>
+            <organization>SYSE AS</organization>
+            <organizationUrl>https://www.syse.no</organizationUrl>
+        </developer>
+        <developer>
+            <name>Thomas Nield</name>
+            <email>thomasnield@live.com</email>
+            <organization>Southwest Airlines</organization>
+            <organizationUrl>https://www.southwest.com/</organizationUrl>
+        </developer>
+        <developer>
+            <name>Matthew Turnblom</name>
+            <email>uberawesomeemailaddressofdoom@gmail.com</email>
+            <organization>Xactware</organization>
+            <organizationUrl>https://www.xactware.com/</organizationUrl>
+        </developer>
+    </developers>
+
+    <scm>
+        <connection>scm:git:git@github.com:edvin/tornadofx.git</connection>
+        <developerConnection>scm:git:git@github.com:edvin/tornadofx.git</developerConnection>
+        <url>git@github.com:edvin/tornadofx.git</url>
+    </scm>
+
+    <build>
+        <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>
+
+        <pluginManagement>
+            <plugins>
+                <plugin>
+                    <groupId>org.apache.maven.plugins</groupId>
+                    <artifactId>maven-release-plugin</artifactId>
+                    <version>${maven.release.version}</version>
+                    <configuration>
+                        <mavenExecutorId>forked-path</mavenExecutorId>
+                        <useReleaseProfile>false</useReleaseProfile>
+                        <arguments>-Psonatype-oss-release</arguments>
+                    </configuration>
+                </plugin>
+            </plugins>
+        </pluginManagement>
+
+        <plugins>
+            <plugin>
+                <artifactId>kotlin-maven-plugin</artifactId>
+                <groupId>org.jetbrains.kotlin</groupId>
+                <version>${kotlin.version}</version>
+                <configuration>
+                    <jvmTarget>1.8</jvmTarget>
+                </configuration>
+                <executions>
+                    <execution>
+                        <id>compile</id>
+                        <phase>process-sources</phase>
+                        <goals>
+                            <goal>compile</goal>
+                        </goals>
+                    </execution>
+                    <execution>
+                        <id>test-compile</id>
+                        <goals>
+                            <goal>test-compile</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>${maven.compiler.version}</version>
+                <configuration>
+                    <source>1.8</source>
+                    <target>1.8</target>
+                    <encoding>UTF-8</encoding>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.jetbrains.dokka</groupId>
+                <artifactId>dokka-maven-plugin</artifactId>
+                <version>${dokka.version}</version>
+                <executions>
+                    <execution>
+                        <phase>pre-site</phase>
+                        <goals>
+                            <goal>dokka</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-source-plugin</artifactId>
+                <version>${maven.source.version}</version>
+                <executions>
+                    <execution>
+                        <phase>compile</phase>
+                        <goals>
+                            <goal>aggregate</goal>
+                            <goal>jar</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
+                <artifactId>maven-jar-plugin</artifactId>
+                <version>${maven.jar.version}</version>
+                <configuration>
+                    <archive>
+                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
+                    </archive>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-javadoc-plugin</artifactId>
+                <version>${maven.javadoc.version}</version>
+                <executions>
+                    <execution>
+                        <phase>compile</phase>
+                        <goals>
+                            <goal>javadoc</goal>
+                            <goal>jar</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.felix</groupId>
+                <artifactId>maven-bundle-plugin</artifactId>
+                <version>${maven.bundle.version}</version>
+                <executions>
+                    <execution>
+                        <id>bundle-manifest</id>
+                        <phase>process-classes</phase>
+                        <goals>
+                            <goal>manifest</goal>
+                        </goals>
+                    </execution>
+                </executions>
+                <configuration>
+                    <instructions>
+                        <Bundle-Activator>tornadofx.osgi.impl.Activator</Bundle-Activator>
+                        <Bundle-SymbolicName>no.tornado.tornadofx</Bundle-SymbolicName>
+                    </instructions>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-gpg-plugin</artifactId>
+                <version>${maven.gpg.version}</version>
+                <executions>
+                    <execution>
+                        <id>sign-artifacts</id>
+                        <phase>install</phase>
+                        <goals>
+                            <goal>sign</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-surefire-plugin</artifactId>
+                <version>2.20.1</version>
+            </plugin>
+
+        </plugins>
+    </build>
+
+    <pluginRepositories>
+        <pluginRepository>
+            <id>jcenter</id>
+            <name>JCenter</name>
+            <url>https://jcenter.bintray.com/</url>
+        </pluginRepository>
+    </pluginRepositories>
+
+    <properties>
+        <kotlin.version>1.3.61</kotlin.version>
+        <dokka.version>0.10.0</dokka.version>
+
+        <org.glassfish.javax.json.version>1.1.2</org.glassfish.javax.json.version>
+        <org.apache.httpcomponents.httpclient.version>4.5.3</org.apache.httpcomponents.httpclient.version>
+        <org.apache.felix.framework.version>5.6.4</org.apache.felix.framework.version>
+        <junit.version>4.12</junit.version>
+        <org.testfx.testfx-core.version>4.0.4-alpha</org.testfx.testfx-core.version>
+        <org.testfx.testfx-junit.version>4.0.4-alpha</org.testfx.testfx-junit.version>
+        <de.jensd.fontawesomefx.version>8.9</de.jensd.fontawesomefx.version>
+
+        <maven.release.version>2.1</maven.release.version>
+        <maven.compiler.version>3.1</maven.compiler.version>
+        <maven.source.version>2.4</maven.source.version>
+        <maven.jar.version>3.0.2</maven.jar.version>
+        <maven.javadoc.version>2.10.3</maven.javadoc.version>
+        <maven.bundle.version>3.2.0</maven.bundle.version>
+        <maven.gpg.version>1.4</maven.gpg.version>
+
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+        <maven.compiler.source>1.8</maven.compiler.source>
+        <maven.compiler.target>1.8</maven.compiler.target>
+    </properties>
+
+</project>
Index: build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/javax.json/javax.json-api/pom.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/javax.json/javax.json-api/pom.properties	(date 1509638254000)
+++ build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/javax.json/javax.json-api/pom.properties	(date 1509638254000)
@@ -0,0 +1,5 @@
+#Generated by org.apache.felix.bundleplugin
+#Thu Nov 02 19:57:34 CET 2017
+groupId=javax.json
+artifactId=javax.json-api
+version=1.1.2
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/caspian-no-transparency.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/caspian-no-transparency.css	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/caspian-no-transparency.css	(date 1547619866000)
@@ -0,0 +1,92 @@
+/*
+ * Copyright (c) 2009, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*******************************************************************************
+ *                                                                             *
+ * PopupMenu                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.context-menu {
+    -fx-background-radius: 0;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ChoiceBox                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.choice-box > .context-menu {
+    -fx-background-radius: 0;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ComboBox                                                                    *
+ *                                                                             *
+ ******************************************************************************/
+
+.combo-box-popup > .list-view {
+    -fx-background-insets: 0 -1 -1 0, 1 0 1 1;
+    -fx-effect: null;
+}
+.combo-box-popup > .list-view > .virtual-flow > .scroll-bar:vertical{
+    -fx-background-insets: 0, 0 0 1 1;
+    -fx-padding: -1 -2 -1 0;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * ColorPicker                                                                 *
+ *                                                                             *
+ ******************************************************************************/
+
+.color-palette {
+    -fx-background-radius: 0;
+    -fx-effect: null;
+}
+
+/*******************************************************************************
+ *                                                                             *
+ * Tooltip                                                                     *
+ *                                                                             *
+ ******************************************************************************/
+
+.tooltip {
+    -fx-effect: null;
+    -fx-background-insets: 0 0 -1 0, 1, 2;
+}
+
+/*******************************************************************************
+*                                                                              *
+* DatePicker                                                                   *
+*                                                                              *
+*******************************************************************************/
+
+.date-picker-popup {
+    -fx-background-radius: 0;
+    -fx-effect: null;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/org.jetbrains/annotations/pom.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/org.jetbrains/annotations/pom.properties	(date 1387282236000)
+++ build/libs/network1-1.0-SNAPSHOT-all/META-INF/maven/org.jetbrains/annotations/pom.properties	(date 1387282236000)
@@ -0,0 +1,5 @@
+#Generated by Maven
+#Tue Dec 17 16:10:35 MSK 2013
+version=13.0
+groupId=org.jetbrains
+artifactId=annotations
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/TextBoard.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/TextBoard.txt	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/TextBoard.txt	(date 1547619866000)
@@ -0,0 +1,8 @@
+#removed unsupported ymacron, yhook
+[q|1|\[ ][w|2|\] ][e|3|{|egrave|eacute|ecirc|euml ][r|4|}|reg ][t|5|<|tm ][y|6|>|ygrave|yacute|ycirc|yuml ][u|7|laquo|ugrave|uacute|ucirc|uuml ][i|8|raquo|igrave|iacute|icirc|iuml ][o|9|`|ograve|oacute|ocirc|otilde|ouml|oslash|deg ][p|0|~|para|pi ]
+
+ [a|#|agrave|aacute|acirc|atilde|auml|aring ][s|\$|euro|pound|yen|scedil|scaron|szlig|sigma ][d|%|eth ][f|& ][g|*|sect ][h|(|middot ][j|)|deg ][k|_|neq ][l|@ ]
+
+[$shift ][z|/|iexcl ][x|\\|iquest ][c|;|permil|ccedil|copy|cent ][v|:|reg ][b|=|tm ][n|+|ntilde ][m|-|micro ]['|" ][$backspace ]
+
+[$hide][$SymbolABC ][$space         ][,|! ][.|? ][$enter  ]
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/NumericBoard.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/NumericBoard.txt	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/NumericBoard.txt	(date 1547619866000)
@@ -0,0 +1,9 @@
+[1 ][2 ][3 ][/ ]
+
+[4 ][5 ][6 ][- ]
+
+[7 ][8 ][9 ][$backspace ]
+
+[$hide][+][0 ][.|' ][$enter ]
+
+
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/EmailBoard.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/EmailBoard.txt	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/EmailBoard.txt	(date 1547619866000)
@@ -0,0 +1,8 @@
+#removed unsupported ymacron, yhook
+[q|1|\[ ][w|2|\] ][e|3|{|egrave|eacute|ecirc|euml ][r|4|}|reg ][t|5|<|tm ][y|6|>|ygrave|yacute|ycirc|yuml ][u|7|laquo|ugrave|uacute|ucirc|uuml ][i|8|raquo|igrave|iacute|icirc|iuml ][o|9|`|ograve|oacute|ocirc|otilde|ouml|oslash|deg ][p|0|~|para|pi ]
+
+ [a|#|agrave|aacute|acirc|atilde|auml|aring ][s|\$|euro|pound|yen|scedil|scaron|szlig|sigma ][d|%|eth ][f|& ][g|*|sect ][h|(|middot ][j|)|deg ][k|_|neq ][l|" ]
+
+[$shift ][z|/|iexcl ][x|\\|iquest ][c|;|permil|ccedil|copy|cent ][v|:|reg ][b|=|tm ][n|+|ntilde ][m|-|micro ][@|' ][$backspace ]
+
+[$hide][$SymbolABC ][$space       ][,|! ][.|? ][.com|.org|.net ][$enter  ]
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/embedded-qvga.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/embedded-qvga.css	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/embedded-qvga.css	(date 1547619866000)
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*******************************************************************************
+ *                                                                             *
+ * CSS Styles for embedded devices that have QVGA screens. These styles either *
+ * override or supplement those in caspian.css and embedded.css (which is      *
+ * targeted at VGA screens).                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+/*******************************************************************************
+ *                                                                             *
+ * TextField, PasswordField, TextArea                                                                   *
+ *                                                                             *
+ ******************************************************************************/
+
+.text-field {
+    -fx-padding: 3 5 3 5; /* Restore values from caspian, as QVGA has no selection handles */
+}
+
+.text-area .content {
+    -fx-padding: 3 5 3 5; /* Restore values from caspian, as QVGA has no selection handles */
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/datagrid.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/datagrid.css	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/datagrid.css	(date 1580448308000)
@@ -0,0 +1,23 @@
+.datagrid {
+    -fx-cell-width: 150px;
+    -fx-cell-height: 150px;
+    -fx-horizontal-cell-spacing: 8px;
+    -fx-vertical-cell-spacing: 8px;
+    -fx-focus-traversable: true;
+}
+
+.datagrid-cell {
+    -fx-background: -fx-control-inner-background;
+    -fx-background-color: -fx-background;
+    -fx-text-fill: -fx-text-background-color;
+}
+
+.datagrid-cell:selected {
+    -fx-background: -fx-selection-bar;
+    -fx-table-cell-border-color: derive(-fx-selection-bar, 20%);
+}
+
+.datagrid-cell .label {
+    -fx-font-weight: bold;
+    -fx-font-size: 16px;
+}
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/fxvk.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/fxvk.css	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/caspian/fxvk.css	(date 1547619866000)
@@ -0,0 +1,128 @@
+/*
+ * Copyright (c) 2013, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*******************************************************************************
+ *                                                                             *
+ * Virtual Keyboard                                                            *
+ *                                                                             *
+ ******************************************************************************/
+
+.fxvk {
+    -fx-cursor: default;
+    -fx-background-color: linear-gradient(to bottom, rgb(126, 126, 126) 0%, rgb(76, 76, 76) 10%, rgb(84, 84, 84) 100%);
+    -fx-background-insets: 0;
+    -fx-padding: 8 4 10 4;
+}
+
+.fxvk-secondary {
+    -fx-background-color: #ffffff, #ededed;
+    -fx-background-insets: 0, 1;
+    -fx-background-radius: 8;
+    -fx-padding: 10;
+    -fx-effect: dropshadow(three-pass-box, rgba(0, 0, 0, 0.75), 8, 0.0, 0, 0);
+}
+
+.backspace-icon {
+    -fx-background-image: url("images/backspace-icon.png");
+    -fx-background-repeat: no-repeat;
+    -fx-background-position: center;
+}
+
+.enter-icon {
+    -fx-background-image: url("images/enter-icon.png");
+    -fx-background-repeat: no-repeat;
+    -fx-background-position: center;
+}
+
+.shift-icon {
+    -fx-background-image: url("images/shift-icon.png");
+    -fx-background-repeat: no-repeat;
+    -fx-background-position: center;
+}
+
+.capslock-icon {
+    -fx-background-image: url("images/capslock-icon.png");
+    -fx-background-repeat: no-repeat;
+    -fx-background-position: center;
+}
+
+.hide-icon {
+    -fx-background-image: url("images/vk-hide.png");
+    -fx-background-repeat: no-repeat;
+    -fx-background-position: center;
+}
+
+.key {
+    -fx-border-image-source: url("images/vk-light.png");
+    -fx-border-image-slice: 10 fill;
+    -fx-border-image-width: 10;
+    -fx-border-image-repeat: stretch;
+    -fx-border-image-insets: -3 -3 -3 -3;
+    -fx-padding: 3 3 5 0;
+}
+
+.key:pressed {
+    -fx-border-image-source: url("images/vk-light-pressed.png");
+    -fx-padding: 5 3 3 0;
+}
+
+.key-text {
+    -fx-font-weight: bold;
+    -fx-font: bold 24px "Amble";
+    -fx-text-fill: #333333;
+}
+
+.key-alttext {
+/*
+    -fx-font-size: 22px;
+    -fx-fill: #333333;
+*/
+    -fx-text-fill: #959595;
+    -fx-font: bold 14px "Amble";
+    -fx-text-alignment: right;
+    -fx-text-origin: top;
+}
+
+.key-text.multi-char-text {
+    -fx-font: bold 20px "Amble";
+}
+
+.key-alttext.multi-char-text {
+    -fx-font: bold 12px "Amble";
+}
+
+.key.special {
+    -fx-border-image-source: url("images/vk-medium.png");
+}
+
+.key.special:pressed {
+    -fx-border-image-source: url("images/vk-medium-pressed.png");
+    -fx-padding: 5 3 3 0;
+}
+
+.special-text {
+    -fx-font-size: 18px;
+    -fx-fill: rgb(230, 230, 230);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_fr.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_fr.properties	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_fr.properties	(date 1547619866000)
@@ -0,0 +1,115 @@
+# ProgressIndicator, the string that's displayed at 100%
+ProgressIndicator.doneString=Termin\u00E9
+
+# ListView
+ListView.noContent=
+
+# TableView
+TableView.noContent=Aucun contenu dans la table
+TableView.noColumns=Aucune colonne dans la table
+# Note there is a space after the comma:
+TableView.nestedColumnControlMenuSeparator=, 
+
+# TextField, PasswordField, TextArea
+# The keys must match the action strings in TextInputControlBehavior
+TextInputControl.menu.Undo=Annuler
+TextInputControl.menu.Redo=R\u00E9tablir
+TextInputControl.menu.Cut=Couper
+TextInputControl.menu.Copy=Copier
+TextInputControl.menu.Paste=Coller
+TextInputControl.menu.DeleteSelection=Supprimer
+TextInputControl.menu.SelectAll=S\u00E9lectionner tout
+TextInputControl.menu.SelectWord=S\u00E9lectionner
+
+# DatePicker
+#
+# DatePicker context menu
+DatePicker.contextMenu.showToday=Afficher le jour actuel
+DatePicker.contextMenu.showWeekNumbers=Afficher les num\u00E9ros de semaine
+
+# ColorPicker
+ColorPicker.customColorLink=Couleur personnalis\u00E9e...
+ColorPicker.customColorLabel=Couleurs personnalis\u00E9es
+ColorPicker.removeColor=Enlever la couleur
+ColorPicker.customColorDialogTitle=Couleurs personnalis\u00E9es
+ColorPicker.currentColor=Couleur en cours
+ColorPicker.newColor=Nouvelle couleur
+# RGB (Red, Green, Blue)
+ColorPicker.colorType.rgb=RVB
+# HSB (Hue, Saturation, Brightness). Same thing as HSV, but not HSL, HLS, HSI.
+ColorPicker.colorType.hsb=TSL
+# Web color value (used in HTML & CSS)
+ColorPicker.colorType.web=Web
+ColorPicker.opacity_colon=Opacit\u00E9 :
+ColorPicker.Save=Enregistrer
+ColorPicker.Use=Utiliser
+ColorPicker.Cancel=Annuler
+ColorPicker.hue_colon=Teinte :
+ColorPicker.saturation_colon=Saturation :
+ColorPicker.brightness_colon=Luminosit\u00E9 :
+ColorPicker.red_colon=Rouge :
+ColorPicker.green_colon=Vert :
+ColorPicker.blue_colon=Bleu :
+ColorPicker.web_colon=Web :
+ColorPicker.OK = OK
+
+ColorPicker.colorName.transparent=Transparent
+ColorPicker.colorName.black=Noir
+ColorPicker.colorName.blue=Bleu
+ColorPicker.colorName.cyan=Cyan
+ColorPicker.colorName.darkblue=Bleu sombre
+ColorPicker.colorName.darkcyan=Cyan sombre
+ColorPicker.colorName.darkgray=Gris fonc\u00E9
+ColorPicker.colorName.darkgreen=Vert fonc\u00E9
+ColorPicker.colorName.darkmagenta=Magenta sombre
+ColorPicker.colorName.darkred=Rouge sombre
+ColorPicker.colorName.gray=Gris
+ColorPicker.colorName.green=Vert
+ColorPicker.colorName.lightblue=Bleu clair
+ColorPicker.colorName.lightcyan=Cyan clair
+ColorPicker.colorName.lightgray=Gris clair
+ColorPicker.colorName.lightgreen=Vert clair
+ColorPicker.colorName.lightyellow=Jaune clair
+ColorPicker.colorName.magenta=Magenta
+ColorPicker.colorName.mediumblue=Bleu fonc\u00E9
+ColorPicker.colorName.orange=Orange
+ColorPicker.colorName.pink=Rose
+ColorPicker.colorName.red=Rouge
+ColorPicker.colorName.white=Blanc
+ColorPicker.colorName.yellow=Jaune
+
+# Accessibility strings
+#
+Accessibility.title.Pagination.PreviousButton=S\u00E9lectionner la page pr\u00E9c\u00E9dente
+Accessibility.title.Pagination.NextButton=S\u00E9lectionner la page suivante
+Accessibility.title.TabPane.CloseButton=Fermer
+Accessibility.title.ToolBar.OverflowButton=Bouton D\u00E9passement
+
+### Dialogs ###
+
+Dialog.apply.button = Appliquer
+Dialog.ok.button = OK
+Dialog.close.button = Fermer
+Dialog.cancel.button = Annuler
+Dialog.yes.button = Oui
+Dialog.no.button = Non
+Dialog.finish.button = Terminer 
+Dialog.next.button = Suivant 
+Dialog.previous.button = Pr\u00E9c\u00E9dent 
+
+Dialog.detail.button.more = Afficher les d\u00E9tails
+Dialog.detail.button.less = Masquer les d\u00E9tails
+
+### Common Dialogs ###
+
+Dialog.error.title=Erreur
+Dialog.error.header=Erreur
+
+Dialog.info.title=Message
+Dialog.info.header=Message
+
+Dialog.warning.title=Avertissement
+Dialog.warning.header=Avertissement
+
+Dialog.confirm.title=Confirmation
+Dialog.confirm.header=Confirmation
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_ja.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_ja.properties	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_ja.properties	(date 1547619866000)
@@ -0,0 +1,115 @@
+# ProgressIndicator, the string that's displayed at 100%
+ProgressIndicator.doneString=\u5B8C\u4E86
+
+# ListView
+ListView.noContent=
+
+# TableView
+TableView.noContent=\u8868\u306B\u306F\u4E2D\u8EAB\u304C\u3042\u308A\u307E\u305B\u3093
+TableView.noColumns=\u8868\u306B\u5217\u306F\u3042\u308A\u307E\u305B\u3093
+# Note there is a space after the comma:
+TableView.nestedColumnControlMenuSeparator=, 
+
+# TextField, PasswordField, TextArea
+# The keys must match the action strings in TextInputControlBehavior
+TextInputControl.menu.Undo=\u5143\u306B\u623B\u3059
+TextInputControl.menu.Redo=\u3084\u308A\u76F4\u3057
+TextInputControl.menu.Cut=\u5207\u53D6\u308A
+TextInputControl.menu.Copy=\u30B3\u30D4\u30FC
+TextInputControl.menu.Paste=\u8CBC\u4ED8\u3051
+TextInputControl.menu.DeleteSelection=\u524A\u9664
+TextInputControl.menu.SelectAll=\u3059\u3079\u3066\u9078\u629E
+TextInputControl.menu.SelectWord=\u9078\u629E
+
+# DatePicker
+#
+# DatePicker context menu
+DatePicker.contextMenu.showToday=\u4ECA\u65E5\u3092\u8868\u793A
+DatePicker.contextMenu.showWeekNumbers=\u9031\u756A\u53F7\u306E\u8868\u793A
+
+# ColorPicker
+ColorPicker.customColorLink=\u30AB\u30B9\u30BF\u30E0\u30FB\u30AB\u30E9\u30FC...
+ColorPicker.customColorLabel=\u30AB\u30B9\u30BF\u30E0\u30FB\u30AB\u30E9\u30FC
+ColorPicker.removeColor=\u8272\u306E\u9664\u53BB
+ColorPicker.customColorDialogTitle=\u30AB\u30B9\u30BF\u30E0\u30FB\u30AB\u30E9\u30FC
+ColorPicker.currentColor=\u73FE\u5728\u306E\u8272
+ColorPicker.newColor=\u65B0\u898F\u306E\u8272
+# RGB (Red, Green, Blue)
+ColorPicker.colorType.rgb=RGB
+# HSB (Hue, Saturation, Brightness). Same thing as HSV, but not HSL, HLS, HSI.
+ColorPicker.colorType.hsb=HSB
+# Web color value (used in HTML & CSS)
+ColorPicker.colorType.web=Web
+ColorPicker.opacity_colon=\u4E0D\u900F\u660E\u5EA6:
+ColorPicker.Save=\u4FDD\u5B58
+ColorPicker.Use=\u4F7F\u7528
+ColorPicker.Cancel=\u53D6\u6D88
+ColorPicker.hue_colon=\u8272\u76F8:
+ColorPicker.saturation_colon=\u5F69\u5EA6:
+ColorPicker.brightness_colon=\u660E\u5EA6:
+ColorPicker.red_colon=\u8D64:
+ColorPicker.green_colon=\u7DD1:
+ColorPicker.blue_colon=\u9752:
+ColorPicker.web_colon=Web:
+ColorPicker.OK = OK
+
+ColorPicker.colorName.transparent=\u900F\u660E
+ColorPicker.colorName.black=\u9ED2
+ColorPicker.colorName.blue=\u9752
+ColorPicker.colorName.cyan=\u30B7\u30A2\u30F3
+ColorPicker.colorName.darkblue=\u30C0\u30FC\u30AF\u30FB\u30D6\u30EB\u30FC
+ColorPicker.colorName.darkcyan=\u30C0\u30FC\u30AF\u30FB\u30B7\u30A2\u30F3
+ColorPicker.colorName.darkgray=\u30C0\u30FC\u30AF\u30FB\u30B0\u30EC\u30FC
+ColorPicker.colorName.darkgreen=\u30C0\u30FC\u30AF\u30FB\u30B0\u30EA\u30FC\u30F3
+ColorPicker.colorName.darkmagenta=\u30C0\u30FC\u30AF\u30FB\u30DE\u30BC\u30F3\u30BF
+ColorPicker.colorName.darkred=\u30C0\u30FC\u30AF\u30FB\u30EC\u30C3\u30C9
+ColorPicker.colorName.gray=\u7070\u8272
+ColorPicker.colorName.green=\u7DD1
+ColorPicker.colorName.lightblue=\u30E9\u30A4\u30C8\u30FB\u30D6\u30EB\u30FC
+ColorPicker.colorName.lightcyan=\u30E9\u30A4\u30C8\u30FB\u30B7\u30A2\u30F3
+ColorPicker.colorName.lightgray=\u30E9\u30A4\u30C8\u30FB\u30B0\u30EC\u30FC
+ColorPicker.colorName.lightgreen=\u30E9\u30A4\u30C8\u30FB\u30B0\u30EA\u30FC\u30F3
+ColorPicker.colorName.lightyellow=\u8584\u3044\u9EC4
+ColorPicker.colorName.magenta=\u30DE\u30BC\u30F3\u30BF
+ColorPicker.colorName.mediumblue=\u30DF\u30C7\u30A3\u30A2\u30E0\u30FB\u30D6\u30EB\u30FC
+ColorPicker.colorName.orange=\u30AA\u30EC\u30F3\u30B8
+ColorPicker.colorName.pink=\u30D4\u30F3\u30AF
+ColorPicker.colorName.red=\u8D64
+ColorPicker.colorName.white=\u767D
+ColorPicker.colorName.yellow=\u9EC4
+
+# Accessibility strings
+#
+Accessibility.title.Pagination.PreviousButton=\u524D\u306E\u30DA\u30FC\u30B8\u3092\u9078\u629E
+Accessibility.title.Pagination.NextButton=\u6B21\u306E\u30DA\u30FC\u30B8\u3092\u9078\u629E
+Accessibility.title.TabPane.CloseButton=\u9589\u3058\u308B
+Accessibility.title.ToolBar.OverflowButton=\u300C\u30AA\u30FC\u30D0\u30FC\u30D5\u30ED\u30FC\u300D\u30DC\u30BF\u30F3
+
+### Dialogs ###
+
+Dialog.apply.button = \u9069\u7528
+Dialog.ok.button = OK
+Dialog.close.button = \u9589\u3058\u308B
+Dialog.cancel.button = \u53D6\u6D88
+Dialog.yes.button = \u306F\u3044
+Dialog.no.button = \u3044\u3044\u3048
+Dialog.finish.button = \u7D42\u4E86 
+Dialog.next.button = \u6B21 
+Dialog.previous.button = \u524D
+
+Dialog.detail.button.more = \u8A73\u7D30\u306E\u8868\u793A
+Dialog.detail.button.less = \u8A73\u7D30\u306E\u975E\u8868\u793A
+
+### Common Dialogs ###
+
+Dialog.error.title=\u30A8\u30E9\u30FC
+Dialog.error.header=\u30A8\u30E9\u30FC
+
+Dialog.info.title=\u30E1\u30C3\u30BB\u30FC\u30B8
+Dialog.info.header=\u30E1\u30C3\u30BB\u30FC\u30B8
+
+Dialog.warning.title=\u8B66\u544A
+Dialog.warning.header=\u8B66\u544A
+
+Dialog.confirm.title=\u78BA\u8A8D
+Dialog.confirm.header=\u78BA\u8A8D
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls.properties	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls.properties	(date 1547619866000)
@@ -0,0 +1,121 @@
+# ProgressIndicator, the string that's displayed at 100%
+ProgressIndicator.doneString=Done
+
+# ListView
+ListView.noContent=
+
+# TableView
+TableView.noContent=No content in table
+TableView.noColumns=No columns in table
+# Note there is a space after the comma:
+TableView.nestedColumnControlMenuSeparator=, 
+
+# TextField, PasswordField, TextArea
+# The keys must match the action strings in TextInputControlBehavior
+TextInputControl.menu.Undo=Undo
+TextInputControl.menu.Redo=Redo
+TextInputControl.menu.Cut=Cut
+TextInputControl.menu.Copy=Copy
+TextInputControl.menu.Paste=Paste
+TextInputControl.menu.DeleteSelection=Delete
+TextInputControl.menu.SelectAll=Select All
+TextInputControl.menu.SelectWord=Select
+
+# DatePicker
+#
+# DatePicker context menu
+DatePicker.contextMenu.showToday=Show Today
+DatePicker.contextMenu.showWeekNumbers=Show Week Numbers
+
+# ColorPicker
+ColorPicker.customColorLink=Custom Color...
+ColorPicker.customColorLabel=Custom Colors
+ColorPicker.removeColor=Remove Color
+ColorPicker.customColorDialogTitle=Custom Colors
+ColorPicker.currentColor=Current Color
+ColorPicker.newColor=New Color
+# RGB (Red, Green, Blue)
+ColorPicker.colorType.rgb=RGB
+# HSB (Hue, Saturation, Brightness). Same thing as HSV, but not HSL, HLS, HSI.
+ColorPicker.colorType.hsb=HSB
+# Web color value (used in HTML & CSS)
+ColorPicker.colorType.web=Web
+ColorPicker.opacity_colon=Opacity:
+ColorPicker.Save=Save
+ColorPicker.Use=Use
+ColorPicker.Cancel=Cancel
+ColorPicker.hue_colon=Hue:
+ColorPicker.saturation_colon=Saturation:
+ColorPicker.brightness_colon=Brightness:
+ColorPicker.red_colon=Red:
+ColorPicker.green_colon=Green:
+ColorPicker.blue_colon=Blue:
+ColorPicker.web_colon=Web:
+ColorPicker.OK = OK
+
+ColorPicker.colorName.transparent=Transparent
+ColorPicker.colorName.black=Black
+ColorPicker.colorName.blue=Blue
+ColorPicker.colorName.cyan=Cyan
+ColorPicker.colorName.darkblue=Dark Blue
+ColorPicker.colorName.darkcyan=Dark Cyan
+ColorPicker.colorName.darkgray=Dark Gray
+ColorPicker.colorName.darkgreen=Dark Green
+ColorPicker.colorName.darkmagenta=Dark Magenta
+ColorPicker.colorName.darkred=Dark Red
+ColorPicker.colorName.gray=Gray
+ColorPicker.colorName.green=Green
+ColorPicker.colorName.lightblue=Light Blue
+ColorPicker.colorName.lightcyan=Light Cyan
+ColorPicker.colorName.lightgray=Light Gray
+ColorPicker.colorName.lightgreen=Light Green
+ColorPicker.colorName.lightyellow=Light Yellow
+ColorPicker.colorName.lime=Lime
+ColorPicker.colorName.magenta=Magenta
+ColorPicker.colorName.maroon=Maroon
+ColorPicker.colorName.mediumblue=Medium Blue
+ColorPicker.colorName.navy=Navy
+ColorPicker.colorName.olive=Olive
+ColorPicker.colorName.orange=Orange
+ColorPicker.colorName.pink=Pink
+ColorPicker.colorName.purple=Purple
+ColorPicker.colorName.red=Red
+ColorPicker.colorName.teal=Teal
+ColorPicker.colorName.white=White
+ColorPicker.colorName.yellow=Yellow
+
+# Accessibility strings
+#
+Accessibility.title.Pagination.PreviousButton=Select previous page
+Accessibility.title.Pagination.NextButton=Select next page
+Accessibility.title.TabPane.CloseButton=Close
+Accessibility.title.ToolBar.OverflowButton=Overflow button
+
+### Dialogs ###
+
+Dialog.apply.button = Apply
+Dialog.ok.button = OK
+Dialog.close.button = Close
+Dialog.cancel.button = Cancel
+Dialog.yes.button = Yes
+Dialog.no.button = No
+Dialog.finish.button = Finish 
+Dialog.next.button = Next 
+Dialog.previous.button = Previous 
+
+Dialog.detail.button.more = Show Details
+Dialog.detail.button.less = Hide Details
+
+### Common Dialogs ###
+
+Dialog.error.title=Error
+Dialog.error.header=Error
+
+Dialog.info.title=Message
+Dialog.info.header=Message
+
+Dialog.warning.title=Warning
+Dialog.warning.header=Warning
+
+Dialog.confirm.title=Confirmation
+Dialog.confirm.header=Confirmation
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_zh_CN.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_zh_CN.properties	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_zh_CN.properties	(date 1547619866000)
@@ -0,0 +1,115 @@
+# ProgressIndicator, the string that's displayed at 100%
+ProgressIndicator.doneString=\u5B8C\u6210
+
+# ListView
+ListView.noContent=
+
+# TableView
+TableView.noContent=\u8868\u4E2D\u65E0\u5185\u5BB9
+TableView.noColumns=\u8868\u4E2D\u65E0\u5217
+# Note there is a space after the comma:
+TableView.nestedColumnControlMenuSeparator=, 
+
+# TextField, PasswordField, TextArea
+# The keys must match the action strings in TextInputControlBehavior
+TextInputControl.menu.Undo=\u64A4\u6D88
+TextInputControl.menu.Redo=\u91CD\u505A
+TextInputControl.menu.Cut=\u526A\u5207
+TextInputControl.menu.Copy=\u590D\u5236
+TextInputControl.menu.Paste=\u7C98\u8D34
+TextInputControl.menu.DeleteSelection=\u5220\u9664
+TextInputControl.menu.SelectAll=\u5168\u9009
+TextInputControl.menu.SelectWord=\u9009\u62E9
+
+# DatePicker
+#
+# DatePicker context menu
+DatePicker.contextMenu.showToday=\u663E\u793A\u4ECA\u5929
+DatePicker.contextMenu.showWeekNumbers=\u663E\u793A\u5468\u6570
+
+# ColorPicker
+ColorPicker.customColorLink=\u5B9A\u5236\u989C\u8272...
+ColorPicker.customColorLabel=\u5B9A\u5236\u989C\u8272
+ColorPicker.removeColor=\u5220\u9664\u989C\u8272
+ColorPicker.customColorDialogTitle=\u5B9A\u5236\u989C\u8272
+ColorPicker.currentColor=\u5F53\u524D\u989C\u8272
+ColorPicker.newColor=\u65B0\u989C\u8272
+# RGB (Red, Green, Blue)
+ColorPicker.colorType.rgb=RGB
+# HSB (Hue, Saturation, Brightness). Same thing as HSV, but not HSL, HLS, HSI.
+ColorPicker.colorType.hsb=HSB
+# Web color value (used in HTML & CSS)
+ColorPicker.colorType.web=Web
+ColorPicker.opacity_colon=\u4E0D\u900F\u660E\u5EA6:
+ColorPicker.Save=\u4FDD\u5B58
+ColorPicker.Use=\u4F7F\u7528
+ColorPicker.Cancel=\u53D6\u6D88
+ColorPicker.hue_colon=\u8272\u8C03:
+ColorPicker.saturation_colon=\u9971\u548C\u5EA6:
+ColorPicker.brightness_colon=\u4EAE\u5EA6:
+ColorPicker.red_colon=\u7EA2\u8272:
+ColorPicker.green_colon=\u7EFF\u8272:
+ColorPicker.blue_colon=\u84DD\u8272:
+ColorPicker.web_colon=Web:
+ColorPicker.OK = \u786E\u5B9A
+
+ColorPicker.colorName.transparent=\u900F\u660E
+ColorPicker.colorName.black=\u9ED1\u8272
+ColorPicker.colorName.blue=\u84DD\u8272
+ColorPicker.colorName.cyan=\u9752\u8272
+ColorPicker.colorName.darkblue=\u6DF1\u84DD\u8272
+ColorPicker.colorName.darkcyan=\u6DF1\u9752\u8272
+ColorPicker.colorName.darkgray=\u6DF1\u7070\u8272
+ColorPicker.colorName.darkgreen=\u6DF1\u7EFF\u8272
+ColorPicker.colorName.darkmagenta=\u6DF1\u6D0B\u7EA2\u8272
+ColorPicker.colorName.darkred=\u6DF1\u7EA2\u8272
+ColorPicker.colorName.gray=\u7070\u8272
+ColorPicker.colorName.green=\u7EFF\u8272
+ColorPicker.colorName.lightblue=\u6D45\u84DD\u8272
+ColorPicker.colorName.lightcyan=\u6DE1\u9752\u8272
+ColorPicker.colorName.lightgray=\u6D45\u7070\u8272
+ColorPicker.colorName.lightgreen=\u6D45\u7EFF\u8272
+ColorPicker.colorName.lightyellow=\u6D45\u9EC4\u8272
+ColorPicker.colorName.magenta=\u6D0B\u7EA2\u8272
+ColorPicker.colorName.mediumblue=\u4E2D\u84DD\u8272
+ColorPicker.colorName.orange=\u6A59\u8272
+ColorPicker.colorName.pink=\u7C89\u7EA2\u8272
+ColorPicker.colorName.red=\u7EA2\u8272
+ColorPicker.colorName.white=\u767D\u8272
+ColorPicker.colorName.yellow=\u9EC4\u8272
+
+# Accessibility strings
+#
+Accessibility.title.Pagination.PreviousButton=\u9009\u62E9\u4E0A\u4E00\u9875
+Accessibility.title.Pagination.NextButton=\u9009\u62E9\u4E0B\u4E00\u9875
+Accessibility.title.TabPane.CloseButton=\u5173\u95ED
+Accessibility.title.ToolBar.OverflowButton=\u201C\u6EA2\u51FA\u201D\u6309\u94AE
+
+### Dialogs ###
+
+Dialog.apply.button = \u5E94\u7528
+Dialog.ok.button = \u786E\u5B9A
+Dialog.close.button = \u5173\u95ED
+Dialog.cancel.button = \u53D6\u6D88
+Dialog.yes.button = \u662F
+Dialog.no.button = \u5426
+Dialog.finish.button = \u5B8C\u6210 
+Dialog.next.button = \u4E0B\u4E00\u6B65 
+Dialog.previous.button = \u4E0A\u4E00\u6B65 
+
+Dialog.detail.button.more = \u663E\u793A\u8BE6\u7EC6\u4FE1\u606F
+Dialog.detail.button.less = \u9690\u85CF\u8BE6\u7EC6\u4FE1\u606F
+
+### Common Dialogs ###
+
+Dialog.error.title=\u9519\u8BEF
+Dialog.error.header=\u9519\u8BEF
+
+Dialog.info.title=\u6D88\u606F
+Dialog.info.header=\u6D88\u606F
+
+Dialog.warning.title=\u8B66\u544A
+Dialog.warning.header=\u8B66\u544A
+
+Dialog.confirm.title=\u786E\u8BA4
+Dialog.confirm.header=\u786E\u8BA4
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_ko.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_ko.properties	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_ko.properties	(date 1547619866000)
@@ -0,0 +1,115 @@
+# ProgressIndicator, the string that's displayed at 100%
+ProgressIndicator.doneString=\uC644\uB8CC
+
+# ListView
+ListView.noContent=
+
+# TableView
+TableView.noContent=\uD14C\uC774\uBE14\uC5D0 \uCF58\uD150\uCE20 \uC5C6\uC74C
+TableView.noColumns=\uD14C\uC774\uBE14\uC5D0 \uC5F4 \uC5C6\uC74C
+# Note there is a space after the comma:
+TableView.nestedColumnControlMenuSeparator=, 
+
+# TextField, PasswordField, TextArea
+# The keys must match the action strings in TextInputControlBehavior
+TextInputControl.menu.Undo=\uC2E4\uD589 \uCDE8\uC18C
+TextInputControl.menu.Redo=\uC7AC\uC2E4\uD589
+TextInputControl.menu.Cut=\uC798\uB77C\uB0B4\uAE30
+TextInputControl.menu.Copy=\uBCF5\uC0AC
+TextInputControl.menu.Paste=\uBD99\uC5EC\uB123\uAE30
+TextInputControl.menu.DeleteSelection=\uC0AD\uC81C
+TextInputControl.menu.SelectAll=\uBAA8\uB450 \uC120\uD0DD
+TextInputControl.menu.SelectWord=\uC120\uD0DD
+
+# DatePicker
+#
+# DatePicker context menu
+DatePicker.contextMenu.showToday=\uC624\uB298 \uB0A0\uC9DC \uD45C\uC2DC
+DatePicker.contextMenu.showWeekNumbers=\uBA87 \uC9F8 \uC8FC\uC778\uC9C0 \uD45C\uC2DC
+
+# ColorPicker
+ColorPicker.customColorLink=\uC0AC\uC6A9\uC790 \uC815\uC758 \uC0C9\uC0C1...
+ColorPicker.customColorLabel=\uC0AC\uC6A9\uC790 \uC815\uC758 \uC0C9\uC0C1
+ColorPicker.removeColor=\uC0C9\uC0C1 \uC81C\uAC70
+ColorPicker.customColorDialogTitle=\uC0AC\uC6A9\uC790 \uC815\uC758 \uC0C9\uC0C1
+ColorPicker.currentColor=\uD604\uC7AC \uC0C9\uC0C1
+ColorPicker.newColor=\uC0C8 \uC0C9\uC0C1
+# RGB (Red, Green, Blue)
+ColorPicker.colorType.rgb=RGB
+# HSB (Hue, Saturation, Brightness). Same thing as HSV, but not HSL, HLS, HSI.
+ColorPicker.colorType.hsb=HSB
+# Web color value (used in HTML & CSS)
+ColorPicker.colorType.web=Web
+ColorPicker.opacity_colon=\uBD88\uD22C\uBA85\uB3C4:
+ColorPicker.Save=\uC800\uC7A5
+ColorPicker.Use=\uC0AC\uC6A9
+ColorPicker.Cancel=\uCDE8\uC18C
+ColorPicker.hue_colon=\uC0C9\uC870:
+ColorPicker.saturation_colon=\uCC44\uB3C4:
+ColorPicker.brightness_colon=\uD718\uB3C4:
+ColorPicker.red_colon=\uBE68\uAC04\uC0C9:
+ColorPicker.green_colon=\uB179\uC0C9:
+ColorPicker.blue_colon=\uD30C\uB780\uC0C9:
+ColorPicker.web_colon=Web:
+ColorPicker.OK = \uD655\uC778
+
+ColorPicker.colorName.transparent=\uD22C\uBA85
+ColorPicker.colorName.black=\uAC80\uC815\uC0C9
+ColorPicker.colorName.blue=\uD30C\uB780\uC0C9
+ColorPicker.colorName.cyan=\uCCAD\uB85D\uC0C9
+ColorPicker.colorName.darkblue=\uC9C4\uD55C \uD30C\uB780\uC0C9
+ColorPicker.colorName.darkcyan=\uC9C4\uD55C \uB179\uCCAD\uC0C9
+ColorPicker.colorName.darkgray=\uC9D9\uC740 \uD68C\uC0C9
+ColorPicker.colorName.darkgreen=\uC9C4\uD55C \uB179\uC0C9
+ColorPicker.colorName.darkmagenta=\uC9C4\uD55C \uC790\uD64D\uC0C9
+ColorPicker.colorName.darkred=\uC9C4\uD55C \uBE68\uAC04\uC0C9
+ColorPicker.colorName.gray=\uD68C\uC0C9
+ColorPicker.colorName.green=\uB179\uC0C9
+ColorPicker.colorName.lightblue=\uC5F0\uD55C \uD30C\uB780\uC0C9
+ColorPicker.colorName.lightcyan=\uC5F0\uD55C \uB179\uCCAD\uC0C9
+ColorPicker.colorName.lightgray=\uC5F0\uD55C \uD68C\uC0C9
+ColorPicker.colorName.lightgreen=\uC5F0\uD55C \uB179\uC0C9
+ColorPicker.colorName.lightyellow=\uC5F0\uD55C \uB178\uB780\uC0C9
+ColorPicker.colorName.magenta=\uC9C4\uD64D\uC0C9
+ColorPicker.colorName.mediumblue=\uAC10\uC0C9
+ColorPicker.colorName.orange=\uC8FC\uD669\uC0C9
+ColorPicker.colorName.pink=\uBD84\uD64D\uC0C9
+ColorPicker.colorName.red=\uBE68\uAC04\uC0C9
+ColorPicker.colorName.white=\uD770\uC0C9
+ColorPicker.colorName.yellow=\uB178\uB780\uC0C9
+
+# Accessibility strings
+#
+Accessibility.title.Pagination.PreviousButton=\uC774\uC804 \uD398\uC774\uC9C0 \uC120\uD0DD
+Accessibility.title.Pagination.NextButton=\uB2E4\uC74C \uD398\uC774\uC9C0 \uC120\uD0DD
+Accessibility.title.TabPane.CloseButton=\uB2EB\uAE30
+Accessibility.title.ToolBar.OverflowButton=\uC624\uBC84\uD50C\uB85C\uC6B0 \uB2E8\uCD94
+
+### Dialogs ###
+
+Dialog.apply.button = \uC801\uC6A9
+Dialog.ok.button = \uD655\uC778
+Dialog.close.button = \uB2EB\uAE30
+Dialog.cancel.button = \uCDE8\uC18C
+Dialog.yes.button = \uC608
+Dialog.no.button = \uC544\uB2C8\uC624
+Dialog.finish.button = \uC644\uB8CC 
+Dialog.next.button = \uB2E4\uC74C 
+Dialog.previous.button = \uC774\uC804 
+
+Dialog.detail.button.more = \uC138\uBD80\uC815\uBCF4 \uD45C\uC2DC
+Dialog.detail.button.less = \uC138\uBD80\uC815\uBCF4 \uC228\uAE30\uAE30
+
+### Common Dialogs ###
+
+Dialog.error.title=\uC624\uB958
+Dialog.error.header=\uC624\uB958
+
+Dialog.info.title=\uBA54\uC2DC\uC9C0
+Dialog.info.header=\uBA54\uC2DC\uC9C0
+
+Dialog.warning.title=\uACBD\uACE0
+Dialog.warning.header=\uACBD\uACE0
+
+Dialog.confirm.title=\uD655\uC778
+Dialog.confirm.header=\uD655\uC778
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_de.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_de.properties	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_de.properties	(date 1547619866000)
@@ -0,0 +1,115 @@
+# ProgressIndicator, the string that's displayed at 100%
+ProgressIndicator.doneString=Fertig
+
+# ListView
+ListView.noContent=
+
+# TableView
+TableView.noContent=Kein Content in Tabelle
+TableView.noColumns=Keine Spalten in Tabelle
+# Note there is a space after the comma:
+TableView.nestedColumnControlMenuSeparator=, 
+
+# TextField, PasswordField, TextArea
+# The keys must match the action strings in TextInputControlBehavior
+TextInputControl.menu.Undo=R\u00FCckg\u00E4ngig machen
+TextInputControl.menu.Redo=Wiederholen
+TextInputControl.menu.Cut=Ausschneiden
+TextInputControl.menu.Copy=Kopieren
+TextInputControl.menu.Paste=Einf\u00FCgen
+TextInputControl.menu.DeleteSelection=L\u00F6schen
+TextInputControl.menu.SelectAll=Alles markieren
+TextInputControl.menu.SelectWord=Ausw\u00E4hlen
+
+# DatePicker
+#
+# DatePicker context menu
+DatePicker.contextMenu.showToday=Heute anzeigen
+DatePicker.contextMenu.showWeekNumbers=Wochennummern anzeigen
+
+# ColorPicker
+ColorPicker.customColorLink=Benutzerdefinierte Farbe...
+ColorPicker.customColorLabel=Benutzerdefinierte Farben
+ColorPicker.removeColor=Farbe entfernen
+ColorPicker.customColorDialogTitle=Benutzerdefinierte Farben
+ColorPicker.currentColor=Aktuelle Farbe
+ColorPicker.newColor=Neue Farbe
+# RGB (Red, Green, Blue)
+ColorPicker.colorType.rgb=RGB
+# HSB (Hue, Saturation, Brightness). Same thing as HSV, but not HSL, HLS, HSI.
+ColorPicker.colorType.hsb=HSB
+# Web color value (used in HTML & CSS)
+ColorPicker.colorType.web=Web
+ColorPicker.opacity_colon=Transparenz:
+ColorPicker.Save=Speichern
+ColorPicker.Use=Verwenden
+ColorPicker.Cancel=Abbrechen
+ColorPicker.hue_colon=Farbton:
+ColorPicker.saturation_colon=S\u00E4ttigung:
+ColorPicker.brightness_colon=Helligkeit:
+ColorPicker.red_colon=Rot:
+ColorPicker.green_colon=Gr\u00FCn:
+ColorPicker.blue_colon=Blau:
+ColorPicker.web_colon=Web:
+ColorPicker.OK = OK
+
+ColorPicker.colorName.transparent=Transparent
+ColorPicker.colorName.black=Schwarz
+ColorPicker.colorName.blue=Blau
+ColorPicker.colorName.cyan=Zyan
+ColorPicker.colorName.darkblue=Dunkelblau
+ColorPicker.colorName.darkcyan=Dunkelzyan
+ColorPicker.colorName.darkgray=Dunkelgrau
+ColorPicker.colorName.darkgreen=Dunkelgr\u00FCn
+ColorPicker.colorName.darkmagenta=Dunkelmagenta
+ColorPicker.colorName.darkred=Dunkelrot
+ColorPicker.colorName.gray=Grau
+ColorPicker.colorName.green=Gr\u00FCn
+ColorPicker.colorName.lightblue=Hellblau
+ColorPicker.colorName.lightcyan=Hellzyan
+ColorPicker.colorName.lightgray=Hellgrau
+ColorPicker.colorName.lightgreen=Hellgr\u00FCn
+ColorPicker.colorName.lightyellow=Hellgelb
+ColorPicker.colorName.magenta=Magenta
+ColorPicker.colorName.mediumblue=Mittelblau
+ColorPicker.colorName.orange=Orange
+ColorPicker.colorName.pink=Pink
+ColorPicker.colorName.red=Rot
+ColorPicker.colorName.white=Wei\u00DF
+ColorPicker.colorName.yellow=Gelb
+
+# Accessibility strings
+#
+Accessibility.title.Pagination.PreviousButton=Vorherige Seite ausw\u00E4hlen
+Accessibility.title.Pagination.NextButton=N\u00E4chste Seite ausw\u00E4hlen
+Accessibility.title.TabPane.CloseButton=Schlie\u00DFen
+Accessibility.title.ToolBar.OverflowButton=Schaltfl\u00E4che "\u00DCberlauf"
+
+### Dialogs ###
+
+Dialog.apply.button = \u00DCbernehmen
+Dialog.ok.button = OK
+Dialog.close.button = Schlie\u00DFen
+Dialog.cancel.button = Abbrechen
+Dialog.yes.button = Ja
+Dialog.no.button = Nein
+Dialog.finish.button = Fertigstellen 
+Dialog.next.button = Weiter
+Dialog.previous.button = Zur\u00FCck
+
+Dialog.detail.button.more = Details anzeigen
+Dialog.detail.button.less = Details ausblenden
+
+### Common Dialogs ###
+
+Dialog.error.title=Fehler
+Dialog.error.header=Fehler
+
+Dialog.info.title=Meldung
+Dialog.info.header=Meldung
+
+Dialog.warning.title=Warnung
+Dialog.warning.header=Warnung
+
+Dialog.confirm.title=Best\u00E4tigung
+Dialog.confirm.header=Best\u00E4tigung
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls-nt.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls-nt.properties	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls-nt.properties	(date 1547619866000)
@@ -0,0 +1,18 @@
+# This file contains non-translatable properties. These may be
+# properties that depend on the country of the locale, rather than on
+# the language.
+#
+# There are no locale-specific versions of this file included with
+# JavaFX, but they may be added to the classpath by developers or
+# users.  For example, a file named
+# com/sun/javafx/scene/control/skin/resources/controls-nt_ru_RU.properties
+# could contain the line "DatePicker.showWeekNumbers=RU" to enable ISO
+# week numbers in the Russia locale.
+#
+# See Javadoc for java.util.ResourceBundle.getBundle() for a complete
+# description of the search and instantiation strategy.
+#
+# DatePicker
+#
+# List of countries where ISO-8601 week numbers are shown by default (mostly in the EU).
+DatePicker.showWeekNumbers=AT AX BE CH CZ DE DK EE ES EU FI FO FR GB GL GR IE IM IS IT LI LU LV NL NO PL PT SE SJ
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/UrlBoard.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/UrlBoard.txt	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/UrlBoard.txt	(date 1547619866000)
@@ -0,0 +1,9 @@
+#removed unsupported ymacron, yhook
+[q|1|\[ ][w|2|\] ][e|3|{|egrave|eacute|ecirc|euml ][r|4|}|reg ][t|5|<|tm ][y|6|>|ygrave|yacute|ycirc|yuml ][u|7|laquo|ugrave|uacute|ucirc|uuml ][i|8|raquo|igrave|iacute|icirc|iuml ][o|9|`|ograve|oacute|ocirc|otilde|ouml|oslash|deg ][p|0|~|para|pi ]
+
+ [a|#|agrave|aacute|acirc|atilde|auml|aring ][s|\$|euro|pound|yen|scedil|scaron|szlig|sigma ][d|%|eth ][f|& ][g|*|sect ][h|(|middot ][j|)|deg ][k|"|neq ][l|@ ]
+
+[$shift ][z|iexcl ][x|iquest ][c|;|permil|ccedil|copy|cent ][v|:|reg ][b|=|tm ][n|+|ntilde ][m|'|micro ][-|_ ][$backspace ]
+
+[$hide ][$SymbolABC  ][www.|http://  ][.|,  ][.com|.org|.net  ][/|\\  ][$enter  ]
+
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_it.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_it.properties	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_it.properties	(date 1547619866000)
@@ -0,0 +1,115 @@
+# ProgressIndicator, the string that's displayed at 100%
+ProgressIndicator.doneString=Operazione completata
+
+# ListView
+ListView.noContent=
+
+# TableView
+TableView.noContent=Nessun contenuto nella tabella
+TableView.noColumns=Nessuna colonna nella tabella
+# Note there is a space after the comma:
+TableView.nestedColumnControlMenuSeparator=, 
+
+# TextField, PasswordField, TextArea
+# The keys must match the action strings in TextInputControlBehavior
+TextInputControl.menu.Undo=Annulla
+TextInputControl.menu.Redo=Ripeti
+TextInputControl.menu.Cut=Taglia
+TextInputControl.menu.Copy=Copia
+TextInputControl.menu.Paste=Incolla
+TextInputControl.menu.DeleteSelection=Elimina
+TextInputControl.menu.SelectAll=Seleziona tutto
+TextInputControl.menu.SelectWord=Seleziona
+
+# DatePicker
+#
+# DatePicker context menu
+DatePicker.contextMenu.showToday=Mostra oggi
+DatePicker.contextMenu.showWeekNumbers=Mostra numeri settimana
+
+# ColorPicker
+ColorPicker.customColorLink=Personalizza colore...
+ColorPicker.customColorLabel=Colori personalizzati
+ColorPicker.removeColor=Rimuovi colore
+ColorPicker.customColorDialogTitle=Colori personalizzati
+ColorPicker.currentColor=Colore corrente
+ColorPicker.newColor=Nuovo colore
+# RGB (Red, Green, Blue)
+ColorPicker.colorType.rgb=RGB
+# HSB (Hue, Saturation, Brightness). Same thing as HSV, but not HSL, HLS, HSI.
+ColorPicker.colorType.hsb=HSB
+# Web color value (used in HTML & CSS)
+ColorPicker.colorType.web=Web
+ColorPicker.opacity_colon=Opacit\u00E0:
+ColorPicker.Save=Salva
+ColorPicker.Use=Uso
+ColorPicker.Cancel=Annulla
+ColorPicker.hue_colon=Tonalit\u00E0:
+ColorPicker.saturation_colon=Saturazione:
+ColorPicker.brightness_colon=Luminosit\u00E0:
+ColorPicker.red_colon=Rosso:
+ColorPicker.green_colon=Verde:
+ColorPicker.blue_colon=Blu:
+ColorPicker.web_colon=Web:
+ColorPicker.OK = OK
+
+ColorPicker.colorName.transparent=Trasparente
+ColorPicker.colorName.black=Nero
+ColorPicker.colorName.blue=Blu
+ColorPicker.colorName.cyan=Ciano
+ColorPicker.colorName.darkblue=Blu scuro
+ColorPicker.colorName.darkcyan=Ciano scuro
+ColorPicker.colorName.darkgray=Grigio scuro
+ColorPicker.colorName.darkgreen=Verde scuro
+ColorPicker.colorName.darkmagenta=Magenta scuro
+ColorPicker.colorName.darkred=Rosso scuro
+ColorPicker.colorName.gray=Grigio
+ColorPicker.colorName.green=Verde
+ColorPicker.colorName.lightblue=Azzurro
+ColorPicker.colorName.lightcyan=Ciano chiaro
+ColorPicker.colorName.lightgray=Grigio chiaro
+ColorPicker.colorName.lightgreen=Verde chiaro
+ColorPicker.colorName.lightyellow=Giallo chiaro
+ColorPicker.colorName.magenta=Magenta
+ColorPicker.colorName.mediumblue=Blu medio
+ColorPicker.colorName.orange=Arancione
+ColorPicker.colorName.pink=Rosa
+ColorPicker.colorName.red=Rosso
+ColorPicker.colorName.white=Bianco
+ColorPicker.colorName.yellow=Giallo
+
+# Accessibility strings
+#
+Accessibility.title.Pagination.PreviousButton=Selezionare la pagina precedente
+Accessibility.title.Pagination.NextButton=Selezionare la pagina successiva
+Accessibility.title.TabPane.CloseButton=Chiudi
+Accessibility.title.ToolBar.OverflowButton=Pulsante Overflow
+
+### Dialogs ###
+
+Dialog.apply.button = Applica
+Dialog.ok.button = OK
+Dialog.close.button = Chiudi
+Dialog.cancel.button = Annulla
+Dialog.yes.button = S\u00EC
+Dialog.no.button = No
+Dialog.finish.button = Fine 
+Dialog.next.button = Successivo 
+Dialog.previous.button = Precedente 
+
+Dialog.detail.button.more = Mostra dettagli
+Dialog.detail.button.less = Nascondi dettagli
+
+### Common Dialogs ###
+
+Dialog.error.title=Errore
+Dialog.error.header=Errore
+
+Dialog.info.title=Messaggio
+Dialog.info.header=Messaggio
+
+Dialog.warning.title=Avvertenza
+Dialog.warning.header=Avvertenza
+
+Dialog.confirm.title=Conferma
+Dialog.confirm.header=Conferma
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_pt_BR.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_pt_BR.properties	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_pt_BR.properties	(date 1547619866000)
@@ -0,0 +1,115 @@
+# ProgressIndicator, the string that's displayed at 100%
+ProgressIndicator.doneString=Conclu\u00EDdo
+
+# ListView
+ListView.noContent=
+
+# TableView
+TableView.noContent=N\u00E3o h\u00E1 conte\u00FAdo na tabela
+TableView.noColumns=N\u00E3o h\u00E1 coluna na tabela
+# Note there is a space after the comma:
+TableView.nestedColumnControlMenuSeparator=, 
+
+# TextField, PasswordField, TextArea
+# The keys must match the action strings in TextInputControlBehavior
+TextInputControl.menu.Undo=Desfazer
+TextInputControl.menu.Redo=Refazer
+TextInputControl.menu.Cut=Recortar
+TextInputControl.menu.Copy=Copiar
+TextInputControl.menu.Paste=Colar
+TextInputControl.menu.DeleteSelection=Excluir
+TextInputControl.menu.SelectAll=Selecionar Tudo
+TextInputControl.menu.SelectWord=Selecionar
+
+# DatePicker
+#
+# DatePicker context menu
+DatePicker.contextMenu.showToday=Mostrar Hoje
+DatePicker.contextMenu.showWeekNumbers=Mostrar N\u00FAmeros de Semana
+
+# ColorPicker
+ColorPicker.customColorLink=Cor Personalizada...
+ColorPicker.customColorLabel=Cores Personalizadas
+ColorPicker.removeColor=Remover Cor
+ColorPicker.customColorDialogTitle=Cores Personalizadas
+ColorPicker.currentColor=Cor Atual
+ColorPicker.newColor=Nova Cor
+# RGB (Red, Green, Blue)
+ColorPicker.colorType.rgb=RGB
+# HSB (Hue, Saturation, Brightness). Same thing as HSV, but not HSL, HLS, HSI.
+ColorPicker.colorType.hsb=HSB
+# Web color value (used in HTML & CSS)
+ColorPicker.colorType.web=Web
+ColorPicker.opacity_colon=Opacidade:
+ColorPicker.Save=Salvar
+ColorPicker.Use=Usar
+ColorPicker.Cancel=Cancelar
+ColorPicker.hue_colon=Matiz:
+ColorPicker.saturation_colon=Satura\u00E7\u00E3o:
+ColorPicker.brightness_colon=Brilho:
+ColorPicker.red_colon=Vermelho:
+ColorPicker.green_colon=Verde:
+ColorPicker.blue_colon=Azul:
+ColorPicker.web_colon=Web:
+ColorPicker.OK = OK
+
+ColorPicker.colorName.transparent=Transparente
+ColorPicker.colorName.black=Preto
+ColorPicker.colorName.blue=Azul
+ColorPicker.colorName.cyan=Ciano
+ColorPicker.colorName.darkblue=Azul-Escuro
+ColorPicker.colorName.darkcyan=Ciano-Escuro
+ColorPicker.colorName.darkgray=Cinza Escuro
+ColorPicker.colorName.darkgreen=Verde-Escuro
+ColorPicker.colorName.darkmagenta=Magenta-Escuro
+ColorPicker.colorName.darkred=Vermelho-Escuro
+ColorPicker.colorName.gray=Cinza
+ColorPicker.colorName.green=Green
+ColorPicker.colorName.lightblue=Azul-claro
+ColorPicker.colorName.lightcyan=Ciano-claro
+ColorPicker.colorName.lightgray=Cinza Claro
+ColorPicker.colorName.lightgreen=Verde-claro
+ColorPicker.colorName.lightyellow=Amarelo-claro
+ColorPicker.colorName.magenta=Magenta
+ColorPicker.colorName.mediumblue=Azul-M\u00E9dio
+ColorPicker.colorName.orange=Laranja
+ColorPicker.colorName.pink=Rosa
+ColorPicker.colorName.red=Vermelho
+ColorPicker.colorName.white=Branco
+ColorPicker.colorName.yellow=Amarelo
+
+# Accessibility strings
+#
+Accessibility.title.Pagination.PreviousButton=Selecionar p\u00E1gina anterior
+Accessibility.title.Pagination.NextButton=Selecionar pr\u00F3xima p\u00E1gina
+Accessibility.title.TabPane.CloseButton=Fechar
+Accessibility.title.ToolBar.OverflowButton=Bot\u00E3o Overflow
+
+### Dialogs ###
+
+Dialog.apply.button = Aplicar
+Dialog.ok.button = OK
+Dialog.close.button = Fechar
+Dialog.cancel.button = Cancelar
+Dialog.yes.button = Sim
+Dialog.no.button = N\u00E3o
+Dialog.finish.button = Finalizar 
+Dialog.next.button = Pr\u00F3ximo 
+Dialog.previous.button = Anterior 
+
+Dialog.detail.button.more = Mostrar Detalhes
+Dialog.detail.button.less = Ocultar Detalhes
+
+### Common Dialogs ###
+
+Dialog.error.title=Erro
+Dialog.error.header=Erro
+
+Dialog.info.title=Mensagem
+Dialog.info.header=Mensagem
+
+Dialog.warning.title=Advert\u00EAncia
+Dialog.warning.header=Advert\u00EAncia
+
+Dialog.confirm.title=Confirma\u00E7\u00E3o
+Dialog.confirm.header=Confirma\u00E7\u00E3o
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_sv.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_sv.properties	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_sv.properties	(date 1547619866000)
@@ -0,0 +1,115 @@
+# ProgressIndicator, the string that's displayed at 100%
+ProgressIndicator.doneString=Utf\u00F6rd
+
+# ListView
+ListView.noContent=
+
+# TableView
+TableView.noContent=Tabellen saknar inneh\u00E5ll
+TableView.noColumns=Tabellen saknar kolumner
+# Note there is a space after the comma:
+TableView.nestedColumnControlMenuSeparator=, 
+
+# TextField, PasswordField, TextArea
+# The keys must match the action strings in TextInputControlBehavior
+TextInputControl.menu.Undo=\u00C5ngra
+TextInputControl.menu.Redo=G\u00F6r om
+TextInputControl.menu.Cut=Klipp ut
+TextInputControl.menu.Copy=Kopiera
+TextInputControl.menu.Paste=Klistra in
+TextInputControl.menu.DeleteSelection=Ta bort
+TextInputControl.menu.SelectAll=Markera alla
+TextInputControl.menu.SelectWord=V\u00E4lj
+
+# DatePicker
+#
+# DatePicker context menu
+DatePicker.contextMenu.showToday=Visa idag
+DatePicker.contextMenu.showWeekNumbers=Visa veckonummer
+
+# ColorPicker
+ColorPicker.customColorLink=Anpassad f\u00E4rg...
+ColorPicker.customColorLabel=Anpassade f\u00E4rger
+ColorPicker.removeColor=Ta bort f\u00E4rg
+ColorPicker.customColorDialogTitle=Anpassade f\u00E4rger
+ColorPicker.currentColor=Aktuell f\u00E4rg
+ColorPicker.newColor=Ny f\u00E4rg
+# RGB (Red, Green, Blue)
+ColorPicker.colorType.rgb=RGB
+# HSB (Hue, Saturation, Brightness). Same thing as HSV, but not HSL, HLS, HSI.
+ColorPicker.colorType.hsb=HSB
+# Web color value (used in HTML & CSS)
+ColorPicker.colorType.web=Webb
+ColorPicker.opacity_colon=Opacitet:
+ColorPicker.Save=Spara
+ColorPicker.Use=Anv\u00E4nd
+ColorPicker.Cancel=Avbryt
+ColorPicker.hue_colon=Nyans:
+ColorPicker.saturation_colon=M\u00E4ttnad:
+ColorPicker.brightness_colon=Ljusstyrka:
+ColorPicker.red_colon=R\u00F6d:
+ColorPicker.green_colon=Gr\u00F6n:
+ColorPicker.blue_colon=Bl\u00E5:
+ColorPicker.web_colon=Webb:
+ColorPicker.OK = OK
+
+ColorPicker.colorName.transparent=Genomskinlig
+ColorPicker.colorName.black=Svart
+ColorPicker.colorName.blue=Bl\u00E5
+ColorPicker.colorName.cyan=Cyan
+ColorPicker.colorName.darkblue=M\u00F6rkbl\u00E5
+ColorPicker.colorName.darkcyan=M\u00F6rk cyan
+ColorPicker.colorName.darkgray=M\u00F6rkgr\u00E5
+ColorPicker.colorName.darkgreen=M\u00F6rkgr\u00F6n
+ColorPicker.colorName.darkmagenta=M\u00F6rk magenta
+ColorPicker.colorName.darkred=M\u00F6rkr\u00F6d
+ColorPicker.colorName.gray=Gr\u00E5
+ColorPicker.colorName.green=Gr\u00F6n
+ColorPicker.colorName.lightblue=Ljusbl\u00E5
+ColorPicker.colorName.lightcyan=Ljus cyan
+ColorPicker.colorName.lightgray=Ljusgr\u00E5
+ColorPicker.colorName.lightgreen=Ljusgr\u00F6n
+ColorPicker.colorName.lightyellow=Ljusgul
+ColorPicker.colorName.magenta=Magenta
+ColorPicker.colorName.mediumblue=Mellanbl\u00E5
+ColorPicker.colorName.orange=Orange
+ColorPicker.colorName.pink=Rosa
+ColorPicker.colorName.red=R\u00F6d
+ColorPicker.colorName.white=Vit
+ColorPicker.colorName.yellow=Gul
+
+# Accessibility strings
+#
+Accessibility.title.Pagination.PreviousButton=V\u00E4lj f\u00F6reg\u00E5ende sida
+Accessibility.title.Pagination.NextButton=V\u00E4lj n\u00E4sta sida
+Accessibility.title.TabPane.CloseButton=St\u00E4ng
+Accessibility.title.ToolBar.OverflowButton=Knappen Spill
+
+### Dialogs ###
+
+Dialog.apply.button = Anv\u00E4nd
+Dialog.ok.button = OK
+Dialog.close.button = St\u00E4ng
+Dialog.cancel.button = Avbryt
+Dialog.yes.button = Ja
+Dialog.no.button = Nej
+Dialog.finish.button = Slutf\u00F6r 
+Dialog.next.button = N\u00E4sta 
+Dialog.previous.button = F\u00F6reg\u00E5ende 
+
+Dialog.detail.button.more = Visa detaljer
+Dialog.detail.button.less = D\u00F6lj detaljer
+
+### Common Dialogs ###
+
+Dialog.error.title=Fel
+Dialog.error.header=Fel
+
+Dialog.info.title=Meddelande
+Dialog.info.header=Meddelande
+
+Dialog.warning.title=Varning
+Dialog.warning.header=Varning
+
+Dialog.confirm.title=Bekr\u00E4ftelse
+Dialog.confirm.header=Bekr\u00E4ftelse
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_es.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_es.properties	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_es.properties	(date 1547619866000)
@@ -0,0 +1,115 @@
+# ProgressIndicator, the string that's displayed at 100%
+ProgressIndicator.doneString=Listo
+
+# ListView
+ListView.noContent=
+
+# TableView
+TableView.noContent=Tabla sin contenido
+TableView.noColumns=Tabla sin columnas
+# Note there is a space after the comma:
+TableView.nestedColumnControlMenuSeparator=, 
+
+# TextField, PasswordField, TextArea
+# The keys must match the action strings in TextInputControlBehavior
+TextInputControl.menu.Undo=Deshacer
+TextInputControl.menu.Redo=Rehacer
+TextInputControl.menu.Cut=Cortar
+TextInputControl.menu.Copy=Copiar
+TextInputControl.menu.Paste=Pegar
+TextInputControl.menu.DeleteSelection=Suprimir
+TextInputControl.menu.SelectAll=Seleccionar Todo
+TextInputControl.menu.SelectWord=Seleccionar
+
+# DatePicker
+#
+# DatePicker context menu
+DatePicker.contextMenu.showToday=Mostrar hoy
+DatePicker.contextMenu.showWeekNumbers=Mostrar n\u00FAmeros de semana
+
+# ColorPicker
+ColorPicker.customColorLink=Personalizar color...
+ColorPicker.customColorLabel=Colores Personalizados
+ColorPicker.removeColor=Eliminar color
+ColorPicker.customColorDialogTitle=Colores Personalizados
+ColorPicker.currentColor=Color Actual
+ColorPicker.newColor=Nuevo Color
+# RGB (Red, Green, Blue)
+ColorPicker.colorType.rgb=RGB
+# HSB (Hue, Saturation, Brightness). Same thing as HSV, but not HSL, HLS, HSI.
+ColorPicker.colorType.hsb=HSB
+# Web color value (used in HTML & CSS)
+ColorPicker.colorType.web=Web
+ColorPicker.opacity_colon=Opacidad:
+ColorPicker.Save=Guardar
+ColorPicker.Use=Usar
+ColorPicker.Cancel=Cancelar
+ColorPicker.hue_colon=Matiz:
+ColorPicker.saturation_colon=Saturaci\u00F3n:
+ColorPicker.brightness_colon=Brillo:
+ColorPicker.red_colon=Rojo:
+ColorPicker.green_colon=Verde:
+ColorPicker.blue_colon=Azul:
+ColorPicker.web_colon=Web
+ColorPicker.OK = Aceptar
+
+ColorPicker.colorName.transparent=Transparente
+ColorPicker.colorName.black=Negro
+ColorPicker.colorName.blue=Azul
+ColorPicker.colorName.cyan=Cian
+ColorPicker.colorName.darkblue=Azul Oscuro
+ColorPicker.colorName.darkcyan=Cian Oscuro
+ColorPicker.colorName.darkgray=Gris Oscuro
+ColorPicker.colorName.darkgreen=Verde Oscuro
+ColorPicker.colorName.darkmagenta=Magenta Oscuro
+ColorPicker.colorName.darkred=Rojo Oscuro
+ColorPicker.colorName.gray=Gris
+ColorPicker.colorName.green=Verde
+ColorPicker.colorName.lightblue=Azul Claro
+ColorPicker.colorName.lightcyan=Cian Claro
+ColorPicker.colorName.lightgray=Gris claro
+ColorPicker.colorName.lightgreen=Verde Claro
+ColorPicker.colorName.lightyellow=Amarillo claro
+ColorPicker.colorName.magenta=Magenta
+ColorPicker.colorName.mediumblue=Azul Medio
+ColorPicker.colorName.orange=Naranja
+ColorPicker.colorName.pink=Rosa
+ColorPicker.colorName.red=Rojo
+ColorPicker.colorName.white=Blanco
+ColorPicker.colorName.yellow=Amarillo
+
+# Accessibility strings
+#
+Accessibility.title.Pagination.PreviousButton=Seleccionar p\u00E1gina anterior
+Accessibility.title.Pagination.NextButton=Seleccionar p\u00E1gina siguiente
+Accessibility.title.TabPane.CloseButton=Cerrar
+Accessibility.title.ToolBar.OverflowButton=Bot\u00F3n para desbordamiento
+
+### Dialogs ###
+
+Dialog.apply.button = Aplicar
+Dialog.ok.button = Aceptar
+Dialog.close.button = Cerrar
+Dialog.cancel.button = Cancelar
+Dialog.yes.button = S\u00ED
+Dialog.no.button = No
+Dialog.finish.button = Terminar 
+Dialog.next.button = Siguiente 
+Dialog.previous.button = Anterior 
+
+Dialog.detail.button.more = Mostrar detalles
+Dialog.detail.button.less = Ocultar detalles
+
+### Common Dialogs ###
+
+Dialog.error.title=Error
+Dialog.error.header=Error
+
+Dialog.info.title=Mensaje
+Dialog.info.header=Mensaje
+
+Dialog.warning.title=Advertencia
+Dialog.warning.header=Advertencia
+
+Dialog.confirm.title=Confirmaci\u00F3n
+Dialog.confirm.header=Confirmaci\u00F3n
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_zh_TW.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_zh_TW.properties	(date 1547619866000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/javafx/scene/control/skin/resources/controls_zh_TW.properties	(date 1547619866000)
@@ -0,0 +1,115 @@
+# ProgressIndicator, the string that's displayed at 100%
+ProgressIndicator.doneString=\u5B8C\u6210
+
+# ListView
+ListView.noContent=
+
+# TableView
+TableView.noContent=\u8868\u683C\u4E2D\u6C92\u6709\u5167\u5BB9
+TableView.noColumns=\u8868\u683C\u4E2D\u6C92\u6709\u8CC7\u6599\u6B04
+# Note there is a space after the comma:
+TableView.nestedColumnControlMenuSeparator=, 
+
+# TextField, PasswordField, TextArea
+# The keys must match the action strings in TextInputControlBehavior
+TextInputControl.menu.Undo=\u9084\u539F
+TextInputControl.menu.Redo=\u91CD\u505A
+TextInputControl.menu.Cut=\u526A\u4E0B
+TextInputControl.menu.Copy=\u8907\u88FD
+TextInputControl.menu.Paste=\u8CBC\u4E0A
+TextInputControl.menu.DeleteSelection=\u522A\u9664
+TextInputControl.menu.SelectAll=\u5168\u9078
+TextInputControl.menu.SelectWord=\u9078\u53D6
+
+# DatePicker
+#
+# DatePicker context menu
+DatePicker.contextMenu.showToday=\u986F\u793A\u4ECA\u5929
+DatePicker.contextMenu.showWeekNumbers=\u986F\u793A\u9031\u6B21
+
+# ColorPicker
+ColorPicker.customColorLink=\u81EA\u8A02\u984F\u8272...
+ColorPicker.customColorLabel=\u81EA\u8A02\u984F\u8272
+ColorPicker.removeColor=\u79FB\u9664\u984F\u8272
+ColorPicker.customColorDialogTitle=\u81EA\u8A02\u984F\u8272
+ColorPicker.currentColor=\u76EE\u524D\u7684\u984F\u8272
+ColorPicker.newColor=\u65B0\u984F\u8272
+# RGB (Red, Green, Blue)
+ColorPicker.colorType.rgb=RGB
+# HSB (Hue, Saturation, Brightness). Same thing as HSV, but not HSL, HLS, HSI.
+ColorPicker.colorType.hsb=HSB
+# Web color value (used in HTML & CSS)
+ColorPicker.colorType.web=Web
+ColorPicker.opacity_colon=\u4E0D\u900F\u660E\u5EA6:
+ColorPicker.Save=\u5132\u5B58
+ColorPicker.Use=\u4F7F\u7528
+ColorPicker.Cancel=\u53D6\u6D88
+ColorPicker.hue_colon=\u8272\u8ABF:
+ColorPicker.saturation_colon=\u5F69\u5EA6:
+ColorPicker.brightness_colon=\u4EAE\u5EA6:
+ColorPicker.red_colon=\u7D05\u8272:
+ColorPicker.green_colon=\u7DA0\u8272:
+ColorPicker.blue_colon=\u85CD\u8272:
+ColorPicker.web_colon=Web:
+ColorPicker.OK = \u78BA\u5B9A
+
+ColorPicker.colorName.transparent=\u900F\u660E
+ColorPicker.colorName.black=\u9ED1
+ColorPicker.colorName.blue=\u85CD
+ColorPicker.colorName.cyan=\u85CD\u7DA0
+ColorPicker.colorName.darkblue=\u6DF1\u85CD
+ColorPicker.colorName.darkcyan=\u6DF1\u85CD\u7DA0
+ColorPicker.colorName.darkgray=\u6DF1\u7070
+ColorPicker.colorName.darkgreen=\u6DF1\u7DA0
+ColorPicker.colorName.darkmagenta=\u6DF1\u7D2B\u7D05
+ColorPicker.colorName.darkred=\u6DF1\u7D05
+ColorPicker.colorName.gray=\u7070
+ColorPicker.colorName.green=\u7DA0
+ColorPicker.colorName.lightblue=\u6DFA\u85CD
+ColorPicker.colorName.lightcyan=\u6DFA\u85CD\u7DA0
+ColorPicker.colorName.lightgray=\u6DFA\u7070
+ColorPicker.colorName.lightgreen=\u6DFA\u7DA0
+ColorPicker.colorName.lightyellow=\u6DFA\u9EC3
+ColorPicker.colorName.magenta=\u7D2B\u7D05
+ColorPicker.colorName.mediumblue=\u6697\u85CD
+ColorPicker.colorName.orange=\u6A58
+ColorPicker.colorName.pink=\u7C89\u7D05
+ColorPicker.colorName.red=\u7D05
+ColorPicker.colorName.white=\u767D
+ColorPicker.colorName.yellow=\u9EC3
+
+# Accessibility strings
+#
+Accessibility.title.Pagination.PreviousButton=\u4E0A\u4E00\u9801
+Accessibility.title.Pagination.NextButton=\u4E0B\u4E00\u9801
+Accessibility.title.TabPane.CloseButton=\u95DC\u9589
+Accessibility.title.ToolBar.OverflowButton=\u61F8\u6D6E\u6309\u9215
+
+### Dialogs ###
+
+Dialog.apply.button = \u5957\u7528
+Dialog.ok.button = \u78BA\u5B9A
+Dialog.close.button = \u95DC\u9589
+Dialog.cancel.button = \u53D6\u6D88
+Dialog.yes.button = \u662F
+Dialog.no.button = \u5426
+Dialog.finish.button = \u5B8C\u6210 
+Dialog.next.button = \u4E0B\u4E00\u6B65 
+Dialog.previous.button = \u4E0A\u4E00\u6B65 
+
+Dialog.detail.button.more = \u986F\u793A\u8A73\u7D30\u8CC7\u8A0A
+Dialog.detail.button.less = \u96B1\u85CF\u8A73\u7D30\u8CC7\u8A0A
+
+### Common Dialogs ###
+
+Dialog.error.title=\u932F\u8AA4
+Dialog.error.header=\u932F\u8AA4
+
+Dialog.info.title=\u8A0A\u606F
+Dialog.info.header=\u8A0A\u606F
+
+Dialog.warning.title=\u8B66\u544A
+Dialog.warning.header=\u8B66\u544A
+
+Dialog.confirm.title=\u78BA\u8A8D
+Dialog.confirm.header=\u78BA\u8A8D
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_Color_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_Color_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_Color_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,18 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+void main() {
+gl_FragColor = perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,104 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureSecondPassLCD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureSecondPassLCD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureSecondPassLCD.frag	(date 1547619874000)
@@ -0,0 +1,46 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D dstColor;
+uniform sampler2D glyphColor;
+uniform vec3 gamma;
+lowp vec4 paint(vec2 texCoord, vec2 texCoord2, vec4 jslVertexColor) {
+float unitXCoord = gamma.z;
+vec2 dTexCoord = texCoord;
+vec4 glyphClr;
+dTexCoord.x = texCoord.x - unitXCoord;
+glyphClr.r = texture2D(glyphColor, dTexCoord).a;
+glyphClr.g = texture2D(glyphColor, texCoord).a;
+dTexCoord.x = texCoord.x + unitXCoord;
+glyphClr.b = texture2D(glyphColor, dTexCoord).a;
+const float third = 1.0 / 3.0;
+glyphClr.a = dot(glyphClr.rgb, vec3(third, third, third));
+if (glyphClr.a == 0.0){
+discard;}
+vec4 dstClr = texture2D(dstColor, texCoord2);
+dstClr = pow(dstClr, vec4(gamma.y, gamma.y, gamma.y, gamma.y));
+vec4 c = jslVertexColor;
+vec4 glyphMix;
+glyphMix.a = glyphClr.a;
+glyphMix.rgb = mix(vec3(glyphClr.a, glyphClr.a, glyphClr.a), glyphClr.rgb, dstClr.a);
+c = dstClr * (1.0 - glyphClr * c.a) + c * glyphMix;
+c = pow(c, vec4(gamma.x, gamma.x, gamma.x, gamma.x));
+return c;
+}
+void main() {
+gl_FragColor = paint(texCoord0, texCoord1, perVertexColor);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,106 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_RadialGradient.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_RadialGradient.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_RadialGradient.frag	(date 1547619874000)
@@ -0,0 +1,30 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D colors;
+uniform vec4 content;
+uniform vec3 precalc;
+lowp vec4 paint(vec2 texCoord) {
+float xfx = texCoord.x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + texCoord.y * texCoord.y * precalc.y)) * precalc.z;
+vec2 fractvals = vec2(fract(dist), clamp(dist, 0.0, 1.0));
+vec2 clrCoord = vec2(content.x + dot(fractvals, content.zw), content.y);
+return texture2D(colors, clrCoord);
+}
+void main() {
+gl_FragColor = paint(texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,95 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,104 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_Color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_Color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_Color.frag	(date 1547619874000)
@@ -0,0 +1,34 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_Color_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_Color_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_Color_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,34 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/META-INF/MANIFEST.MF
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/META-INF/MANIFEST.MF	(date 1606469084000)
+++ build/libs/network1-1.0-SNAPSHOT-all/META-INF/MANIFEST.MF	(date 1606469084000)
@@ -0,0 +1,3 @@
+Manifest-Version: 1.0
+Main-Class: org.example.MainKt
+
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_LinearGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,102 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abs(tco), 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/form.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/form.css	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/form.css	(date 1580448308000)
@@ -0,0 +1,41 @@
+.form {
+    -fx-padding: 10;
+}
+
+.form .fieldset .label-container {
+    -fx-alignment: center-left;
+}
+
+.form .fieldset:horizontal .label-container {
+    -fx-padding: 0 15 0 0;
+}
+
+.form .fieldset:vertical .label-container {
+    -fx-padding: 0 0 3 0;
+}
+
+.form .fieldset .input-container:horizontal {
+    -fx-alignment: baseline-left;
+}
+
+.form .fieldset {
+    -fx-padding: 0 0 15 0;
+}
+
+.form .input-container {
+    -fx-spacing: 10;
+}
+
+.form .field {
+    -fx-padding: 5 0;
+}
+
+.form .fieldset .legend {
+    -fx-font-weight: bold;
+    -fx-font-size: 1.2em;
+    -fx-padding: 0 0 5 0;
+}
+
+.form .fieldset .legend {
+    -fx-graphic-text-gap: 10;
+}
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,116 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,111 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,121 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/diffuse_texture.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/diffuse_texture.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/diffuse_texture.frag	(date 1547619874000)
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) 2013, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+// main fragment shader
+
+#ifdef GL_ES
+
+#extension GL_OES_standard_derivatives : enable
+
+// Define default float precision for fragment shaders
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+
+#else
+
+// Ignore GL_ES precision specifiers:
+#define lowp
+#define mediump
+#define highp
+
+#endif
+
+uniform vec4 diffuseColor;
+uniform sampler2D diffuseTexture;
+
+varying vec2 oTexCoords;
+
+vec4 apply_diffuse() {
+    vec4 dTexColor = texture2D(diffuseTexture, oTexCoords);
+    return dTexColor * diffuseColor; 
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_LinearGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,102 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abs(tco), 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,109 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,110 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_ImagePattern.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_ImagePattern.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_ImagePattern.frag	(date 1547619874000)
@@ -0,0 +1,40 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,100 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,100 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,110 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,101 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,106 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,109 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_ImagePattern_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_ImagePattern_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_ImagePattern_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,32 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+uniform vec2 innerOffset;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a - texture2D(maskInput, texCoord - innerOffset).a;
+}
+uniform sampler2D inputTex;
+uniform vec4 content;
+lowp vec4 paint(vec2 texCoord) {
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,111 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureFirstPassLCD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureFirstPassLCD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureFirstPassLCD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,24 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform sampler2D inputTex;
+lowp vec4 paint(vec2 texCoord) {
+vec4 result = texture2D(inputTex, texCoord);
+return result;
+}
+void main() {
+gl_FragColor = paint(texCoord0) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,102 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,116 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,107 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_ImagePattern.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_ImagePattern.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_ImagePattern.frag	(date 1547619874000)
@@ -0,0 +1,42 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_ImagePattern_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_ImagePattern_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_ImagePattern_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,44 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,109 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,116 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,100 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_LinearGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_LinearGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_LinearGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,102 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abs(tco), 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,116 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_Color_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_Color_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_Color_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,23 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+void main() {
+gl_FragColor = mask(texCoord0) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/tornadofx/workspace.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/tornadofx/workspace.css	(date 1580448308000)
+++ build/libs/network1-1.0-SNAPSHOT-all/tornadofx/workspace.css	(date 1580448308000)
@@ -0,0 +1,68 @@
+.workspace .header {
+    -fx-spacing: 0.4em;
+}
+
+.workspace .header .heading-container {
+    -fx-font-weight: bold;
+    -fx-font-size: 1.2em;
+    -fx-alignment: center-left;
+    -fx-padding: 0 0 0 0.2em;
+    -fx-spacing: 1em;
+}
+
+.workspace .header .heading-container .text {
+    -fx-fill: #5f5f5f;
+}
+
+.workspace .header .container {
+    -fx-padding: 0 0.2em 0 0.2em;
+    -fx-alignment: center-left;
+}
+
+.workspace .header .button.icon-only {
+    -fx-background-color: transparent;
+    -fx-background-insets: 0;
+    -fx-background-radius: 3px;
+    -fx-padding: 0.333333em;
+}
+
+.workspace .header .button.icon-only:hover {
+    -fx-background-color: #e3e3e3;
+}
+
+.workspace .header .button.icon-only:armed {
+    -fx-background-color: #e3e3e3;
+    -fx-background-radius: 1em;
+}
+
+.workspace .header .icon {
+    -fx-min-width: 16px;
+    -fx-min-height: 16px;
+    -fx-max-width: 16px;
+    -fx-max-height: 16px;
+    -fx-background-color: #818181;
+}
+
+.workspace .header .icon.back {
+    -fx-shape: "M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z"
+}
+
+.workspace .header .icon.forward {
+    -fx-shape: "M4,11V13H16L10.5,18.5L11.92,19.92L19.84,12L11.92,4.08L10.5,5.5L16,11H4Z"
+}
+
+.workspace .header .icon.refresh {
+    -fx-shape: "M17.65,6.35C16.2,4.9 14.21,4 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20C15.73,20 18.84,17.45 19.73,14H17.65C16.83,16.33 14.61,18 12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6C13.66,6 15.14,6.69 16.22,7.78L13,11H20V4L17.65,6.35Z"
+}
+
+.workspace .header .icon.save {
+    -fx-shape: "M15,9H5V5H15M12,19A3,3 0 0,1 9,16A3,3 0 0,1 12,13A3,3 0 0,1 15,16A3,3 0 0,1 12,19M17,3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V7L17,3Z"
+}
+
+.workspace .header .icon.create {
+    -fx-shape: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"
+}
+
+.workspace .header .icon.delete {
+    -fx-shape: "M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z"
+}
\ No newline at end of file
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/specular_texture.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/specular_texture.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/specular_texture.frag	(date 1547619874000)
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+// specular texture fragment shader
+
+#ifdef GL_ES
+
+#extension GL_OES_standard_derivatives : enable
+
+// Define default float precision for fragment shaders
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+
+#else
+
+// Ignore GL_ES precision specifiers:
+#define lowp
+#define mediump
+#define highp
+
+#endif
+
+uniform vec4 specularColor;
+uniform sampler2D specularMap;
+
+vec4 apply_specular()
+{
+    vec3 tSpec = texture2D(specularMap, oTexCoords).rgb;
+    float sPower = specularColor.a;
+    sPower *= dot(tSpec, vec3(0.299, 0.587, 0.114)); // Rec. 601 luma conversion
+    return vec4(tSpec, sPower);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,110 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_ImagePattern_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_ImagePattern_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_ImagePattern_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,40 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_ImagePattern_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_ImagePattern_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_ImagePattern_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,31 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+uniform sampler2D inputTex;
+uniform vec4 content;
+lowp vec4 paint(vec2 texCoord) {
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,115 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_ImagePattern.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_ImagePattern.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_ImagePattern.frag	(date 1547619874000)
@@ -0,0 +1,51 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,115 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/specular_none.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/specular_none.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/specular_none.frag	(date 1547619874000)
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+// no specular fragment shader
+
+#ifdef GL_ES
+
+#extension GL_OES_standard_derivatives : enable
+
+// Define default float precision for fragment shaders
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+
+#else
+
+// Ignore GL_ES precision specifiers:
+#define lowp
+#define mediump
+#define highp
+
+#endif
+
+uniform sampler2D specularMap;
+
+vec4 apply_specular()
+{
+    return vec4(0.0,0.0,0.0,0.0);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureRGB_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureRGB_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureRGB_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,23 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform sampler2D inputTex;
+lowp vec4 paint(vec2 texCoord) {
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = paint(texCoord0) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_Color_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_Color_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_Color_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,25 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,115 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_RadialGradient.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_RadialGradient.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_RadialGradient.frag	(date 1547619874000)
@@ -0,0 +1,34 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+uniform sampler2D colors;
+uniform vec4 content;
+uniform vec3 precalc;
+lowp vec4 paint(vec2 texCoord) {
+float xfx = texCoord.x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + texCoord.y * texCoord.y * precalc.y)) * precalc.z;
+vec2 fractvals = vec2(fract(dist), clamp(dist, 0.0, 1.0));
+vec2 clrCoord = vec2(content.x + dot(fractvals, content.zw), content.y);
+return texture2D(colors, clrCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,104 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Mask_TextureSuper.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Mask_TextureSuper.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Mask_TextureSuper.frag	(date 1547619874000)
@@ -0,0 +1,25 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D inputTex0;
+uniform sampler2D inputTex1;
+lowp vec4 paint(vec2 texCoord0, vec2 texCoord1) {
+return (texture2D(inputTex0, texCoord0) * texCoord1.x) + (texture2D(inputTex1, texCoord0).a * texCoord1.y);
+}
+void main() {
+gl_FragColor = paint(texCoord0, texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,104 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,104 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,116 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,101 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_LinearGradient.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_LinearGradient.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_LinearGradient.frag	(date 1547619874000)
@@ -0,0 +1,27 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D colors;
+uniform vec4 content;
+lowp vec4 paint(vec2 texCoord) {
+vec2 fractvals = vec2(fract(texCoord.x), clamp(texCoord.x, 0.0, 1.0));
+vec2 clrCoord = vec2(content.x + dot(fractvals, content.zw), content.y);
+return texture2D(colors, clrCoord);
+}
+void main() {
+gl_FragColor = paint(texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,116 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,104 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,109 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,102 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_Color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_Color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_Color.frag	(date 1547619874000)
@@ -0,0 +1,28 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_Color_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_Color_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_Color_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,33 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,100 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,116 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_8.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_8.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_8.frag	(date 1547619874000)
@@ -0,0 +1,45 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 weights[2];
+void main() {
+int i;
+vec4 tmp = vec4(0.0, 0.0, 0.0, 0.0);
+vec2 loc = texCoord0 + offset.zw;
+{
+tmp += weights[0].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[1].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].w * texture2D(img, loc);
+loc += offset.xy;
+}
+gl_FragColor = tmp;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_Color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_Color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_Color.frag	(date 1547619874000)
@@ -0,0 +1,25 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+lowp float mask(vec2 tco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abs(tco), 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_4.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_4.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_4.frag	(date 1547619874000)
@@ -0,0 +1,35 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 weights[1];
+void main() {
+int i;
+vec4 tmp = vec4(0.0, 0.0, 0.0, 0.0);
+vec2 loc = texCoord0 + offset.zw;
+{
+tmp += weights[0].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].w * texture2D(img, loc);
+loc += offset.xy;
+}
+gl_FragColor = tmp;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_20.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_20.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_20.frag	(date 1547619874000)
@@ -0,0 +1,77 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 shadowColor;
+uniform vec4 weights[5];
+void main() {
+int i;
+float sum = 0.0;
+vec2 loc = texCoord0 + offset.zw;
+{
+sum += weights[0].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[1].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[2].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[3].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[4].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+sum = clamp(sum, 0.0, 1.0);
+gl_FragColor = sum * shadowColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_ImagePattern_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_ImagePattern_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_ImagePattern_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,42 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_28.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_28.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_28.frag	(date 1547619874000)
@@ -0,0 +1,95 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 weights[7];
+void main() {
+int i;
+vec4 tmp = vec4(0.0, 0.0, 0.0, 0.0);
+vec2 loc = texCoord0 + offset.zw;
+{
+tmp += weights[0].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[1].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[2].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[3].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[4].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[5].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[6].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[6].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[6].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[6].w * texture2D(img, loc);
+loc += offset.xy;
+}
+gl_FragColor = tmp;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_ImagePattern_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_ImagePattern_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_ImagePattern_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,44 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/main3Lights.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/main3Lights.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/main3Lights.frag	(date 1547619874000)
@@ -0,0 +1,98 @@
+/*
+ * Copyright (c) 2013, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+// main fragment shader
+
+#ifdef GL_ES
+
+#extension GL_OES_standard_derivatives : enable
+
+// Define default float precision for fragment shaders
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+
+#else
+
+// Ignore GL_ES precision specifiers:
+#define lowp
+#define mediump
+#define highp
+
+#endif
+
+vec4 apply_diffuse();
+vec4 apply_specular();
+vec3 apply_normal();
+vec4 apply_selfIllum();
+
+struct Light {
+    vec4 pos;
+    vec3 color;
+};
+
+uniform vec3 ambientColor;
+uniform Light lights[3];
+
+varying vec3 eyePos;
+varying vec4 lightTangentSpacePositions[3];
+
+void main()
+{
+    gl_FragColor = vec4(0.0,0.0,0.0,1.0);
+    vec4 diffuse = apply_diffuse();
+
+    if (diffuse.a == 0.0) discard;
+
+    vec3 n = apply_normal();
+
+    vec3 d = vec3(0.0);
+    vec3 s = vec3(0.0);
+
+    vec3 refl = reflect(normalize(eyePos), n);
+    vec4 specular = apply_specular();
+    float power = specular.a;
+
+    vec3 l = normalize(lightTangentSpacePositions[0].xyz);
+    d = clamp(dot(n,l), 0.0, 1.0)*(lights[0].color).rgb;
+    s = pow(clamp(dot(-refl, l), 0.0, 1.0), power) * lights[0].color.rgb;
+
+    l = normalize(lightTangentSpacePositions[1].xyz);
+    d += clamp(dot(n,l), 0.0, 1.0)*(lights[1].color).rgb;
+    s += pow(clamp(dot(-refl, l), 0.0, 1.0), power) * lights[1].color.rgb;
+
+    l = normalize(lightTangentSpacePositions[2].xyz);
+    d += clamp(dot(n,l), 0.0, 1.0)*(lights[2].color).rgb;
+    s += pow(clamp(dot(-refl, l), 0.0, 1.0), power) * lights[2].color.rgb;
+
+    vec3 rez = (ambientColor+d) * diffuse.xyz + s*specular.rgb;
+    rez += apply_selfIllum().xyz;
+
+    gl_FragColor = vec4(clamp(rez, 0.0, 1.0) , diffuse.a);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_128.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_128.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_128.frag	(date 1547619874000)
@@ -0,0 +1,347 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 shadowColor;
+uniform vec4 weights[32];
+void main() {
+int i;
+float sum = 0.0;
+vec2 loc = texCoord0 + offset.zw;
+{
+sum += weights[0].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[1].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[2].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[3].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[4].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[5].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[6].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[6].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[6].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[6].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[7].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[7].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[7].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[7].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[8].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[8].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[8].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[8].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[9].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[9].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[9].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[9].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[10].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[10].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[10].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[10].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[11].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[11].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[11].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[11].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[12].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[12].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[12].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[12].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[13].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[13].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[13].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[13].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[14].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[14].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[14].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[14].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[15].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[15].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[15].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[15].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[16].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[16].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[16].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[16].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[17].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[17].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[17].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[17].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[18].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[18].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[18].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[18].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[19].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[19].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[19].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[19].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[20].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[20].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[20].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[20].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[21].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[21].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[21].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[21].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[22].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[22].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[22].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[22].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[23].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[23].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[23].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[23].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[24].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[24].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[24].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[24].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[25].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[25].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[25].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[25].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[26].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[26].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[26].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[26].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[27].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[27].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[27].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[27].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[28].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[28].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[28].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[28].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[29].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[29].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[29].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[29].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[30].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[30].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[30].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[30].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[31].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[31].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[31].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[31].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+sum = clamp(sum, 0.0, 1.0);
+gl_FragColor = sum * shadowColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_ImagePattern_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_ImagePattern_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_ImagePattern_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,27 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D inputTex;
+uniform vec4 content;
+lowp vec4 paint(vec2 texCoord) {
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = paint(texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_DIFFERENCE.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_DIFFERENCE.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_DIFFERENCE.frag	(date 1547619874000)
@@ -0,0 +1,30 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_difference(vec4 bot, vec4 top) {
+vec4 res;
+res.a = bot.a + top.a - (bot.a * top.a);
+res.rgb = bot.rgb + top.rgb - 2.0 * min(top.a * bot.rgb, bot.a * top.rgb);
+return res;
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_difference(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,110 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_64.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_64.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_64.frag	(date 1547619874000)
@@ -0,0 +1,185 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 weights[16];
+void main() {
+int i;
+vec4 tmp = vec4(0.0, 0.0, 0.0, 0.0);
+vec2 loc = texCoord0 + offset.zw;
+{
+tmp += weights[0].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[1].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[2].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[3].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[4].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[5].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[6].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[6].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[6].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[6].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[7].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[7].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[7].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[7].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[8].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[8].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[8].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[8].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[9].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[9].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[9].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[9].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[10].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[10].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[10].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[10].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[11].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[11].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[11].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[11].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[12].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[12].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[12].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[12].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[13].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[13].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[13].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[13].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[14].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[14].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[14].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[14].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[15].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[15].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[15].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[15].w * texture2D(img, loc);
+loc += offset.xy;
+}
+gl_FragColor = tmp;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_Color_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_Color_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_Color_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,23 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+void main() {
+gl_FragColor = mask(texCoord0) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_GREEN.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_GREEN.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_GREEN.frag	(date 1547619874000)
@@ -0,0 +1,31 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_green(vec4 bot, vec4 top) {
+vec4 res;
+res.a = bot.a + top.a - (bot.a * top.a);
+res.rb = bot.rb;
+res.g = (1.0 - top.a) * bot.g + top.g;
+return res;
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_green(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/specular_color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/specular_color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/specular_color.frag	(date 1547619874000)
@@ -0,0 +1,56 @@
+/*
+ * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+// specular color fragment shader
+
+#ifdef GL_ES
+
+#extension GL_OES_standard_derivatives : enable
+
+// Define default float precision for fragment shaders
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+
+#else
+
+// Ignore GL_ES precision specifiers:
+#define lowp
+#define mediump
+#define highp
+
+#endif
+
+uniform vec4 specularColor;
+uniform sampler2D specularMap;
+
+vec4 apply_specular()
+{
+    return specularColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,102 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_32.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_32.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_32.frag	(date 1547619874000)
@@ -0,0 +1,105 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 weights[8];
+void main() {
+int i;
+vec4 tmp = vec4(0.0, 0.0, 0.0, 0.0);
+vec2 loc = texCoord0 + offset.zw;
+{
+tmp += weights[0].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[1].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[2].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[3].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[4].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[5].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[6].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[6].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[6].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[6].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[7].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[7].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[7].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[7].w * texture2D(img, loc);
+loc += offset.xy;
+}
+gl_FragColor = tmp;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,116 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_MULTIPLY.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_MULTIPLY.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_MULTIPLY.frag	(date 1547619874000)
@@ -0,0 +1,27 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_multiply(vec4 bot, vec4 top) {
+return bot * (top + 1.0 - top.a) + top * (1.0 - bot.a);
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_multiply(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,110 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_16.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_16.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_16.frag	(date 1547619874000)
@@ -0,0 +1,67 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 shadowColor;
+uniform vec4 weights[4];
+void main() {
+int i;
+float sum = 0.0;
+vec2 loc = texCoord0 + offset.zw;
+{
+sum += weights[0].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[1].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[2].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[3].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+sum = clamp(sum, 0.0, 1.0);
+gl_FragColor = sum * shadowColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,110 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_12.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_12.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_12.frag	(date 1547619874000)
@@ -0,0 +1,55 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 weights[3];
+void main() {
+int i;
+vec4 tmp = vec4(0.0, 0.0, 0.0, 0.0);
+vec2 loc = texCoord0 + offset.zw;
+{
+tmp += weights[0].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[1].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[2].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].w * texture2D(img, loc);
+loc += offset.xy;
+}
+gl_FragColor = tmp;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SOFT_LIGHT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SOFT_LIGHT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SOFT_LIGHT.frag	(date 1547619874000)
@@ -0,0 +1,83 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+float dofx(float f, float sqrtf) {
+float d;
+if (f <= 0.25){
+d = ((16.0 * f - 12.0) * f + 4.0) * f;
+}
+ else {
+d = sqrtf;
+}
+return d;
+}
+vec4 blend_soft_light(vec4 bot, vec4 top) {
+vec4 res;
+res.a = bot.a + top.a - (bot.a * top.a);
+vec3 bot_np = bot.rgb / bot.a;
+vec3 top_np = top.rgb / top.a;
+float sqrtf = sqrt(bot_np.r);
+float dr = dofx(bot_np.r, sqrtf);
+sqrtf = sqrt(bot_np.g);
+float dg = dofx(bot_np.g, sqrtf);
+sqrtf = sqrt(bot_np.b);
+float db = dofx(bot_np.b, sqrtf);
+if (bot.a == 0.0){
+res.r = top.r;
+}
+ else if (top.a == 0.0){
+res.r = bot.r;
+}
+ else if (top_np.r <= 0.5){
+res.r = bot.r + (1.0 - bot.a) * top.r - top.a * bot.r * (1.0 - 2.0 * top_np.r) * (1.0 - bot_np.r);
+}
+ else {
+res.r = bot.r + (1.0 - bot.a) * top.r + (2.0 * top.r - top.a) * (bot.a * dr - bot.r);
+}
+if (bot.a == 0.0){
+res.g = top.g;
+}
+ else if (top.a == 0.0){
+res.g = bot.g;
+}
+ else if (top_np.g <= 0.5){
+res.g = bot.g + (1.0 - bot.a) * top.g - top.a * bot.g * (1.0 - 2.0 * top_np.g) * (1.0 - bot_np.g);
+}
+ else {
+res.g = bot.g + (1.0 - bot.a) * top.g + (2.0 * top.g - top.a) * (bot.a * dg - bot.g);
+}
+if (bot.a == 0.0){
+res.b = top.b;
+}
+ else if (top.a == 0.0){
+res.b = bot.b;
+}
+ else if (top_np.b <= 0.5){
+res.b = bot.b + (1.0 - bot.a) * top.b - top.a * bot.b * (1.0 - 2.0 * top_np.b) * (1.0 - bot_np.b);
+}
+ else {
+res.b = bot.b + (1.0 - bot.a) * top.b + (2.0 * top.b - top.a) * (bot.a * db - bot.b);
+}
+return res;
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_soft_light(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_ImagePattern.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_ImagePattern.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_ImagePattern.frag	(date 1547619874000)
@@ -0,0 +1,50 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_24.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_24.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_24.frag	(date 1547619874000)
@@ -0,0 +1,85 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 weights[6];
+void main() {
+int i;
+vec4 tmp = vec4(0.0, 0.0, 0.0, 0.0);
+vec2 loc = texCoord0 + offset.zw;
+{
+tmp += weights[0].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[1].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[2].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[3].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[4].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[5].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].w * texture2D(img, loc);
+loc += offset.xy;
+}
+gl_FragColor = tmp;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_ImagePattern_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_ImagePattern_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_ImagePattern_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,41 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_OVERLAY.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_OVERLAY.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_OVERLAY.frag	(date 1547619874000)
@@ -0,0 +1,34 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_overlay(vec4 bot, vec4 top) {
+vec4 res;
+res.a = bot.a + top.a - bot.a * top.a;
+vec3 mask = ceil(bot.rgb - bot.a * 0.5);
+vec3 adjbot = abs(bot.rgb - mask * bot.a);
+vec3 adjtop = abs(top.rgb - mask * top.a);
+res.rgb = (2.0 * adjbot + 1.0 - bot.a) * adjtop + (1.0 - top.a) * adjbot;
+res.rgb = abs(res.rgb - mask * res.a);
+return res;
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_overlay(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,104 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_LinearGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_LinearGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_LinearGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,102 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abs(tco), 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_8.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_8.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_8.frag	(date 1547619874000)
@@ -0,0 +1,47 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 shadowColor;
+uniform vec4 weights[2];
+void main() {
+int i;
+float sum = 0.0;
+vec2 loc = texCoord0 + offset.zw;
+{
+sum += weights[0].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[1].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+sum = clamp(sum, 0.0, 1.0);
+gl_FragColor = sum * shadowColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/SepiaTone.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/SepiaTone.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/SepiaTone.frag	(date 1547619874000)
@@ -0,0 +1,27 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D baseImg;
+uniform float level;
+void main() {
+vec3 weightBW = vec3(0.3, 0.59, 0.11);
+vec3 weightSep = vec3(1.6, 1.2, 0.9);
+vec4 srcClr = texture2D(baseImg, texCoord0);
+float l = dot(srcClr.rgb, weightBW);
+vec3 lum = vec3(l, l, l);
+vec3 sep = lum * weightSep;
+gl_FragColor.rgb = mix(sep, srcClr.rgb, 1.0 - level);
+gl_FragColor.a = srcClr.a;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Mask_TextureRGB_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Mask_TextureRGB_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Mask_TextureRGB_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,25 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D imageTex;
+uniform sampler2D maskTex;
+lowp vec4 paint(vec2 imgCoord, vec2 maskCoord) {
+return texture2D(imageTex, imgCoord) * texture2D(maskTex, maskCoord).a;
+}
+void main() {
+gl_FragColor = paint(texCoord0, texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_ImagePattern.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_ImagePattern.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_ImagePattern.frag	(date 1547619874000)
@@ -0,0 +1,27 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D inputTex;
+uniform vec4 content;
+lowp vec4 paint(vec2 texCoord) {
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = paint(texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SRC_IN.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SRC_IN.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SRC_IN.frag	(date 1547619874000)
@@ -0,0 +1,27 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_src_in(vec4 bot, vec4 top) {
+return top * bot.a;
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_src_in(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,107 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_96.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_96.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_96.frag	(date 1547619874000)
@@ -0,0 +1,265 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 weights[24];
+void main() {
+int i;
+vec4 tmp = vec4(0.0, 0.0, 0.0, 0.0);
+vec2 loc = texCoord0 + offset.zw;
+{
+tmp += weights[0].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[1].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[2].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[3].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[4].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[5].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[6].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[6].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[6].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[6].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[7].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[7].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[7].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[7].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[8].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[8].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[8].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[8].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[9].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[9].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[9].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[9].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[10].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[10].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[10].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[10].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[11].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[11].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[11].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[11].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[12].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[12].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[12].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[12].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[13].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[13].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[13].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[13].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[14].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[14].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[14].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[14].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[15].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[15].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[15].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[15].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[16].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[16].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[16].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[16].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[17].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[17].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[17].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[17].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[18].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[18].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[18].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[18].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[19].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[19].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[19].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[19].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[20].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[20].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[20].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[20].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[21].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[21].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[21].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[21].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[22].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[22].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[22].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[22].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[23].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[23].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[23].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[23].w * texture2D(img, loc);
+loc += offset.xy;
+}
+gl_FragColor = tmp;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_RED.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_RED.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_RED.frag	(date 1547619874000)
@@ -0,0 +1,31 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_red(vec4 bot, vec4 top) {
+vec4 res;
+res.a = bot.a + top.a - (bot.a * top.a);
+res.gb = bot.gb;
+res.r = (1.0 - top.a) * bot.r + top.r;
+return res;
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_red(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_ImagePattern_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_ImagePattern_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_ImagePattern_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,45 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,100 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_LIGHTEN.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_LIGHTEN.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_LIGHTEN.frag	(date 1547619874000)
@@ -0,0 +1,30 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_lighten(vec4 bot, vec4 top) {
+vec4 res;
+res.a = bot.a + top.a - (bot.a * top.a);
+res.rgb = bot.rgb + top.rgb - min(top.a * bot.rgb, bot.a * top.rgb);
+return res;
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_lighten(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/InvertMask.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/InvertMask.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/InvertMask.frag	(date 1547619874000)
@@ -0,0 +1,22 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D baseImg;
+uniform vec2 offset;
+void main() {
+float val = texture2D(baseImg, texCoord0 - offset).a;
+float inv = 1.0 - val;
+gl_FragColor = vec4(inv, inv, inv, inv);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_Color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_Color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_Color.frag	(date 1547619874000)
@@ -0,0 +1,33 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SRC_OVER.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SRC_OVER.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SRC_OVER.frag	(date 1547619874000)
@@ -0,0 +1,27 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_src_over(vec4 bot, vec4 top) {
+return top + (bot * (1.0 - top.a));
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_src_over(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureRGB.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureRGB.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureRGB.frag	(date 1547619874000)
@@ -0,0 +1,23 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform sampler2D inputTex;
+lowp vec4 paint(vec2 texCoord) {
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = paint(texCoord0) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_RadialGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,116 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_128.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_128.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_128.frag	(date 1547619874000)
@@ -0,0 +1,345 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 weights[32];
+void main() {
+int i;
+vec4 tmp = vec4(0.0, 0.0, 0.0, 0.0);
+vec2 loc = texCoord0 + offset.zw;
+{
+tmp += weights[0].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[1].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[2].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[3].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[4].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[5].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[5].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[6].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[6].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[6].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[6].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[7].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[7].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[7].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[7].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[8].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[8].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[8].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[8].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[9].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[9].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[9].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[9].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[10].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[10].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[10].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[10].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[11].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[11].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[11].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[11].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[12].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[12].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[12].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[12].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[13].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[13].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[13].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[13].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[14].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[14].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[14].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[14].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[15].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[15].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[15].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[15].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[16].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[16].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[16].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[16].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[17].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[17].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[17].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[17].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[18].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[18].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[18].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[18].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[19].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[19].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[19].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[19].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[20].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[20].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[20].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[20].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[21].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[21].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[21].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[21].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[22].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[22].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[22].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[22].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[23].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[23].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[23].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[23].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[24].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[24].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[24].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[24].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[25].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[25].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[25].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[25].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[26].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[26].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[26].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[26].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[27].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[27].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[27].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[27].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[28].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[28].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[28].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[28].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[29].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[29].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[29].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[29].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[30].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[30].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[30].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[30].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[31].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[31].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[31].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[31].w * texture2D(img, loc);
+loc += offset.xy;
+}
+gl_FragColor = tmp;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,107 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abs(tco), 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_12.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_12.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_12.frag	(date 1547619874000)
@@ -0,0 +1,57 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 shadowColor;
+uniform vec4 weights[3];
+void main() {
+int i;
+float sum = 0.0;
+vec2 loc = texCoord0 + offset.zw;
+{
+sum += weights[0].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[1].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[2].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+sum = clamp(sum, 0.0, 1.0);
+gl_FragColor = sum * shadowColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_20.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_20.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_20.frag	(date 1547619874000)
@@ -0,0 +1,75 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 weights[5];
+void main() {
+int i;
+vec4 tmp = vec4(0.0, 0.0, 0.0, 0.0);
+vec2 loc = texCoord0 + offset.zw;
+{
+tmp += weights[0].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[1].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[2].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[3].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[4].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[4].w * texture2D(img, loc);
+loc += offset.xy;
+}
+gl_FragColor = tmp;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Mask_TextureSuper_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Mask_TextureSuper_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Mask_TextureSuper_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,25 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D inputTex0;
+uniform sampler2D inputTex1;
+lowp vec4 paint(vec2 texCoord0, vec2 texCoord1) {
+return (texture2D(inputTex0, texCoord0) * texCoord1.x) + (texture2D(inputTex1, texCoord0).a * texCoord1.y);
+}
+void main() {
+gl_FragColor = paint(texCoord0, texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_RadialGradient_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_RadialGradient_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaOne_RadialGradient_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,30 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D colors;
+uniform vec4 content;
+uniform vec3 precalc;
+lowp vec4 paint(vec2 texCoord) {
+float xfx = texCoord.x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + texCoord.y * texCoord.y * precalc.y)) * precalc.z;
+vec2 fractvals = vec2(fract(dist), clamp(dist, 0.0, 1.0));
+vec2 clrCoord = vec2(content.x + dot(fractvals, content.zw), content.y);
+return texture2D(colors, clrCoord);
+}
+void main() {
+gl_FragColor = paint(texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_28.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_28.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_28.frag	(date 1547619874000)
@@ -0,0 +1,97 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 shadowColor;
+uniform vec4 weights[7];
+void main() {
+int i;
+float sum = 0.0;
+vec2 loc = texCoord0 + offset.zw;
+{
+sum += weights[0].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[1].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[2].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[3].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[4].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[5].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[6].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[6].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[6].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[6].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+sum = clamp(sum, 0.0, 1.0);
+gl_FragColor = sum * shadowColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,121 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_64.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_64.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_64.frag	(date 1547619874000)
@@ -0,0 +1,187 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 shadowColor;
+uniform vec4 weights[16];
+void main() {
+int i;
+float sum = 0.0;
+vec2 loc = texCoord0 + offset.zw;
+{
+sum += weights[0].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[1].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[2].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[3].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[4].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[5].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[6].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[6].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[6].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[6].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[7].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[7].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[7].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[7].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[8].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[8].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[8].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[8].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[9].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[9].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[9].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[9].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[10].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[10].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[10].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[10].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[11].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[11].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[11].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[11].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[12].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[12].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[12].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[12].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[13].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[13].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[13].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[13].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[14].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[14].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[14].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[14].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[15].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[15].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[15].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[15].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+sum = clamp(sum, 0.0, 1.0);
+gl_FragColor = sum * shadowColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureSecondPassLCD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureSecondPassLCD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureSecondPassLCD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,46 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D dstColor;
+uniform sampler2D glyphColor;
+uniform vec3 gamma;
+lowp vec4 paint(vec2 texCoord, vec2 texCoord2, vec4 jslVertexColor) {
+float unitXCoord = gamma.z;
+vec2 dTexCoord = texCoord;
+vec4 glyphClr;
+dTexCoord.x = texCoord.x - unitXCoord;
+glyphClr.r = texture2D(glyphColor, dTexCoord).a;
+glyphClr.g = texture2D(glyphColor, texCoord).a;
+dTexCoord.x = texCoord.x + unitXCoord;
+glyphClr.b = texture2D(glyphColor, dTexCoord).a;
+const float third = 1.0 / 3.0;
+glyphClr.a = dot(glyphClr.rgb, vec3(third, third, third));
+if (glyphClr.a == 0.0){
+discard;}
+vec4 dstClr = texture2D(dstColor, texCoord2);
+dstClr = pow(dstClr, vec4(gamma.y, gamma.y, gamma.y, gamma.y));
+vec4 c = jslVertexColor;
+vec4 glyphMix;
+glyphMix.a = glyphClr.a;
+glyphMix.rgb = mix(vec3(glyphClr.a, glyphClr.a, glyphClr.a), glyphClr.rgb, dstClr.a);
+c = dstClr * (1.0 - glyphClr * c.a) + c * glyphMix;
+c = pow(c, vec4(gamma.x, gamma.x, gamma.x, gamma.x));
+return c;
+}
+void main() {
+gl_FragColor = paint(texCoord0, texCoord1, perVertexColor);
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_4.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_4.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_4.frag	(date 1547619874000)
@@ -0,0 +1,37 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 shadowColor;
+uniform vec4 weights[1];
+void main() {
+int i;
+float sum = 0.0;
+vec2 loc = texCoord0 + offset.zw;
+{
+sum += weights[0].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+sum = clamp(sum, 0.0, 1.0);
+gl_FragColor = sum * shadowColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,105 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_BLUE.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_BLUE.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_BLUE.frag	(date 1547619874000)
@@ -0,0 +1,31 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_blue(vec4 bot, vec4 top) {
+vec4 res;
+res.a = bot.a + top.a - (bot.a * top.a);
+res.rg = bot.rg;
+res.b = (1.0 - top.a) * bot.b + top.b;
+return res;
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_blue(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_Color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_Color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_Color.frag	(date 1547619874000)
@@ -0,0 +1,23 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+void main() {
+gl_FragColor = mask(texCoord0) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_COLOR_DODGE.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_COLOR_DODGE.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_COLOR_DODGE.frag	(date 1547619874000)
@@ -0,0 +1,69 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_color_dodge(vec4 bot, vec4 top) {
+vec4 res;
+res.a = bot.a + top.a - (bot.a * top.a);
+res.rgb = (1.0 - top.a) * bot.rgb + (1.0 - bot.a) * top.rgb;
+float proda = bot.a * top.a;
+vec3 tmp;
+if (bot.r == 0.0){
+tmp.r = 0.0;
+}
+ else if (top.a == top.r){
+tmp.r = proda;
+}
+ else {
+tmp.r = top.a * top.a * bot.r / (top.a - top.r);
+if (tmp.r > proda){
+tmp.r = proda;
+}
+}
+if (bot.g == 0.0){
+tmp.g = 0.0;
+}
+ else if (top.a == top.g){
+tmp.g = proda;
+}
+ else {
+tmp.g = top.a * top.a * bot.g / (top.a - top.g);
+if (tmp.g > proda){
+tmp.g = proda;
+}
+}
+if (bot.b == 0.0){
+tmp.b = 0.0;
+}
+ else if (top.a == top.b){
+tmp.b = proda;
+}
+ else {
+tmp.b = top.a * top.a * bot.b / (top.a - top.b);
+if (tmp.b > proda){
+tmp.b = proda;
+}
+}
+res.rgb = res.rgb + tmp;
+return res;
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_color_dodge(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SRC_OUT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SRC_OUT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SRC_OUT.frag	(date 1547619874000)
@@ -0,0 +1,27 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_src_out(vec4 bot, vec4 top) {
+return top * (1.0 - bot.a);
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_src_out(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,100 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_24.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_24.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_24.frag	(date 1547619874000)
@@ -0,0 +1,87 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 shadowColor;
+uniform vec4 weights[6];
+void main() {
+int i;
+float sum = 0.0;
+vec2 loc = texCoord0 + offset.zw;
+{
+sum += weights[0].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[1].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[2].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[3].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[4].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[5].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+sum = clamp(sum, 0.0, 1.0);
+gl_FragColor = sum * shadowColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,107 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/DisplacementMap.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/DisplacementMap.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/DisplacementMap.frag	(date 1547619874000)
@@ -0,0 +1,28 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D origImg;
+uniform sampler2D mapImg;
+uniform vec4 sampletx;
+uniform vec4 imagetx;
+uniform float wrap;
+void main() {
+vec4 off = texture2D(mapImg, texCoord1);
+vec2 loc = texCoord0 + sampletx.zw * (off.xy + sampletx.xy);
+loc -= wrap * floor(loc);
+loc = imagetx.xy + (loc * imagetx.zw);
+gl_FragColor = texture2D(origImg, loc);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureYV12.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureYV12.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureYV12.frag	(date 1547619874000)
@@ -0,0 +1,44 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform sampler2D lumaTex;
+uniform sampler2D crTex;
+uniform sampler2D cbTex;
+uniform sampler2D alphaTex;
+uniform vec4 lumaAlphaScale;
+uniform vec4 cbCrScale;
+const float Y_ADJUST = 16.0 / 255.0;
+lowp vec4 paint(vec2 texCoord) {
+vec2 imgCoord;
+float luma = 1.1644 * (texture2D(lumaTex, texCoord * lumaAlphaScale.xy).a - Y_ADJUST);
+float cb = texture2D(cbTex, texCoord * cbCrScale.xy).a - 0.5;
+float cr = texture2D(crTex, texCoord * cbCrScale.zw).a - 0.5;
+vec4 RGBA;
+RGBA.r = luma + (1.5966 * cr);
+RGBA.g = luma - (0.392 * cb) - (0.8132 * cr);
+RGBA.b = luma + (2.0184 * cb);
+if (lumaAlphaScale.z > 0.0){
+RGBA.a = texture2D(alphaTex, texCoord * lumaAlphaScale.zw).a;
+RGBA.rgb *= RGBA.a;
+}
+ else {
+RGBA.a = 1.0;
+}
+return RGBA;
+}
+void main() {
+gl_FragColor = paint(texCoord0) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,100 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_32.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_32.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_32.frag	(date 1547619874000)
@@ -0,0 +1,107 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 shadowColor;
+uniform vec4 weights[8];
+void main() {
+int i;
+float sum = 0.0;
+vec2 loc = texCoord0 + offset.zw;
+{
+sum += weights[0].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[1].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[2].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[3].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[4].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[5].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[6].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[6].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[6].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[6].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[7].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[7].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[7].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[7].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+sum = clamp(sum, 0.0, 1.0);
+gl_FragColor = sum * shadowColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureFirstPassLCD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureFirstPassLCD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureFirstPassLCD.frag	(date 1547619874000)
@@ -0,0 +1,24 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform sampler2D inputTex;
+lowp vec4 paint(vec2 texCoord) {
+vec4 result = texture2D(inputTex, texCoord);
+return result;
+}
+void main() {
+gl_FragColor = paint(texCoord0) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/ColorAdjust.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/ColorAdjust.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/ColorAdjust.frag	(date 1547619874000)
@@ -0,0 +1,128 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D baseImg;
+uniform float hue;
+uniform float saturation;
+uniform float brightness;
+uniform float contrast;
+vec3 rgb_to_hsb(vec3 v) {
+float h;
+float s;
+float b;
+float cmax = max(v.r, v.g);
+cmax = max(cmax, v.b);
+float cmin = min(v.r, v.g);
+cmin = min(cmin, v.b);
+if (cmax > cmin){
+vec3 c = (cmax - v) / (cmax - cmin);
+if (v.r == cmax){
+h = c.b - c.g;
+}
+ else if (v.g == cmax){
+h = 2.0 + c.r - c.b;
+}
+ else {
+h = 4.0 + c.g - c.r;
+}
+h /= 6.0;
+if (h < 0.0){
+h += 1.0;
+}
+s = (cmax - cmin) / cmax;
+}
+ else {
+h = 0.0;
+s = 0.0;
+}
+b = cmax;
+return vec3(h, s, b);
+}
+vec3 hsb_to_rgb(vec3 v) {
+vec3 res = vec3(0.0, 0.0, 0.0);
+float h = v.r;
+float s = v.g;
+float b = v.b;
+h = (h - floor(h)) * 6.0;
+float f = h - floor(h);
+float p = b * (1.0 - s);
+float q = b * (1.0 - (s * f));
+float t = b * (1.0 - (s * (1.0 - f)));
+h = floor(h);
+if (h < 1.0){
+res.r = b;
+res.g = t;
+res.b = p;
+}
+ else if (h < 2.0){
+res.r = q;
+res.g = b;
+res.b = p;
+}
+ else if (h < 3.0){
+res.r = p;
+res.g = b;
+res.b = t;
+}
+ else if (h < 4.0){
+res.r = p;
+res.g = q;
+res.b = b;
+}
+ else if (h < 5.0){
+res.r = t;
+res.g = p;
+res.b = b;
+}
+ else {
+res.r = b;
+res.g = p;
+res.b = q;
+}
+return res;
+}
+void main() {
+vec4 src = texture2D(baseImg, texCoord0);
+if (src.a > 0.0){
+src.rgb /= src.a;
+}
+src.rgb = ((src.rgb - 0.5) * contrast) + 0.5;
+vec3 hsb = rgb_to_hsb(src.rgb);
+hsb.r += hue;
+if (hsb.r < 0.0){
+hsb.r += 1.0;
+}
+ else if (hsb.r > 1.0){
+hsb.r -= 1.0;
+}
+if (saturation > 1.0){
+float sat = saturation - 1.0;
+hsb.g += (1.0 - hsb.g) * sat;
+}
+ else {
+hsb.g *= saturation;
+}
+if (brightness > 1.0){
+float brt = brightness - 1.0;
+hsb.g *= 1.0 - brt;
+hsb.b += (1.0 - hsb.b) * brt;
+}
+ else {
+hsb.b *= brightness;
+}
+hsb.gb = clamp(hsb.gb, 0.0, 1.0);
+gl_FragColor.rgb = src.a * hsb_to_rgb(hsb);
+gl_FragColor.a = src.a;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/PhongLighting_SPOT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/PhongLighting_SPOT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/PhongLighting_SPOT.frag	(date 1547619874000)
@@ -0,0 +1,81 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D bumpImg;
+uniform sampler2D origImg;
+uniform float diffuseConstant;
+uniform float specularConstant;
+uniform float specularExponent;
+uniform vec3 lightColor;
+uniform vec4 kvals[8];
+uniform float surfaceScale;
+uniform vec3 lightPosition;
+uniform vec3 normalizedLightDirection;
+uniform float lightSpecularExponent;
+void main() {
+vec4 orig = texture2D(origImg, texCoord1);
+int i;
+vec3 sum = vec3(0.0, 0.0, 1.0);
+{
+sum.xy += kvals[0].zw * texture2D(bumpImg, texCoord0 + kvals[0].xy).a;
+}
+{
+sum.xy += kvals[1].zw * texture2D(bumpImg, texCoord0 + kvals[1].xy).a;
+}
+{
+sum.xy += kvals[2].zw * texture2D(bumpImg, texCoord0 + kvals[2].xy).a;
+}
+{
+sum.xy += kvals[3].zw * texture2D(bumpImg, texCoord0 + kvals[3].xy).a;
+}
+{
+sum.xy += kvals[4].zw * texture2D(bumpImg, texCoord0 + kvals[4].xy).a;
+}
+{
+sum.xy += kvals[5].zw * texture2D(bumpImg, texCoord0 + kvals[5].xy).a;
+}
+{
+sum.xy += kvals[6].zw * texture2D(bumpImg, texCoord0 + kvals[6].xy).a;
+}
+{
+sum.xy += kvals[7].zw * texture2D(bumpImg, texCoord0 + kvals[7].xy).a;
+}
+vec3 N = normalize(sum);
+float bumpA = texture2D(bumpImg, texCoord0).a;
+vec3 tmp = vec3(pixcoord.x, pixcoord.y, surfaceScale * bumpA);
+vec3 Lxyz = normalize(lightPosition - tmp);
+float LdotS = dot(Lxyz, normalizedLightDirection);
+LdotS = min(LdotS, 0.0);
+vec3 Lrgb = lightColor * pow(-LdotS, lightSpecularExponent);
+vec3 E = vec3(0.0, 0.0, 1.0);
+vec3 H = normalize(Lxyz + E);
+vec4 D;
+D.rgb = diffuseConstant * dot(N, Lxyz) * Lrgb;
+D.rgb = clamp(D.rgb, 0.0, 1.0);
+D.a = 1.0;
+vec4 S;
+float NdotH = dot(N, H);
+S.rgb = specularConstant * pow(NdotH, specularExponent) * Lrgb;
+S.a = max(S.r, S.g);
+S.a = max(S.a, S.b);
+orig *= D;
+S *= orig.a;
+gl_FragColor = S + (orig * (1.0 - S.a));
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_ImagePattern.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_ImagePattern.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_ImagePattern.frag	(date 1547619874000)
@@ -0,0 +1,45 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_16.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_16.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolve_16.frag	(date 1547619874000)
@@ -0,0 +1,65 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 weights[4];
+void main() {
+int i;
+vec4 tmp = vec4(0.0, 0.0, 0.0, 0.0);
+vec2 loc = texCoord0 + offset.zw;
+{
+tmp += weights[0].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[0].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[1].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[1].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[2].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[2].w * texture2D(img, loc);
+loc += offset.xy;
+}
+{
+tmp += weights[3].x * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].y * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].z * texture2D(img, loc);
+loc += offset.xy;
+tmp += weights[3].w * texture2D(img, loc);
+loc += offset.xy;
+}
+gl_FragColor = tmp;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/diffuse_color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/diffuse_color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/diffuse_color.frag	(date 1547619874000)
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2013, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+// diffuse color fragment shader
+
+#ifdef GL_ES
+
+#extension GL_OES_standard_derivatives : enable
+
+// Define default float precision for fragment shaders
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+
+#else
+
+// Ignore GL_ES precision specifiers:
+#define lowp
+#define mediump
+#define highp
+
+#endif
+
+/*not used
+uniform vec4 diffuseColor;
+uniform sampler2D diffuseTexture;
+
+varying vec2 oTexCoords;
+
+vec4 apply_diffuse() {
+    return diffuseColor;
+}
+*/
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,104 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/PerspectiveTransform.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/PerspectiveTransform.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/PerspectiveTransform.frag	(date 1547619874000)
@@ -0,0 +1,28 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D baseImg;
+uniform vec3 tx0;
+uniform vec3 tx1;
+uniform vec3 tx2;
+void main() {
+vec3 p1;
+vec3 p2;
+p1 = vec3(texCoord0.x, texCoord0.y, 1.0);
+p2.z = dot(p1, tx2);
+p2.x = dot(p1, tx0) / p2.z;
+p2.y = dot(p1, tx1) / p2.z;
+gl_FragColor = texture2D(baseImg, p2.xy);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_ImagePattern.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_ImagePattern.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_ImagePattern.frag	(date 1547619874000)
@@ -0,0 +1,32 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+uniform vec2 innerOffset;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a - texture2D(maskInput, texCoord - innerOffset).a;
+}
+uniform sampler2D inputTex;
+uniform vec4 content;
+lowp vec4 paint(vec2 texCoord) {
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/PhongLighting_DISTANT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/PhongLighting_DISTANT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/PhongLighting_DISTANT.frag	(date 1547619874000)
@@ -0,0 +1,70 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D bumpImg;
+uniform sampler2D origImg;
+uniform float diffuseConstant;
+uniform float specularConstant;
+uniform float specularExponent;
+uniform vec3 lightColor;
+uniform vec4 kvals[8];
+uniform vec3 normalizedLightPosition;
+void main() {
+vec4 orig = texture2D(origImg, texCoord1);
+int i;
+vec3 sum = vec3(0.0, 0.0, 1.0);
+{
+sum.xy += kvals[0].zw * texture2D(bumpImg, texCoord0 + kvals[0].xy).a;
+}
+{
+sum.xy += kvals[1].zw * texture2D(bumpImg, texCoord0 + kvals[1].xy).a;
+}
+{
+sum.xy += kvals[2].zw * texture2D(bumpImg, texCoord0 + kvals[2].xy).a;
+}
+{
+sum.xy += kvals[3].zw * texture2D(bumpImg, texCoord0 + kvals[3].xy).a;
+}
+{
+sum.xy += kvals[4].zw * texture2D(bumpImg, texCoord0 + kvals[4].xy).a;
+}
+{
+sum.xy += kvals[5].zw * texture2D(bumpImg, texCoord0 + kvals[5].xy).a;
+}
+{
+sum.xy += kvals[6].zw * texture2D(bumpImg, texCoord0 + kvals[6].xy).a;
+}
+{
+sum.xy += kvals[7].zw * texture2D(bumpImg, texCoord0 + kvals[7].xy).a;
+}
+vec3 N = normalize(sum);
+vec3 Lxyz = normalizedLightPosition;
+vec3 Lrgb = lightColor;
+vec3 E = vec3(0.0, 0.0, 1.0);
+vec3 H = normalize(Lxyz + E);
+vec4 D;
+D.rgb = diffuseConstant * dot(N, Lxyz) * Lrgb;
+D.rgb = clamp(D.rgb, 0.0, 1.0);
+D.a = 1.0;
+vec4 S;
+float NdotH = dot(N, H);
+S.rgb = specularConstant * pow(NdotH, specularExponent) * Lrgb;
+S.a = max(S.r, S.g);
+S.a = max(S.a, S.b);
+orig *= D;
+S *= orig.a;
+gl_FragColor = S + (orig * (1.0 - S.a));
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_LinearGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,101 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_HARD_LIGHT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_HARD_LIGHT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_HARD_LIGHT.frag	(date 1547619874000)
@@ -0,0 +1,48 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_hard_light(vec4 bot, vec4 top) {
+vec4 res;
+res.a = bot.a + top.a - (bot.a * top.a);
+float halftopa = 0.5 * top.a;
+if (top.r > halftopa){
+res.r = top.r + bot.a * (top.r - top.a) - bot.r * (2.0 * top.r - top.a - 1.0);
+}
+ else {
+res.r = 2.0 * bot.r * top.r + bot.r * (1.0 - top.a) + top.r * (1.0 - bot.a);
+}
+if (top.g > halftopa){
+res.g = top.g + bot.a * (top.g - top.a) - bot.g * (2.0 * top.g - top.a - 1.0);
+}
+ else {
+res.g = 2.0 * bot.g * top.g + bot.g * (1.0 - top.a) + top.g * (1.0 - bot.a);
+}
+if (top.b > halftopa){
+res.b = top.b + bot.a * (top.b - top.a) - bot.b * (2.0 * top.b - top.a - 1.0);
+}
+ else {
+res.b = 2.0 * bot.b * top.b + bot.b * (1.0 - top.a) + top.b * (1.0 - bot.a);
+}
+return res;
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_hard_light(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_96.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_96.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/LinearConvolveShadow_96.frag	(date 1547619874000)
@@ -0,0 +1,267 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D img;
+uniform int count;
+uniform vec4 offset;
+uniform vec4 shadowColor;
+uniform vec4 weights[24];
+void main() {
+int i;
+float sum = 0.0;
+vec2 loc = texCoord0 + offset.zw;
+{
+sum += weights[0].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[0].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[1].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[1].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[2].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[2].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[3].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[3].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[4].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[4].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[5].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[5].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[6].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[6].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[6].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[6].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[7].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[7].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[7].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[7].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[8].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[8].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[8].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[8].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[9].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[9].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[9].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[9].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[10].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[10].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[10].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[10].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[11].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[11].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[11].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[11].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[12].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[12].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[12].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[12].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[13].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[13].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[13].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[13].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[14].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[14].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[14].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[14].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[15].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[15].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[15].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[15].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[16].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[16].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[16].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[16].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[17].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[17].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[17].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[17].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[18].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[18].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[18].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[18].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[19].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[19].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[19].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[19].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[20].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[20].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[20].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[20].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[21].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[21].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[21].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[21].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[22].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[22].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[22].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[22].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+{
+sum += weights[23].x * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[23].y * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[23].z * texture2D(img, loc).a;
+loc += offset.xy;
+sum += weights[23].w * texture2D(img, loc).a;
+loc += offset.xy;
+}
+sum = clamp(sum, 0.0, 1.0);
+gl_FragColor = sum * shadowColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,115 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_EXCLUSION.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_EXCLUSION.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_EXCLUSION.frag	(date 1547619874000)
@@ -0,0 +1,30 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_exclusion(vec4 bot, vec4 top) {
+vec4 res;
+res.a = bot.a + top.a - (bot.a * top.a);
+res.rgb = top.rgb + bot.rgb - (2.0 * top.rgb * bot.rgb);
+return res;
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_exclusion(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_LinearGradient_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_LinearGradient_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_LinearGradient_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,32 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+uniform vec2 innerOffset;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a - texture2D(maskInput, texCoord - innerOffset).a;
+}
+uniform sampler2D colors;
+uniform vec4 content;
+lowp vec4 paint(vec2 texCoord) {
+vec2 fractvals = vec2(fract(texCoord.x), clamp(texCoord.x, 0.0, 1.0));
+vec2 clrCoord = vec2(content.x + dot(fractvals, content.zw), content.y);
+return texture2D(colors, clrCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,110 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_ADD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_ADD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_ADD.frag	(date 1547619874000)
@@ -0,0 +1,28 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_add(vec4 bot, vec4 top) {
+vec4 mix = max(bot * top.a + top * bot.a - top.a * bot.a, 0.0);
+return bot + top - mix;
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_add(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Brightpass.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Brightpass.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Brightpass.frag	(date 1547619874000)
@@ -0,0 +1,24 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+uniform sampler2D baseImg;
+uniform float threshold;
+void main() {
+vec3 luminanceVector = vec3(0.2125, 0.7154, 0.0721);
+vec4 val = texture2D(baseImg, texCoord0);
+float luminance = dot(luminanceVector, val.rgb);
+luminance = max(0.0, luminance - val.a * threshold);
+gl_FragColor = val * sign(luminance);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_LinearGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,102 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,95 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/PhongLighting_POINT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/PhongLighting_POINT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/PhongLighting_POINT.frag	(date 1547619874000)
@@ -0,0 +1,77 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D bumpImg;
+uniform sampler2D origImg;
+uniform float diffuseConstant;
+uniform float specularConstant;
+uniform float specularExponent;
+uniform vec3 lightColor;
+uniform vec4 kvals[8];
+uniform float surfaceScale;
+uniform vec3 lightPosition;
+void main() {
+vec4 orig = texture2D(origImg, texCoord1);
+int i;
+vec3 sum = vec3(0.0, 0.0, 1.0);
+{
+sum.xy += kvals[0].zw * texture2D(bumpImg, texCoord0 + kvals[0].xy).a;
+}
+{
+sum.xy += kvals[1].zw * texture2D(bumpImg, texCoord0 + kvals[1].xy).a;
+}
+{
+sum.xy += kvals[2].zw * texture2D(bumpImg, texCoord0 + kvals[2].xy).a;
+}
+{
+sum.xy += kvals[3].zw * texture2D(bumpImg, texCoord0 + kvals[3].xy).a;
+}
+{
+sum.xy += kvals[4].zw * texture2D(bumpImg, texCoord0 + kvals[4].xy).a;
+}
+{
+sum.xy += kvals[5].zw * texture2D(bumpImg, texCoord0 + kvals[5].xy).a;
+}
+{
+sum.xy += kvals[6].zw * texture2D(bumpImg, texCoord0 + kvals[6].xy).a;
+}
+{
+sum.xy += kvals[7].zw * texture2D(bumpImg, texCoord0 + kvals[7].xy).a;
+}
+vec3 N = normalize(sum);
+float bumpA = texture2D(bumpImg, texCoord0).a;
+vec3 tmp = vec3(pixcoord.x, pixcoord.y, surfaceScale * bumpA);
+vec3 Lxyz = normalize(lightPosition - tmp);
+vec3 Lrgb = lightColor;
+vec3 E = vec3(0.0, 0.0, 1.0);
+vec3 H = normalize(Lxyz + E);
+vec4 D;
+D.rgb = diffuseConstant * dot(N, Lxyz) * Lrgb;
+D.rgb = clamp(D.rgb, 0.0, 1.0);
+D.a = 1.0;
+vec4 S;
+float NdotH = dot(N, H);
+S.rgb = specularConstant * pow(NdotH, specularExponent) * Lrgb;
+S.a = max(S.r, S.g);
+S.a = max(S.a, S.b);
+orig *= D;
+S *= orig.a;
+gl_FragColor = S + (orig * (1.0 - S.a));
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_LinearGradient.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_LinearGradient.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_LinearGradient.frag	(date 1547619874000)
@@ -0,0 +1,31 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+uniform sampler2D colors;
+uniform vec4 content;
+lowp vec4 paint(vec2 texCoord) {
+vec2 fractvals = vec2(fract(texCoord.x), clamp(texCoord.x, 0.0, 1.0));
+vec2 clrCoord = vec2(content.x + dot(fractvals, content.zw), content.y);
+return texture2D(colors, clrCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_COLOR_BURN.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_COLOR_BURN.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_COLOR_BURN.frag	(date 1547619874000)
@@ -0,0 +1,79 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_color_burn(vec4 bot, vec4 top) {
+vec4 res;
+res.a = bot.a + top.a - (bot.a * top.a);
+res.rgb = (1.0 - top.a) * bot.rgb + (1.0 - bot.a) * top.rgb;
+float proda = bot.a * top.a;
+float topa2 = top.a * top.a;
+vec3 tmp;
+if (bot.a == bot.r){
+tmp.r = proda;
+}
+ else if (top.r == 0.0){
+tmp.r = 0.0;
+}
+ else {
+tmp.r = topa2 * (bot.a - bot.r) / top.r;
+if (tmp.r >= proda){
+tmp.r = 0.0;
+}
+ else {
+tmp.r = proda - tmp.r;
+}
+}
+if (bot.a == bot.g){
+tmp.g = proda;
+}
+ else if (top.g == 0.0){
+tmp.g = 0.0;
+}
+ else {
+tmp.g = topa2 * (bot.a - bot.g) / top.g;
+if (tmp.g >= proda){
+tmp.g = 0.0;
+}
+ else {
+tmp.g = proda - tmp.g;
+}
+}
+if (bot.a == bot.b){
+tmp.b = proda;
+}
+ else if (top.b == 0.0){
+tmp.b = 0.0;
+}
+ else {
+tmp.b = topa2 * (bot.a - bot.b) / top.b;
+if (tmp.b >= proda){
+tmp.b = 0.0;
+}
+ else {
+tmp.b = proda - tmp.b;
+}
+}
+res.rgb = res.rgb + tmp;
+return res;
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_color_burn(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/normalMap_texture.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/normalMap_texture.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/normalMap_texture.frag	(date 1547619874000)
@@ -0,0 +1,57 @@
+/*
+ * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+// normal map fragment shader
+
+#ifdef GL_ES
+
+#extension GL_OES_standard_derivatives : enable
+
+// Define default float precision for fragment shaders
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+
+#else
+
+// Ignore GL_ES precision specifiers:
+#define lowp
+#define mediump
+#define highp
+
+#endif
+
+uniform sampler2D normalMap;
+
+vec3 apply_normal() {
+    vec4 normal = texture2D(normalMap, oTexCoords);
+    vec3 retVal = normalize(normal.xyz * 2.0 - 1.0);
+    return retVal;
+}
+
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,105 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_Color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_Color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_Color.frag	(date 1547619874000)
@@ -0,0 +1,39 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,95 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,105 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SCREEN.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SCREEN.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SCREEN.frag	(date 1547619874000)
@@ -0,0 +1,27 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_screen(vec4 bot, vec4 top) {
+return bot + top - bot * top;
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_screen(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_Color_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_Color_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_Color_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,27 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_DARKEN.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_DARKEN.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_DARKEN.frag	(date 1547619874000)
@@ -0,0 +1,30 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_darken(vec4 bot, vec4 top) {
+vec4 res;
+res.a = bot.a + top.a - (bot.a * top.a);
+res.rgb = bot.rgb + top.rgb - max(top.a * bot.rgb, bot.a * top.rgb);
+return res;
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_darken(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_RadialGradient_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_RadialGradient_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTexture_RadialGradient_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,34 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+uniform sampler2D colors;
+uniform vec4 content;
+uniform vec3 precalc;
+lowp vec4 paint(vec2 texCoord) {
+float xfx = texCoord.x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + texCoord.y * texCoord.y * precalc.y)) * precalc.z;
+vec2 fractvals = vec2(fract(dist), clamp(dist, 0.0, 1.0));
+vec2 clrCoord = vec2(content.x + dot(fractvals, content.zw), content.y);
+return texture2D(colors, clrCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,116 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SRC_ATOP.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SRC_ATOP.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/scenario/effect/impl/es2/glsl/Blend_SRC_ATOP.frag	(date 1547619874000)
@@ -0,0 +1,27 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+uniform sampler2D botImg;
+uniform sampler2D topImg;
+uniform float opacity;
+vec4 blend_src_atop(vec4 bot, vec4 top) {
+return (top * bot.a) + (bot * (1.0 - top.a));
+}
+void main() {
+vec4 bot = texture2D(botImg, texCoord0);
+vec4 top = texture2D(topImg, texCoord1) * opacity;
+gl_FragColor = blend_src_atop(bot, top);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,109 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,105 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,110 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_ImagePattern.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_ImagePattern.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_ImagePattern.frag	(date 1547619874000)
@@ -0,0 +1,35 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,104 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,105 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureYV12_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureYV12_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_TextureYV12_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,44 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform sampler2D lumaTex;
+uniform sampler2D crTex;
+uniform sampler2D cbTex;
+uniform sampler2D alphaTex;
+uniform vec4 lumaAlphaScale;
+uniform vec4 cbCrScale;
+const float Y_ADJUST = 16.0 / 255.0;
+lowp vec4 paint(vec2 texCoord) {
+vec2 imgCoord;
+float luma = 1.1644 * (texture2D(lumaTex, texCoord * lumaAlphaScale.xy).a - Y_ADJUST);
+float cb = texture2D(cbTex, texCoord * cbCrScale.xy).a - 0.5;
+float cr = texture2D(crTex, texCoord * cbCrScale.zw).a - 0.5;
+vec4 RGBA;
+RGBA.r = luma + (1.5966 * cr);
+RGBA.g = luma - (0.392 * cb) - (0.8132 * cr);
+RGBA.b = luma + (2.0184 * cb);
+if (lumaAlphaScale.z > 0.0){
+RGBA.a = texture2D(alphaTex, texCoord * lumaAlphaScale.zw).a;
+RGBA.rgb *= RGBA.a;
+}
+ else {
+RGBA.a = 1.0;
+}
+return RGBA;
+}
+void main() {
+gl_FragColor = paint(texCoord0) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,106 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,121 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_ImagePattern.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_ImagePattern.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_ImagePattern.frag	(date 1547619874000)
@@ -0,0 +1,42 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abs(tco), 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_Color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_Color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_Color.frag	(date 1547619874000)
@@ -0,0 +1,27 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_RadialGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,106 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/org/glassfish/json/messages.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/org/glassfish/json/messages.properties	(date 1509638262000)
+++ build/libs/network1-1.0-SNAPSHOT-all/org/glassfish/json/messages.properties	(date 1509638262000)
@@ -0,0 +1,112 @@
+#
+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
+#
+# Copyright (c) 2013-2017 Oracle and/or its affiliates. All rights reserved.
+#
+# The contents of this file are subject to the terms of either the GNU
+# General Public License Version 2 only ("GPL") or the Common Development
+# and Distribution License("CDDL") (collectively, the "License").  You
+# may not use this file except in compliance with the License.  You can
+# obtain a copy of the License at
+# https://oss.oracle.com/licenses/CDDL+GPL-1.1
+# or LICENSE.txt.  See the License for the specific
+# language governing permissions and limitations under the License.
+#
+# When distributing the software, include this License Header Notice in each
+# file and include the License file at LICENSE.txt.
+#
+# GPL Classpath Exception:
+# Oracle designates this particular file as subject to the "Classpath"
+# exception as provided by Oracle in the GPL Version 2 section of the License
+# file that accompanied this code.
+#
+# Modifications:
+# If applicable, add the following below the License Header, with the fields
+# enclosed by brackets [] replaced by your own identifying information:
+# "Portions Copyright [year] [name of copyright owner]"
+#
+# Contributor(s):
+# If you wish your version of this file to be governed by only the CDDL or
+# only the GPL Version 2, indicate your decision by adding "[Contributor]
+# elects to include this software in this distribution under the [CDDL or GPL
+# Version 2] license."  If you don't indicate a single choice of license, a
+# recipient has the option to distribute your version of this file under
+# either the CDDL, the GPL Version 2 or to extend the choice of license to
+# its licensees as provided above.  However, if you add GPL Version 2 code
+# and therefore, elected the GPL Version 2 license, then the option applies
+# only if the new code is made subject to such option by the copyright
+# holder.
+#
+
+internal.error=Internal Error
+
+parser.getString.err=JsonParser#getString() is valid only for KEY_NAME, VALUE_STRING, VALUE_NUMBER parser states. \
+  But current parser state is {0}
+parser.isIntegralNumber.err=JsonParser#isIntegralNumber() is valid only for VALUE_NUMBER parser state. \
+  But current parser state is {0}
+parser.getInt.err=JsonParser#getInt() is valid only for VALUE_NUMBER parser state. \
+  But current parser state is {0}
+parser.getLong.err=JsonParser#getLong() is valid only for VALUE_NUMBER parser state. \
+  But current parser state is {0}
+parser.getBigDecimal.err=JsonParser#getBigDecimal() is valid only for VALUE_NUMBER parser state. \
+  But current parser state is {0}
+parser.getArray.err=JsonParser#getArray() or JsonParser#getArrayStream() is valid only for START_ARRAY parser state. \
+  But current parser state is {0}
+parser.getObject.err=JsonParser#getObject() or JsonParser#getObjectStream() is valid only for START_OBJECT parser state. \
+  But current parser state is {0}
+parser.getValue.err=JsonParser#getValue() is valid only for START_ARRAY, START_OBJECT, KEY_NAME, VALUE_STRING, VALUE_NUMBER, VALUE_NULL, VALUE_FALSE, VALUE_TRUE parser states. \
+  But current parser state is {0}
+parser.getValueStream.err=JsonParser#getValueStream() the parser must not be in an array or object. \
+  But current parser state is {0}
+parser.expected.eof=Expected EOF token, but got {0}
+parser.tokenizer.close.io=I/O error while closing JSON tokenizer
+parser.invalid.token=Invalid token={0} at {1}. Expected tokens are: {2}
+parser.state.err=Unknown value type {0}
+parser.scope.err=Cannot be called for value {0}
+parser.input.enc.detect.failed=Cannot auto-detect encoding, not enough chars
+parser.input.enc.detect.ioerr=I/O error while auto-detecting the encoding of stream
+
+generator.flush.io.err=I/O error while flushing generated JSON
+generator.close.io.err=I/O error while closing JsonGenerator
+generator.write.io.err=I/O error while writing in JsonGenerator
+generator.illegal.method=Illegal method during JSON generation, \
+  not valid in current context {0}
+generator.double.infinite.nan=double value cannot be Infinite or NaN
+generator.incomplete.json=Generating incomplete JSON
+generator.illegal.multiple.text=Cannot generate more than one JSON text
+
+writer.write.already.called=write/writeObject/writeArray/close method is already called
+
+reader.read.already.called=read/readObject/readArray/close method is already called
+
+objbuilder.name.null=Name in JsonObject's name/value pair cannot be null
+objbuilder.value.null=Value in JsonObject's name/value pair cannot be null
+objbuilder.object.builder.null=Object builder that is used to create a value in JsonObject's name/value pair cannot be null
+objbuilder.array.builder.null=Array builder that is used to create a value in JsonObject's name/value pair cannot be null
+
+arrbuilder.value.null=Cannot invoke add(null) while building JsonArray.
+arrbuilder.object.builder.null=Object builder that is used to add a value to JSON array cannot be null
+arrbuilder.array.builder.null=Array builder that is used to add a value to JSON array cannot be null
+arrbuilder.valuelist.null=Index: {0}, Size: {1}
+
+tokenizer.unexpected.char=Unexpected char {0} at {1}
+tokenizer.expected.char=Unexpected char {0} at {1}, expecting ''{2}''
+tokenizer.io.err=I/O error while parsing JSON
+
+pointer.format.invalid=A non-empty JSON Pointer must begin with a ''/''
+pointer.mapping.missing=The JSON Object ''{0}'' contains no mapping for the name ''{1}''
+pointer.reference.invalid=The reference value in a JSON Pointer must be a JSON Object or a JSON Array, was ''{0}''
+pointer.array.index.err=Array index format error, was ''{0}''
+pointer.array.index.illegal=Illegal integer format, was ''{0}''
+
+noderef.value.add.err=The root value only allows adding a JSON object or array
+noderef.value.cannot.remove=The JSON value at the root cannot be removed
+noderef.object.missing=Non-existing name/value pair in the object for key {0}
+noderef.array.index.err=An array item index is out of range. Index: {0}, Size: {1}
+
+patch.must.be.array=A JSON Patch must be an array of JSON Objects
+patch.move.proper.prefix=The ''{0}'' path of the patch operation ''move'' is a proper prefix of the ''{1}'' path
+patch.move.target.null=The ''{0}'' path of the patch operation ''move'' does not exist in target object
+patch.test.failed=The JSON Patch operation ''test'' failed for path ''{0}'' and value ''{1}''
+patch.illegal.operation=Illegal value for the op member of the JSON Patch operation: ''{0}''
+patch.member.missing=The JSON Patch operation ''{0}'' must contain a ''{1}'' member
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/normalMap_none.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/normalMap_none.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/normalMap_none.frag	(date 1547619874000)
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+// no texture normal map fragment shader
+
+#ifdef GL_ES
+
+#extension GL_OES_standard_derivatives : enable
+
+// Define default float precision for fragment shaders
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+
+#else
+
+// Ignore GL_ES precision specifiers:
+#define lowp
+#define mediump
+#define highp
+
+#endif
+
+uniform sampler2D normalMap;
+
+vec3 apply_normal() {
+    return vec3(0.0,0.0,1.0);
+}
+
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,107 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,100 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_RadialGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,109 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,105 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,109 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_ImagePattern.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_ImagePattern.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillCircle_ImagePattern.frag	(date 1547619874000)
@@ -0,0 +1,41 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 dim) {
+float lensq = dot(tco, tco);
+return clamp(0.5 * (dim.x + 1.0 - (lensq - 0.25) / dim.x), 0.0, dim.y);
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,110 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_Color_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_Color_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_Color_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,27 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_ImagePattern.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_ImagePattern.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_ImagePattern.frag	(date 1547619874000)
@@ -0,0 +1,44 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,107 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_LinearGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,110 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_LinearGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,95 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/specular_mix.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/specular_mix.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/specular_mix.frag	(date 1547619874000)
@@ -0,0 +1,60 @@
+/*
+ * Copyright (c) 2013, 2014, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+// specular mix fragment shader
+
+#ifdef GL_ES
+
+#extension GL_OES_standard_derivatives : enable
+
+// Define default float precision for fragment shaders
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+
+#else
+
+// Ignore GL_ES precision specifiers:
+#define lowp
+#define mediump
+#define highp
+
+#endif
+
+uniform vec4 specularColor;
+uniform sampler2D specularMap;
+
+vec4 apply_specular()
+{
+    vec3 tSpec = texture2D(specularMap, oTexCoords).rgb;
+    float sPower = specularColor.a;
+    sPower *= dot(tSpec, vec3(0.299, 0.587, 0.114)); // Rec. 601 luma conversion
+    tSpec *= specularColor.rgb;
+    return vec4(tSpec, sPower);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,121 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillPgram_RadialGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,107 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+lowp float mask(vec2 tco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abs(tco), 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,109 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_LinearGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,100 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,105 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_ImagePattern_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_ImagePattern_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_ImagePattern_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,56 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,105 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/main0Lights.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/main0Lights.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/main0Lights.frag	(date 1547619874000)
@@ -0,0 +1,68 @@
+/*
+ * Copyright (c) 2013, 2015, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+// main fragment shader
+
+#ifdef GL_ES
+
+#extension GL_OES_standard_derivatives : enable
+
+// Define default float precision for fragment shaders
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+
+#else
+
+// Ignore GL_ES precision specifiers:
+#define lowp
+#define mediump
+#define highp
+
+#endif
+
+vec4 apply_diffuse();
+vec4 apply_selfIllum();
+
+uniform vec3 ambientColor;
+
+varying vec3 eyePos;
+
+void main()
+{
+    gl_FragColor = vec4(0.0,0.0,0.0,1.0);
+    vec4 diffuse = apply_diffuse();
+
+    if (diffuse.a == 0.0) discard;
+
+    vec3 rez = (ambientColor) * diffuse.xyz;
+    rez += apply_selfIllum().xyz;
+
+    gl_FragColor = vec4(clamp(rez, 0.0, 1.0) , diffuse.a);
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_ImagePattern_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_ImagePattern_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawEllipse_ImagePattern_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,50 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+float ellipsemask(vec2 abstco, vec2 invarcradii) {
+vec2 absecctco = abstco * invarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float delta = dot(absecctco, invarcradii) * 2.0;
+return clamp(0.5 + (1.0 - ecclensq) / delta, 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 abstco = abs(tco);
+float ocov = ellipsemask(abstco, odim);
+float icov = ellipsemask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,111 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,109 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_Color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_Color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_Color.frag	(date 1547619874000)
@@ -0,0 +1,24 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+uniform vec2 innerOffset;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a - texture2D(maskInput, texCoord - innerOffset).a;
+}
+void main() {
+gl_FragColor = mask(texCoord0) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,105 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleReflect(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,104 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_REFLECT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawRoundRect_LinearGradient_REFLECT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,111 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 iinvarcradii;
+float rrmask(vec2 arcreltco, vec2 invarcradii) {
+vec2 ecctco = arcreltco * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+lowp float mask(vec2 tco, vec2 flatdim) {
+vec2 arcreltco = max(abs(tco) - flatdim, 0.001);
+float ocov = rrmask(arcreltco, oinvarcradii);
+float icov = rrmask(arcreltco, iinvarcradii);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Texture_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,105 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform sampler2D maskInput;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_Color_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_Color_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_Color_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,28 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,109 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_Color_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_Color_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_Color_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,24 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+uniform vec2 innerOffset;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a - texture2D(maskInput, texCoord - innerOffset).a;
+}
+void main() {
+gl_FragColor = mask(texCoord0) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawPgram_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,110 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+vec2 ocov = clamp(odim + 0.5 - abs(tco), 0.0, 1.0);
+vec2 icov = clamp(idim + 0.5 - abs(tco), 0.0, 1.0);
+ocov = min(ocov, odim * 2.0);
+icov = min(icov, idim * 2.0);
+return ocov.x * ocov.y - icov.x * icov.y;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_PAD_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillRoundRect_RadialGradient_PAD_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,109 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 absecctco = max(abs(tco) - oflatdim, 0.001) * oinvarcradii;
+float ecclensq = dot(absecctco, absecctco);
+float pix = dot(absecctco / ecclensq, oinvarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleNone(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_Color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_Color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/FillEllipse_Color.frag	(date 1547619874000)
@@ -0,0 +1,25 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+lowp float mask(vec2 ecctco, vec2 invarcradii) {
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(abs(ecctco), invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_Color.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_Color.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/Solid_Color.frag	(date 1547619874000)
@@ -0,0 +1,18 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying lowp vec4 perVertexColor;
+void main() {
+gl_FragColor = perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_REPEAT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_REPEAT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_REPEAT.frag	(date 1547619874000)
@@ -0,0 +1,104 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleRepeat(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_ImagePattern.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_ImagePattern.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_ImagePattern.frag	(date 1547619874000)
@@ -0,0 +1,56 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_REFLECT.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_REFLECT.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_LinearGradient_REFLECT.frag	(date 1547619874000)
@@ -0,0 +1,116 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleReflect(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_REPEAT_AlphaTest.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawSemiRoundRect_RadialGradient_REPEAT_AlphaTest.frag	(date 1547619874000)
@@ -0,0 +1,121 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 oinvarcradii;
+uniform vec2 idim;
+float rrmask(vec2 abstco, vec2 flatdim, vec2 invarcradii) {
+vec2 ecctco = max(abstco - flatdim, 0.001) * invarcradii;
+float ecclensq = dot(ecctco, ecctco);
+float pix = dot(ecctco / ecclensq, invarcradii);
+return clamp(0.5 + (1.0 + 0.25 * pix * pix - ecclensq) / (2.0 * pix), 0.0, 1.0);
+}
+float pgrammask(vec2 abstco, vec2 tcc) {
+vec2 cov = clamp(tcc + 0.5 - abstco, 0.0, 1.0);
+cov = min(cov, tcc * 2.0);
+return cov.x * cov.y;
+}
+lowp float mask(vec2 tco, vec2 oflatdim) {
+vec2 abstco = abs(tco);
+float ocov = rrmask(abstco, oflatdim, oinvarcradii);
+float icov = pgrammask(abstco, idim);
+return clamp(ocov - icov, 0.0, 1.0);
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 m0;
+uniform vec4 m1;
+uniform vec3 precalc;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wdist = dot(fragCoord, perspVec);
+float x = dot(fragCoord, m0.xyz) / wdist + m0.w;
+float y = dot(fragCoord, m1.xyz) / wdist + m1.w;
+float xfx = x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + y * y * precalc.y)) * precalc.z;
+return cycleRepeat(dist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+if (gl_FragColor.a == 0.0)discard;}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_ImagePattern.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_ImagePattern.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_ImagePattern.frag	(date 1547619874000)
@@ -0,0 +1,44 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+uniform sampler2D inputTex;
+uniform vec4 xParams;
+uniform vec4 yParams;
+uniform vec3 perspVec;
+uniform vec4 content;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float wParam = dot(fragCoord, perspVec);
+vec2 texCoord = vec2(dot(xParams.xyz, fragCoord) / wParam + xParams.w, dot(yParams.xyz, fragCoord) / wParam + yParams.w);
+texCoord = fract(texCoord);
+texCoord = vec2(content.x, content.y) + texCoord * vec2(content.z, content.w);
+return texture2D(inputTex, texCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_RadialGradient.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_RadialGradient.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/AlphaTextureDifference_RadialGradient.frag	(date 1547619874000)
@@ -0,0 +1,35 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform sampler2D maskInput;
+uniform vec2 innerOffset;
+lowp float mask(vec2 texCoord) {
+return texture2D(maskInput, texCoord).a - texture2D(maskInput, texCoord - innerOffset).a;
+}
+uniform sampler2D colors;
+uniform vec4 content;
+uniform vec3 precalc;
+lowp vec4 paint(vec2 texCoord) {
+float xfx = texCoord.x - precalc.x;
+float dist = (precalc.x * xfx + sqrt(xfx * xfx + texCoord.y * texCoord.y * precalc.y)) * precalc.z;
+vec2 fractvals = vec2(fract(dist), clamp(dist, 0.0, 1.0));
+vec2 clrCoord = vec2(content.x + dot(fractvals, content.zw), content.y);
+return texture2D(colors, clrCoord);
+}
+void main() {
+gl_FragColor = mask(texCoord0) * paint(texCoord1) * perVertexColor;
+}
Index: build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_PAD.frag
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_PAD.frag	(date 1547619874000)
+++ build/libs/network1-1.0-SNAPSHOT-all/com/sun/prism/es2/glsl/DrawCircle_LinearGradient_PAD.frag	(date 1547619874000)
@@ -0,0 +1,104 @@
+#ifdef GL_ES
+#extension GL_OES_standard_derivatives : enable
+#ifdef GL_FRAGMENT_PRECISION_HIGH
+precision highp float;
+precision highp int;
+#else
+precision mediump float;
+precision mediump int;
+#endif
+#else
+#define highp
+#define mediump
+#define lowp
+#endif
+varying vec2 texCoord0;
+varying vec2 texCoord1;
+varying lowp vec4 perVertexColor;
+uniform vec4 jsl_pixCoordOffset;
+vec2 pixcoord = vec2(
+    gl_FragCoord.x-jsl_pixCoordOffset.x,
+    ((jsl_pixCoordOffset.z-gl_FragCoord.y)*jsl_pixCoordOffset.w)-jsl_pixCoordOffset.y);
+uniform vec2 idim;
+lowp float mask(vec2 tco, vec2 odim) {
+float lensq_m_25 = dot(tco, tco) - 0.25;
+float ocov = clamp(0.5 * (odim.x + 1.0 - lensq_m_25 / odim.x), 0.0, odim.y);
+float icov = clamp(0.5 * (idim.x + 1.0 - lensq_m_25 / idim.x), 0.0, idim.y);
+return ocov - icov;
+}
+const int MAX_FRACTIONS = 12;
+const float TEXTURE_WIDTH = 16.0;
+const float FULL_TEXEL_X = 1.0 / TEXTURE_WIDTH;
+const float HALF_TEXEL_X = FULL_TEXEL_X / 2.0;
+uniform vec4 fractions[12];
+uniform sampler2D colors;
+uniform float offset;
+vec4 sampleGradient(float dist) {
+int i;
+float relFraction = 0.0;
+{
+relFraction += clamp((dist - fractions[0].x) * fractions[0].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[1].x) * fractions[1].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[2].x) * fractions[2].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[3].x) * fractions[3].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[4].x) * fractions[4].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[5].x) * fractions[5].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[6].x) * fractions[6].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[7].x) * fractions[7].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[8].x) * fractions[8].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[9].x) * fractions[9].y, 0.0, 1.0);
+}
+{
+relFraction += clamp((dist - fractions[10].x) * fractions[10].y, 0.0, 1.0);
+}
+float tc = HALF_TEXEL_X + (FULL_TEXEL_X * relFraction);
+return texture2D(colors, vec2(tc, offset));
+}
+vec4 cycleNone(float dist) {
+if (dist <= 0.0){
+return texture2D(colors, vec2(0.0, offset));
+}
+ else if (dist >= 1.0){
+return texture2D(colors, vec2(1.0, offset));
+}
+ else {
+return sampleGradient(dist);
+}
+}
+vec4 cycleReflect(float dist) {
+dist = 1.0 - (abs(fract(dist * 0.5) - 0.5) * 2.0);
+return sampleGradient(dist);
+}
+vec4 cycleRepeat(float dist) {
+dist = fract(dist);
+return sampleGradient(dist);
+}
+uniform vec4 gradParams;
+uniform vec3 perspVec;
+lowp vec4 paint(vec2 winCoord) {
+vec3 fragCoord = vec3(winCoord.x, winCoord.y, 1.0);
+float dist = dot(fragCoord, gradParams.xyz);
+float wdist = dot(fragCoord, perspVec);
+return cycleNone(gradParams.w + dist / wdist);
+}
+void main() {
+gl_FragColor = mask(texCoord0, texCoord1) * paint(pixcoord) * perVertexColor;
+}
